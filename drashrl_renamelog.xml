<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.0.3, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Mon Feb 12 13:58:40 COT 2007

  Jar file to be obfuscated:           drashrl.jar
  Target Jar file for obfuscated code: drashrl_obf.jar

-->
<!--
  Memory in use after class data structure built: 3818480 bytes
  Total memory available                        : 6938624 bytes
-->
<expose>
  <class name="crl.Main"/>
  <method class="crl.Main" name="void main(java.lang.String[])"/>
</expose>
<map>
  <package name="sz" map="A"/>
  <package name="sz.midi" map="A"/>
  <class name="sz.midi.STMidiPlayerOld" map="A"/>
  <field class="sz.midi.STMidiPlayerOld" name="INS_LOAD" map="A"/>
  <field class="sz.midi.STMidiPlayerOld" name="currentInstruction" map="B"/>
  <field class="sz.midi.STMidiPlayerOld" name="INS_DIE" map="C"/>
  <field class="sz.midi.STMidiPlayerOld" name="currentMidiFile" map="D"/>
  <field class="sz.midi.STMidiPlayerOld" name="INS_STOP" map="E"/>
  <method class="sz.midi.STMidiPlayerOld" name="void setInstruction(int)" map="A"/>
  <method class="sz.midi.STMidiPlayerOld" name="void setMidi(java.lang.String)" map="A"/>
  <method class="sz.midi.STMidiPlayerOld" name="void run()" map="run"/>
  <class name="sz.midi.MidiInfo" map="B"/>
  <field class="sz.midi.MidiInfo" name="sequencer" map="A"/>
  <field class="sz.midi.MidiInfo" name="seq" map="B"/>
  <field class="sz.midi.MidiInfo" name="filename" map="C"/>
  <field class="sz.midi.MidiInfo" name="SOUND_DIR" map="D"/>
  <field class="sz.midi.MidiInfo" name="name" map="E"/>
  <field class="sz.midi.MidiInfo" name="isLooping" map="F"/>
  <method class="sz.midi.MidiInfo" name="void play(boolean)" map="A"/>
  <method class="sz.midi.MidiInfo" name="boolean tryLooping()" map="A"/>
  <method class="sz.midi.MidiInfo" name="void stop()" map="B"/>
  <method class="sz.midi.MidiInfo" name="java.lang.String getName()" map="C"/>
  <method class="sz.midi.MidiInfo" name="void resume()" map="D"/>
  <method class="sz.midi.MidiInfo" name="void pause()" map="E"/>
  <method class="sz.midi.MidiInfo" name="void loadMidi()" map="F"/>
  <class name="sz.midi.STMidiPlayer" map="C"/>
  <field class="sz.midi.STMidiPlayer" name="sequencer" map="A"/>
  <field class="sz.midi.STMidiPlayer" name="INS_LOAD" map="B"/>
  <field class="sz.midi.STMidiPlayer" name="currentInstruction" map="C"/>
  <field class="sz.midi.STMidiPlayer" name="INS_DIE" map="D"/>
  <field class="sz.midi.STMidiPlayer" name="currentMidiFile" map="E"/>
  <field class="sz.midi.STMidiPlayer" name="INS_STOP" map="F"/>
  <method class="sz.midi.STMidiPlayer" name="void setInstruction(int)" map="A"/>
  <method class="sz.midi.STMidiPlayer" name="void setMidi(java.lang.String)" map="A"/>
  <method class="sz.midi.STMidiPlayer" name="void run()" map="run"/>
  <class name="sz.midi.MidisLoader" map="D"/>
  <field class="sz.midi.MidisLoader" name="sequencer" map="A"/>
  <field class="sz.midi.MidisLoader" name="SOUND_DIR" map="B"/>
  <field class="sz.midi.MidisLoader" name="watcher" map="C"/>
  <field class="sz.midi.MidisLoader" name="currentMidi" map="D"/>
  <field class="sz.midi.MidisLoader" name="END_OF_TRACK" map="E"/>
  <field class="sz.midi.MidisLoader" name="midisMap" map="F"/>
  <method class="sz.midi.MidisLoader" name="void meta(javax.sound.midi.MetaMessage)" map="meta"/>
  <method class="sz.midi.MidisLoader" name="void close()" map="A"/>
  <method class="sz.midi.MidisLoader" name="void load(java.lang.String, java.lang.String)" map="A"/>
  <method class="sz.midi.MidisLoader" name="void resume()" map="B"/>
  <method class="sz.midi.MidisLoader" name="void loadSoundsFile(java.lang.String)" map="A"/>
  <method class="sz.midi.MidisLoader" name="void pause()" map="C"/>
  <method class="sz.midi.MidisLoader" name="void setWatcher(sz.midi.SoundsWatcher)" map="A"/>
  <method class="sz.midi.MidisLoader" name="void playFile(java.lang.String, boolean)" map="A"/>
  <method class="sz.midi.MidisLoader" name="void initSequencer()" map="D"/>
  <method class="sz.midi.MidisLoader" name="void play(java.lang.String, boolean)" map="B"/>
  <method class="sz.midi.MidisLoader" name="void stop()" map="E"/>
  <class name="sz.midi.SoundsWatcher" map="E"/>
  <field class="sz.midi.SoundsWatcher" name="STOPPED" map="A"/>
  <field class="sz.midi.SoundsWatcher" name="REPLAYED" map="B"/>
  <method class="sz.midi.SoundsWatcher" name="void atSequenceEnd(java.lang.String, int)" map="A"/>
  <package name="sz.ca" map="B"/>
  <class name="sz.ca.CARandomInitializer" map="A"/>
  <field class="sz.ca.CARandomInitializer" name="border" map="A"/>
  <field class="sz.ca.CARandomInitializer" name="proportions" map="B"/>
  <method class="sz.ca.CARandomInitializer" name="void init(sz.ca.Matrix)" map="A"/>
  <class name="sz.ca.Matrix" map="B"/>
  <field class="sz.ca.Matrix" name="futureValues" map="A"/>
  <field class="sz.ca.Matrix" name="values" map="B"/>
  <method class="sz.ca.Matrix" name="void advance()" map="A"/>
  <method class="sz.ca.Matrix" name="int[][] getArrays()" map="B"/>
  <method class="sz.ca.Matrix" name="void setPresent(int, int, int)" map="A"/>
  <method class="sz.ca.Matrix" name="void clean()" map="C"/>
  <method class="sz.ca.Matrix" name="int get(int, int)" map="A"/>
  <method class="sz.ca.Matrix" name="int getSurroundingCount(int, int, int)" map="B"/>
  <method class="sz.ca.Matrix" name="int getWidth()" map="D"/>
  <method class="sz.ca.Matrix" name="int getSurroundingCountNoWrap(int, int, int)" map="C"/>
  <method class="sz.ca.Matrix" name="void setFuture(int, int, int)" map="D"/>
  <method class="sz.ca.Matrix" name="int getHeight()" map="E"/>
  <class name="sz.ca.SZCA" map="C"/>
  <field class="sz.ca.SZCA" name="aMatrix" map="A"/>
  <field class="sz.ca.SZCA" name="wrap" map="B"/>
  <field class="sz.ca.SZCA" name="generation" map="C"/>
  <field class="sz.ca.SZCA" name="aRules" map="D"/>
  <method class="sz.ca.SZCA" name="void runCA(sz.ca.Matrix, sz.ca.CARule[], int, boolean)" map="A"/>
  <method class="sz.ca.SZCA" name="void step()" map="A"/>
  <class name="sz.ca.CARule" map="D"/>
  <field class="sz.ca.CARule" name="HAS" map="A"/>
  <field class="sz.ca.CARule" name="condType" map="B"/>
  <field class="sz.ca.CARule" name="LESS_THAN" map="C"/>
  <field class="sz.ca.CARule" name="baseCell" map="D"/>
  <field class="sz.ca.CARule" name="destinationCell" map="E"/>
  <field class="sz.ca.CARule" name="MORE_THAN" map="F"/>
  <field class="sz.ca.CARule" name="cellParam" map="G"/>
  <field class="sz.ca.CARule" name="cellQuant" map="H"/>
  <method class="sz.ca.CARule" name="void apply(int, int, sz.ca.Matrix, boolean)" map="A"/>
  <method class="sz.ca.CARule" name="java.lang.String toString()" map="toString"/>
  <method class="sz.ca.CARule" name="void validateType(int, int)" map="A"/>
  <package name="sz.fov" map="C"/>
  <class name="sz.fov.FOV" map="A"/>
  <field class="sz.fov.FOV" name="startY" map="A"/>
  <field class="sz.fov.FOV" name="startX" map="B"/>
  <field class="sz.fov.FOV" name="maxRadiusX" map="C"/>
  <field class="sz.fov.FOV" name="circle" map="D"/>
  <method class="sz.fov.FOV" name="void scanSE2S(sz.fov.FOVMap, int, int, int, int, double, double)" map="A"/>
  <method class="sz.fov.FOV" name="boolean scanCell(sz.fov.FOVMap, int, int)" map="A"/>
  <method class="sz.fov.FOV" name="void scanNE2N(sz.fov.FOVMap, int, int, int, int, double, double)" map="B"/>
  <method class="sz.fov.FOV" name="void applyCell(sz.fov.FOVMap, int, int)" map="B"/>
  <method class="sz.fov.FOV" name="void scanNE2E(sz.fov.FOVMap, int, int, int, int, double, double)" map="C"/>
  <method class="sz.fov.FOV" name="void scanSW2W(sz.fov.FOVMap, int, int, int, int, double, double)" map="D"/>
  <method class="sz.fov.FOV" name="void start(sz.fov.FOVMap, int, int, int)" map="A"/>
  <method class="sz.fov.FOV" name="void startCircle(sz.fov.FOVMap, int, int, int)" map="B"/>
  <method class="sz.fov.FOV" name="double invSlope(double, double, double, double)" map="A"/>
  <method class="sz.fov.FOV" name="void scanNW2W(sz.fov.FOVMap, int, int, int, int, double, double)" map="E"/>
  <method class="sz.fov.FOV" name="void scanSW2S(sz.fov.FOVMap, int, int, int, int, double, double)" map="F"/>
  <method class="sz.fov.FOV" name="void scanNW2N(sz.fov.FOVMap, int, int, int, int, double, double)" map="G"/>
  <method class="sz.fov.FOV" name="void scanSE2E(sz.fov.FOVMap, int, int, int, int, double, double)" map="H"/>
  <method class="sz.fov.FOV" name="double slope(double, double, double, double)" map="B"/>
  <class name="sz.fov.FOVMap" map="B"/>
  <method class="sz.fov.FOVMap" name="boolean blockLOS(int, int)" map="A"/>
  <method class="sz.fov.FOVMap" name="void setSeen(int, int)" map="B"/>
  <package name="sz.util" map="D"/>
  <class name="sz.util.PriorityEnqueable" map="A"/>
  <method class="sz.util.PriorityEnqueable" name="void reduceCost(int)" map="A"/>
  <method class="sz.util.PriorityEnqueable" name="int getCost()" map="A"/>
  <class name="sz.util.Position" map="B"/>
  <field class="sz.util.Position" name="x" map="A"/>
  <field class="sz.util.Position" name="z" map="B"/>
  <field class="sz.util.Position" name="y" map="C"/>
  <method class="sz.util.Position" name="int flatDistance(sz.util.Position, sz.util.Position)" map="A"/>
  <method class="sz.util.Position" name="sz.util.Position mul(sz.util.Position, sz.util.Position)" map="B"/>
  <method class="sz.util.Position" name="int flatDistance(int, int, int, int)" map="A"/>
  <method class="sz.util.Position" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="sz.util.Position" name="void add(sz.util.Position)" map="A"/>
  <method class="sz.util.Position" name="int z()" map="A"/>
  <method class="sz.util.Position" name="sz.util.Position mul(sz.util.Position, int)" map="A"/>
  <method class="sz.util.Position" name="sz.util.Position subs(sz.util.Position, sz.util.Position)" map="C"/>
  <method class="sz.util.Position" name="int distance(sz.util.Position, sz.util.Position)" map="D"/>
  <method class="sz.util.Position" name="sz.util.Position add(sz.util.Position, sz.util.Position)" map="E"/>
  <method class="sz.util.Position" name="int y()" map="B"/>
  <method class="sz.util.Position" name="java.lang.String toString()" map="toString"/>
  <method class="sz.util.Position" name="void mul(sz.util.Position)" map="B"/>
  <method class="sz.util.Position" name="int x()" map="C"/>
  <class name="sz.util.ImageUtils" map="C"/>
  <field class="sz.util.ImageUtils" name="tempImage" map="A"/>
  <method class="sz.util.ImageUtils" name="java.awt.Image crearImagen(java.lang.String, java.awt.Component)" map="A"/>
  <method class="sz.util.ImageUtils" name="java.awt.image.BufferedImage crearImagen(java.awt.image.BufferedImage, int, int, int, int)" map="A"/>
  <method class="sz.util.ImageUtils" name="java.awt.Image crearImagen(java.lang.String)" map="A"/>
  <method class="sz.util.ImageUtils" name="java.awt.image.BufferedImage createImage(java.lang.String)" map="B"/>
  <method class="sz.util.ImageUtils" name="java.awt.image.BufferedImage crearImagen(java.lang.String, int, int, int, int)" map="A"/>
  <class name="sz.util.Line" map="D"/>
  <field class="sz.util.Line" name="xvar" map="A"/>
  <field class="sz.util.Line" name="z" map="B"/>
  <field class="sz.util.Line" name="ystep" map="C"/>
  <field class="sz.util.Line" name="steep" map="D"/>
  <field class="sz.util.Line" name="error" map="E"/>
  <field class="sz.util.Line" name="y" map="F"/>
  <field class="sz.util.Line" name="x" map="G"/>
  <field class="sz.util.Line" name="deltay" map="H"/>
  <field class="sz.util.Line" name="deltax" map="I"/>
  <method class="sz.util.Line" name="void main(java.lang.String[])" map="A"/>
  <method class="sz.util.Line" name="sz.util.Position next()" map="A"/>
  <method class="sz.util.Line" name="void setZ(int)" map="A"/>
  <class name="sz.util.Area" map="E"/>
  <field class="sz.util.Area" name="dimension" map="D"/>
  <method class="sz.util.Area" name="boolean contains(int, int)" map="A"/>
  <method class="sz.util.Area" name="sz.util.Position getDimension()" map="D"/>
  <method class="sz.util.Area" name="boolean overlaps(sz.util.Area)" map="A"/>
  <class name="sz.util.ScriptUtil" map="F"/>
  <method class="sz.util.ScriptUtil" name="java.lang.String replace(java.lang.String[], java.lang.String[], java.lang.String)" map="A"/>
  <class name="sz.util.FileUtil" map="G"/>
  <method class="sz.util.FileUtil" name="boolean fileExists(java.lang.String)" map="A"/>
  <method class="sz.util.FileUtil" name="java.io.BufferedWriter getWriter(java.lang.String)" map="B"/>
  <method class="sz.util.FileUtil" name="java.io.BufferedReader getReader(java.lang.String)" map="C"/>
  <method class="sz.util.FileUtil" name="int filasEnArchivo(java.lang.String)" map="D"/>
  <method class="sz.util.FileUtil" name="void deleteFile(java.lang.String)" map="E"/>
  <method class="sz.util.FileUtil" name="void copyFile(java.io.File, java.io.File)" map="A"/>
  <class name="sz.util.Dimension" map="H"/>
  <field class="sz.util.Dimension" name="x" map="A"/>
  <field class="sz.util.Dimension" name="y" map="B"/>
  <method class="sz.util.Dimension" name="int getArea()" map="A"/>
  <class name="sz.util.SZPriorityQueue" map="I"/>
  <field class="sz.util.SZPriorityQueue" name="list" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="java.util.Vector getVector()" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="void enqueue(sz.util.PriorityEnqueable)" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="void forceToFront(java.lang.Object, java.lang.Object)" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="void remove(java.lang.Object)" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="void forceToFront(java.lang.Object)" map="B"/>
  <method class="sz.util.SZPriorityQueue" name="boolean contains(java.lang.Object)" map="C"/>
  <method class="sz.util.SZPriorityQueue" name="void printStatus()" map="B"/>
  <method class="sz.util.SZPriorityQueue" name="void removeAll()" map="C"/>
  <method class="sz.util.SZPriorityQueue" name="boolean isEmpty()" map="D"/>
  <method class="sz.util.SZPriorityQueue" name="java.lang.Object unqueue()" map="E"/>
  <class name="sz.util.Counter" map="J"/>
  <field class="sz.util.Counter" name="value" map="A"/>
  <method class="sz.util.Counter" name="boolean isOver()" map="A"/>
  <method class="sz.util.Counter" name="void reduce()" map="B"/>
  <class name="sz.util.Util" map="K"/>
  <field class="sz.util.Util" name="rand" map="A"/>
  <method class="sz.util.Util" name="java.lang.Object randomElementOf(java.util.Vector)" map="A"/>
  <method class="sz.util.Util" name="int rand(int, int)" map="A"/>
  <method class="sz.util.Util" name="int sign(int)" map="A"/>
  <method class="sz.util.Util" name="java.lang.Object randomElementOf(java.lang.Object[])" map="A"/>
  <method class="sz.util.Util" name="java.util.Vector page(java.util.Vector, int, int)" map="A"/>
  <method class="sz.util.Util" name="boolean chance(int)" map="B"/>
  <method class="sz.util.Util" name="int greater(int, int)" map="B"/>
  <method class="sz.util.Util" name="int abs(int)" map="C"/>
  <method class="sz.util.Util" name="java.lang.String randomElementOf(java.lang.String[])" map="A"/>
  <class name="sz.util.Debug" map="L"/>
  <field class="sz.util.Debug" name="gossip" map="A"/>
  <field class="sz.util.Debug" name="debug" map="B"/>
  <field class="sz.util.Debug" name="lastTimer" map="C"/>
  <field class="sz.util.Debug" name="timing" map="D"/>
  <field class="sz.util.Debug" name="firstTimer" map="E"/>
  <field class="sz.util.Debug" name="methodLevel" map="F"/>
  <method class="sz.util.Debug" name="void say(java.lang.Object)" map="A"/>
  <method class="sz.util.Debug" name="void exitMethod()" map="A"/>
  <method class="sz.util.Debug" name="void say(java.lang.String, int)" map="A"/>
  <method class="sz.util.Debug" name="java.lang.String spaces(int)" map="A"/>
  <method class="sz.util.Debug" name="void enterStaticMethod(java.lang.String, java.lang.String)" map="A"/>
  <method class="sz.util.Debug" name="void exitMethod(int)" map="B"/>
  <method class="sz.util.Debug" name="void doAssert(boolean, java.lang.String)" map="A"/>
  <method class="sz.util.Debug" name="void stopTimer(java.lang.String)" map="A"/>
  <method class="sz.util.Debug" name="void enterMethod(java.lang.Object, java.lang.String)" map="A"/>
  <method class="sz.util.Debug" name="void enterMethod(java.lang.Object, java.lang.String, java.lang.Object)" map="A"/>
  <method class="sz.util.Debug" name="void say(java.lang.String)" map="B"/>
  <method class="sz.util.Debug" name="void exitExceptionally(java.lang.Throwable)" map="A"/>
  <method class="sz.util.Debug" name="void startTimer()" map="B"/>
  <method class="sz.util.Debug" name="void exitMethod(java.lang.Object)" map="B"/>
  <class name="sz.util.SZQueue" map="M"/>
  <field class="sz.util.SZQueue" name="list" map="A"/>
  <method class="sz.util.SZQueue" name="java.util.Vector getVector()" map="A"/>
  <method class="sz.util.SZQueue" name="void enqueue(sz.util.PriorityEnqueable)" map="A"/>
  <method class="sz.util.SZQueue" name="void forceToFront(java.lang.Object, java.lang.Object)" map="A"/>
  <method class="sz.util.SZQueue" name="void remove(java.lang.Object)" map="A"/>
  <method class="sz.util.SZQueue" name="void forceToFront(java.lang.Object)" map="B"/>
  <method class="sz.util.SZQueue" name="boolean contains(java.lang.Object)" map="C"/>
  <method class="sz.util.SZQueue" name="void removeAll()" map="B"/>
  <method class="sz.util.SZQueue" name="boolean isEmpty()" map="C"/>
  <method class="sz.util.SZQueue" name="java.lang.Object unqueue()" map="D"/>
  <package name="sz.mp3" map="E"/>
  <class name="sz.mp3.JLayerMP3Player" map="A"/>
  <field class="sz.mp3.JLayerMP3Player" name="INS_LOAD" map="A"/>
  <field class="sz.mp3.JLayerMP3Player" name="currentInstruction" map="B"/>
  <field class="sz.mp3.JLayerMP3Player" name="INS_DIE" map="C"/>
  <field class="sz.mp3.JLayerMP3Player" name="INS_STOP" map="D"/>
  <field class="sz.mp3.JLayerMP3Player" name="currentMP3File" map="E"/>
  <method class="sz.mp3.JLayerMP3Player" name="void setInstruction(int)" map="A"/>
  <method class="sz.mp3.JLayerMP3Player" name="void run()" map="run"/>
  <method class="sz.mp3.JLayerMP3Player" name="void setMP3(java.lang.String)" map="A"/>
  <package name="sz.gadgets" map="F"/>
  <class name="sz.gadgets.MenuBox" map="A"/>
  <field class="sz.gadgets.MenuBox" name="COLOR_BORDER_IN" map="A"/>
  <field class="sz.gadgets.MenuBox" name="width" map="B"/>
  <field class="sz.gadgets.MenuBox" name="ypos" map="C"/>
  <field class="sz.gadgets.MenuBox" name="itemsPerPage" map="D"/>
  <field class="sz.gadgets.MenuBox" name="pages" map="E"/>
  <field class="sz.gadgets.MenuBox" name="TRANSPARENT_BLUE" map="F"/>
  <field class="sz.gadgets.MenuBox" name="si" map="G"/>
  <field class="sz.gadgets.MenuBox" name="xpos" map="H"/>
  <field class="sz.gadgets.MenuBox" name="currentPage" map="I"/>
  <field class="sz.gadgets.MenuBox" name="items" map="J"/>
  <field class="sz.gadgets.MenuBox" name="gap" map="K"/>
  <field class="sz.gadgets.MenuBox" name="title" map="L"/>
  <field class="sz.gadgets.MenuBox" name="COLOR_BORDER_OUT" map="M"/>
  <method class="sz.gadgets.MenuBox" name="void setPosition(int, int)" map="A"/>
  <method class="sz.gadgets.MenuBox" name="void setGap(int)" map="A"/>
  <method class="sz.gadgets.MenuBox" name="void setMenuItems(java.util.Vector)" map="A"/>
  <method class="sz.gadgets.MenuBox" name="void draw()" map="A"/>
  <method class="sz.gadgets.MenuBox" name="void setItemsPerPage(int)" map="B"/>
  <method class="sz.gadgets.MenuBox" name="void setBounds(int, int, int, int)" map="A"/>
  <method class="sz.gadgets.MenuBox" name="java.lang.Object getSelection()" map="B"/>
  <method class="sz.gadgets.MenuBox" name="void setTitle(java.lang.String)" map="A"/>
  <method class="sz.gadgets.MenuBox" name="void setWidth(int)" map="C"/>
  <class name="sz.gadgets.GFXMenuItem" map="B"/>
  <method class="sz.gadgets.GFXMenuItem" name="java.lang.String getMenuDescription()" map="A"/>
  <method class="sz.gadgets.GFXMenuItem" name="java.lang.String getMenuDetail()" map="B"/>
  <method class="sz.gadgets.GFXMenuItem" name="java.awt.Image getMenuImage()" map="C"/>
  <package name="sz.crypt" map="G"/>
  <class name="sz.crypt.DESEncrypter" map="A"/>
  <field class="sz.crypt.DESEncrypter" name="iterationCount" map="A"/>
  <field class="sz.crypt.DESEncrypter" name="ecipher" map="B"/>
  <field class="sz.crypt.DESEncrypter" name="buf" map="C"/>
  <field class="sz.crypt.DESEncrypter" name="salt" map="D"/>
  <field class="sz.crypt.DESEncrypter" name="dcipher" map="E"/>
  <method class="sz.crypt.DESEncrypter" name="java.io.InputStream decrypt(java.io.InputStream)" map="A"/>
  <method class="sz.crypt.DESEncrypter" name="void decrypt(java.io.InputStream, java.io.OutputStream)" map="A"/>
  <method class="sz.crypt.DESEncrypter" name="void encrypt(java.io.InputStream, java.io.OutputStream)" map="B"/>
  <package name="sz.csi" map="H"/>
  <package name="sz.csi.wswing" map="A"/>
  <class name="sz.csi.wswing.SwingConsolePanel" map="A"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="fontDown" map="A"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="fontWidth" map="B"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="fontSize" map="C"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="updateBuffer" map="D"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="xpos" map="E"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="charBuffer" map="F"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="backGround" map="G"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="ypos" map="H"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="graphicsBuff" map="I"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="autoUpdate" map="J"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="height" map="K"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="flash" map="L"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="xdim" map="M"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="width" map="N"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="colorBuffer" map="O"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="imageBuff" map="P"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="ydim" map="Q"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="f" map="R"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="flashColor" map="S"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="foreGround" map="T"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void flash(java.awt.Color)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void setAutoUpdate(boolean)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void refresh()" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void plot(char, int, int, java.awt.Color)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void init(java.awt.Font, int, int)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void cls()" map="B"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="char peekChar(int, int)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void plot(char, int, int)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void setFont(java.awt.Font)" map="setFont"/>
  <class name="sz.csi.wswing.WSwingConsoleInterface" map="B"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="consoleFont" map="q"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="colorsBuffer" map="r"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="targetPanel" map="s"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="targetFrame" map="t"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="xpos" map="u"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="aStrokeInformer" map="v"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="ypos" map="w"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="BROWN_COLOR" map="x"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="colors" map="y"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="DARKRED_COLOR" map="z"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="autorefresh" map="&#x00a2;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="DARKMAGENTA_COLOR" map="&#x00a3;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="chars" map="&#x00a4;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="xdim" map="&#x00a5;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="DARKGREEN_COLOR" map="&#x00aa;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="caretPosition" map="&#x00b5;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="ydim" map="&#x00ba;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="DARKBLUE_COLOR" map="&#x00c0;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="TEAL_COLOR" map="&#x00c1;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="charsBuffer" map="&#x00c2;"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void safeprint(int, int, char, int)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="boolean isInsideBounds(int, int)" map="E"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void cls()" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void componentShown(java.awt.event.ComponentEvent)" map="componentShown"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void print(int, int, java.lang.String)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void setAutoRefresh(boolean)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="java.lang.String loadFont()" map="G"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void refresh()" map="B"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void restore()" map="C"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="boolean isInsideBounds(sz.util.Position)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void refresh(java.lang.Thread)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="java.lang.String input(int)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void flash(int)" map="B"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="int peekColor(int, int)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void waitKey(int)" map="C"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="sz.csi.CharKey inkey()" map="D"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void locateCaret(int, int)" map="B"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void saveBuffer()" map="E"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void componentMoved(java.awt.event.ComponentEvent)" map="componentMoved"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void print(int, int, char, int)" map="B"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void locate(int, int)" map="F"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="java.lang.String input()" map="F"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void componentResized(java.awt.event.ComponentEvent)" map="componentResized"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="int defineFontSize(int, int)" map="G"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void print(int, int, java.lang.String, int)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void componentHidden(java.awt.event.ComponentEvent)" map="componentHidden"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void run()" map="run"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="char peekChar(int, int)" map="C"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="java.awt.Color getColorFromCode(int)" map="F"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="int getColor(java.lang.String)" map="A"/>
  <class name="sz.csi.wswing.StrokeInformer" map="C"/>
  <field class="sz.csi.wswing.StrokeInformer" name="bufferCode" map="A"/>
  <field class="sz.csi.wswing.StrokeInformer" name="keyListener" map="B"/>
  <field class="sz.csi.wswing.StrokeInformer" name="aUI" map="C"/>
  <method class="sz.csi.wswing.StrokeInformer" name="int getInkeyBuffer()" map="A"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void setUI(crl.ui.UserInterface)" map="A"/>
  <method class="sz.csi.wswing.StrokeInformer" name="int charCode(java.awt.event.KeyEvent)" map="A"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void informKey(java.lang.Thread)" map="A"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="sz.csi.wswing.SwingConsoleFrame" map="D"/>
  <field class="sz.csi.wswing.SwingConsoleFrame" name="swingConsolePanel" map="A"/>
  <method class="sz.csi.wswing.SwingConsoleFrame" name="void init(java.awt.Font, int, int)" map="A"/>
  <method class="sz.csi.wswing.SwingConsoleFrame" name="sz.csi.wswing.SwingConsolePanel getSwingConsolePanel()" map="A"/>
  <method class="sz.csi.wswing.SwingConsoleFrame" name="void initComponents()" map="B"/>
  <package name="sz.csi.jcurses" map="B"/>
  <class name="sz.csi.jcurses.JCursesConsoleInterface" map="A"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="GREEN" map="Q"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="colorsBuffer" map="R"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="GRAY" map="S"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_F1" map="T"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="TEAL" map="U"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="BLACK" map="V"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_DOWN" map="W"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="BLUE" map="X"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_RIGHT" map="Y"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="RED" map="Z"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="colors" map="_"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="LIGHT_GRAY" map="a"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="DARK_RED" map="b"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="chars" map="c"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="BROWN" map="d"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_UP" map="e"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="CYAN" map="f"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="caretPosition" map="g"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="MAGENTA" map="h"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="YELLOW" map="i"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_BACKSPACE" map="j"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="DARK_BLUE" map="k"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="WHITE" map="l"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_LEFT" map="m"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="PURPLE" map="n"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="LEMON" map="o"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="charsBuffer" map="p"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void safeprint(int, int, char, int)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="boolean isInsideBounds(int, int)" map="D"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void cls()" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void print(int, int, java.lang.String)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void setAutoRefresh(boolean)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void refresh()" map="B"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="jcurses.system.CharColor getJCurseColor(int)" map="D"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void restore()" map="C"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void refresh(java.lang.Thread)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="boolean isInsideBounds(sz.util.Position)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="java.lang.String input(int)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="int ASCtoCharKeyCode(int)" map="E"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="int peekColor(int, int)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void flash(int)" map="B"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void waitKey(int)" map="C"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="sz.csi.CharKey inkey()" map="D"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void locateCaret(int, int)" map="B"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void saveBuffer()" map="E"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void print(int, int, char, int)" map="B"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="java.lang.String input()" map="F"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void print(int, int, java.lang.String, int)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="char peekChar(int, int)" map="C"/>
  <package name="sz.csi.textcomponents" map="C"/>
  <class name="sz.csi.textcomponents.MenuBox" map="A"/>
  <field class="sz.csi.textcomponents.MenuBox" name="pages" map="S"/>
  <field class="sz.csi.textcomponents.MenuBox" name="items" map="T"/>
  <field class="sz.csi.textcomponents.MenuBox" name="currentPage" map="U"/>
  <field class="sz.csi.textcomponents.MenuBox" name="promptBox" map="V"/>
  <field class="sz.csi.textcomponents.MenuBox" name="title" map="W"/>
  <field class="sz.csi.textcomponents.MenuBox" name="promptSize" map="X"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setPosition(int, int)" map="A"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setPrompt(java.lang.String)" map="E"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setBorder(boolean)" map="A"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setMenuItems(java.util.Vector)" map="C"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void draw()" map="C"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setPromptSize(int)" map="E"/>
  <method class="sz.csi.textcomponents.MenuBox" name="java.lang.Object getSelection()" map="M"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setTitle(java.lang.String)" map="F"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setWidth(int)" map="D"/>
  <class name="sz.csi.textcomponents.TextComponent" map="B"/>
  <field class="sz.csi.textcomponents.TextComponent" name="foreColor" map="A"/>
  <field class="sz.csi.textcomponents.TextComponent" name="width" map="B"/>
  <field class="sz.csi.textcomponents.TextComponent" name="borderColor" map="C"/>
  <field class="sz.csi.textcomponents.TextComponent" name="border" map="D"/>
  <field class="sz.csi.textcomponents.TextComponent" name="si" map="E"/>
  <field class="sz.csi.textcomponents.TextComponent" name="position" map="F"/>
  <field class="sz.csi.textcomponents.TextComponent" name="inWidth" map="G"/>
  <field class="sz.csi.textcomponents.TextComponent" name="spaces" map="H"/>
  <field class="sz.csi.textcomponents.TextComponent" name="inHeight" map="I"/>
  <field class="sz.csi.textcomponents.TextComponent" name="height" map="J"/>
  <field class="sz.csi.textcomponents.TextComponent" name="inPosition" map="K"/>
  <method class="sz.csi.textcomponents.TextComponent" name="boolean hasBorder()" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setPosition(int, int)" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void drawBorder()" map="B"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setBorder(boolean)" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void draw()" map="C"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setHeight(int)" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setBorderColor(int)" map="B"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void clearBox()" map="D"/>
  <method class="sz.csi.textcomponents.TextComponent" name="int getForeColor()" map="E"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setForeColor(int)" map="C"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setBounds(int, int, int, int)" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="int getWidth()" map="F"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void recalcInnerBounds()" map="G"/>
  <method class="sz.csi.textcomponents.TextComponent" name="int getHeight()" map="H"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setWidth(int)" map="D"/>
  <class name="sz.csi.textcomponents.ListBox" map="C"/>
  <field class="sz.csi.textcomponents.ListBox" name="itemsLista" map="L"/>
  <method class="sz.csi.textcomponents.ListBox" name="void clear()" map="I"/>
  <method class="sz.csi.textcomponents.ListBox" name="void setElements(java.util.Vector)" map="A"/>
  <method class="sz.csi.textcomponents.ListBox" name="void addElement(sz.csi.textcomponents.ListItem)" map="A"/>
  <method class="sz.csi.textcomponents.ListBox" name="void addElements(java.util.Vector)" map="B"/>
  <method class="sz.csi.textcomponents.ListBox" name="void draw()" map="C"/>
  <class name="sz.csi.textcomponents.MenuItem" map="D"/>
  <method class="sz.csi.textcomponents.MenuItem" name="java.lang.String getMenuDescription()" map="A"/>
  <method class="sz.csi.textcomponents.MenuItem" name="char getMenuChar()" map="D"/>
  <method class="sz.csi.textcomponents.MenuItem" name="int getMenuColor()" map="E"/>
  <class name="sz.csi.textcomponents.TextBox" map="E"/>
  <field class="sz.csi.textcomponents.TextBox" name="lines" map="M"/>
  <field class="sz.csi.textcomponents.TextBox" name="title" map="N"/>
  <method class="sz.csi.textcomponents.TextBox" name="void clear()" map="J"/>
  <method class="sz.csi.textcomponents.TextBox" name="void setBorder(boolean)" map="A"/>
  <method class="sz.csi.textcomponents.TextBox" name="void setHeight(int)" map="A"/>
  <method class="sz.csi.textcomponents.TextBox" name="void setTitle(java.lang.String)" map="A"/>
  <method class="sz.csi.textcomponents.TextBox" name="void setText(java.lang.String)" map="B"/>
  <method class="sz.csi.textcomponents.TextBox" name="void draw()" map="C"/>
  <class name="sz.csi.textcomponents.ListItem" map="F"/>
  <method class="sz.csi.textcomponents.ListItem" name="java.lang.String getRow()" map="A"/>
  <method class="sz.csi.textcomponents.ListItem" name="char getIndex()" map="B"/>
  <method class="sz.csi.textcomponents.ListItem" name="int getIndexColor()" map="C"/>
  <class name="sz.csi.textcomponents.TextInformBox" map="G"/>
  <field class="sz.csi.textcomponents.TextInformBox" name="curLine" map="O"/>
  <field class="sz.csi.textcomponents.TextInformBox" name="lines" map="P"/>
  <field class="sz.csi.textcomponents.TextInformBox" name="cury" map="Q"/>
  <field class="sz.csi.textcomponents.TextInformBox" name="curx" map="R"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void clear()" map="K"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void setHeight(int)" map="A"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void addText(java.lang.String)" map="C"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void morePrompt()" map="L"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void setText(java.lang.String)" map="D"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void draw()" map="C"/>
  <class name="sz.csi.textcomponents.BasicListItem" map="H"/>
  <field class="sz.csi.textcomponents.BasicListItem" name="index" map="A"/>
  <field class="sz.csi.textcomponents.BasicListItem" name="indexColor" map="B"/>
  <field class="sz.csi.textcomponents.BasicListItem" name="rowData" map="C"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="java.lang.String getRow()" map="A"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="void setIndex(char)" map="A"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="char getIndex()" map="B"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="int getIndexColor()" map="C"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="void setIndexColor(int)" map="A"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="void setRow(java.lang.String)" map="A"/>
  <class name="sz.csi.ConsoleSystemInterface" map="A"/>
  <field class="sz.csi.ConsoleSystemInterface" name="GREEN" map="A"/>
  <field class="sz.csi.ConsoleSystemInterface" name="TEAL" map="B"/>
  <field class="sz.csi.ConsoleSystemInterface" name="LEMON" map="C"/>
  <field class="sz.csi.ConsoleSystemInterface" name="WHITE" map="D"/>
  <field class="sz.csi.ConsoleSystemInterface" name="MAGENTA" map="E"/>
  <field class="sz.csi.ConsoleSystemInterface" name="BROWN" map="F"/>
  <field class="sz.csi.ConsoleSystemInterface" name="LIGHT_GRAY" map="G"/>
  <field class="sz.csi.ConsoleSystemInterface" name="DARK_BLUE" map="H"/>
  <field class="sz.csi.ConsoleSystemInterface" name="BLUE" map="I"/>
  <field class="sz.csi.ConsoleSystemInterface" name="YELLOW" map="J"/>
  <field class="sz.csi.ConsoleSystemInterface" name="PURPLE" map="K"/>
  <field class="sz.csi.ConsoleSystemInterface" name="GRAY" map="L"/>
  <field class="sz.csi.ConsoleSystemInterface" name="DARK_RED" map="M"/>
  <field class="sz.csi.ConsoleSystemInterface" name="RED" map="N"/>
  <field class="sz.csi.ConsoleSystemInterface" name="CYAN" map="O"/>
  <field class="sz.csi.ConsoleSystemInterface" name="BLACK" map="P"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void safeprint(int, int, char, int)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void cls()" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void print(int, int, java.lang.String)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void setAutoRefresh(boolean)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void refresh()" map="B"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void restore()" map="C"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void refresh(java.lang.Thread)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="boolean isInsideBounds(sz.util.Position)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="java.lang.String input(int)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="int peekColor(int, int)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void flash(int)" map="B"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void waitKey(int)" map="C"/>
  <method class="sz.csi.ConsoleSystemInterface" name="sz.csi.CharKey inkey()" map="D"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void locateCaret(int, int)" map="B"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void saveBuffer()" map="E"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void print(int, int, char, int)" map="B"/>
  <method class="sz.csi.ConsoleSystemInterface" name="java.lang.String input()" map="F"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void print(int, int, java.lang.String, int)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="char peekChar(int, int)" map="C"/>
  <class name="sz.csi.CharKey" map="B"/>
  <field class="sz.csi.CharKey" name="COMILLAS" map="A"/>
  <field class="sz.csi.CharKey" name="ESC" map="B"/>
  <field class="sz.csi.CharKey" name="N9" map="C"/>
  <field class="sz.csi.CharKey" name="N8" map="D"/>
  <field class="sz.csi.CharKey" name="N7" map="E"/>
  <field class="sz.csi.CharKey" name="N6" map="F"/>
  <field class="sz.csi.CharKey" name="N5" map="G"/>
  <field class="sz.csi.CharKey" name="N4" map="H"/>
  <field class="sz.csi.CharKey" name="N3" map="I"/>
  <field class="sz.csi.CharKey" name="APOSTROPHE" map="J"/>
  <field class="sz.csi.CharKey" name="N2" map="K"/>
  <field class="sz.csi.CharKey" name="N1" map="L"/>
  <field class="sz.csi.CharKey" name="LCTRL" map="M"/>
  <field class="sz.csi.CharKey" name="N0" map="N"/>
  <field class="sz.csi.CharKey" name="UNDERLINE" map="O"/>
  <field class="sz.csi.CharKey" name="LALT" map="P"/>
  <field class="sz.csi.CharKey" name="OPENCURLYBRACETS" map="Q"/>
  <field class="sz.csi.CharKey" name="SPACE" map="R"/>
  <field class="sz.csi.CharKey" name="COMMA" map="S"/>
  <field class="sz.csi.CharKey" name="BACKSPACE" map="T"/>
  <field class="sz.csi.CharKey" name="UARROW" map="U"/>
  <field class="sz.csi.CharKey" name="RALT" map="V"/>
  <field class="sz.csi.CharKey" name="EXPONENCIATION" map="W"/>
  <field class="sz.csi.CharKey" name="F9" map="X"/>
  <field class="sz.csi.CharKey" name="code" map="Y"/>
  <field class="sz.csi.CharKey" name="F8" map="Z"/>
  <field class="sz.csi.CharKey" name="ARROBE" map="_"/>
  <field class="sz.csi.CharKey" name="PERCENTAGE" map="a"/>
  <field class="sz.csi.CharKey" name="F7" map="b"/>
  <field class="sz.csi.CharKey" name="F6" map="c"/>
  <field class="sz.csi.CharKey" name="z" map="d"/>
  <field class="sz.csi.CharKey" name="F5" map="e"/>
  <field class="sz.csi.CharKey" name="y" map="f"/>
  <field class="sz.csi.CharKey" name="F4" map="g"/>
  <field class="sz.csi.CharKey" name="x" map="h"/>
  <field class="sz.csi.CharKey" name="F3" map="i"/>
  <field class="sz.csi.CharKey" name="w" map="j"/>
  <field class="sz.csi.CharKey" name="F2" map="k"/>
  <field class="sz.csi.CharKey" name="v" map="l"/>
  <field class="sz.csi.CharKey" name="F1" map="m"/>
  <field class="sz.csi.CharKey" name="u" map="n"/>
  <field class="sz.csi.CharKey" name="t" map="o"/>
  <field class="sz.csi.CharKey" name="s" map="p"/>
  <field class="sz.csi.CharKey" name="r" map="q"/>
  <field class="sz.csi.CharKey" name="CTRL" map="r"/>
  <field class="sz.csi.CharKey" name="q" map="s"/>
  <field class="sz.csi.CharKey" name="p" map="t"/>
  <field class="sz.csi.CharKey" name="o" map="u"/>
  <field class="sz.csi.CharKey" name="n" map="v"/>
  <field class="sz.csi.CharKey" name="m" map="w"/>
  <field class="sz.csi.CharKey" name="l" map="x"/>
  <field class="sz.csi.CharKey" name="LESSTHAN" map="y"/>
  <field class="sz.csi.CharKey" name="k" map="z"/>
  <field class="sz.csi.CharKey" name="MONEY" map="&#x00a2;"/>
  <field class="sz.csi.CharKey" name="j" map="&#x00a3;"/>
  <field class="sz.csi.CharKey" name="i" map="&#x00a4;"/>
  <field class="sz.csi.CharKey" name="h" map="&#x00a5;"/>
  <field class="sz.csi.CharKey" name="SLASH" map="&#x00aa;"/>
  <field class="sz.csi.CharKey" name="g" map="&#x00b5;"/>
  <field class="sz.csi.CharKey" name="f" map="&#x00ba;"/>
  <field class="sz.csi.CharKey" name="TAB" map="&#x00c0;"/>
  <field class="sz.csi.CharKey" name="e" map="&#x00c1;"/>
  <field class="sz.csi.CharKey" name="d" map="&#x00c2;"/>
  <field class="sz.csi.CharKey" name="PLUS" map="&#x00c3;"/>
  <field class="sz.csi.CharKey" name="c" map="&#x00c4;"/>
  <field class="sz.csi.CharKey" name="b" map="&#x00c5;"/>
  <field class="sz.csi.CharKey" name="QUESTION" map="&#x00c6;"/>
  <field class="sz.csi.CharKey" name="a" map="&#x00c7;"/>
  <field class="sz.csi.CharKey" name="OPENSHARPBRACETS" map="&#x00c8;"/>
  <field class="sz.csi.CharKey" name="EXCLAMATION" map="&#x00c9;"/>
  <field class="sz.csi.CharKey" name="OPENPARENTHESIS" map="&#x00ca;"/>
  <field class="sz.csi.CharKey" name="CLOSECURLYBRACETS" map="&#x00cb;"/>
  <field class="sz.csi.CharKey" name="DELETE" map="&#x00cc;"/>
  <field class="sz.csi.CharKey" name="Z" map="&#x00cd;"/>
  <field class="sz.csi.CharKey" name="Y" map="&#x00ce;"/>
  <field class="sz.csi.CharKey" name="BACKSLASH" map="&#x00cf;"/>
  <field class="sz.csi.CharKey" name="NONE" map="&#x00d0;"/>
  <field class="sz.csi.CharKey" name="X" map="&#x00d1;"/>
  <field class="sz.csi.CharKey" name="W" map="&#x00d2;"/>
  <field class="sz.csi.CharKey" name="HOME" map="&#x00d3;"/>
  <field class="sz.csi.CharKey" name="V" map="&#x00d4;"/>
  <field class="sz.csi.CharKey" name="U" map="&#x00d5;"/>
  <field class="sz.csi.CharKey" name="T" map="&#x00d6;"/>
  <field class="sz.csi.CharKey" name="S" map="&#x00d8;"/>
  <field class="sz.csi.CharKey" name="R" map="&#x00d9;"/>
  <field class="sz.csi.CharKey" name="Q" map="&#x00da;"/>
  <field class="sz.csi.CharKey" name="P" map="&#x00db;"/>
  <field class="sz.csi.CharKey" name="O" map="&#x00dc;"/>
  <field class="sz.csi.CharKey" name="F12" map="&#x00dd;"/>
  <field class="sz.csi.CharKey" name="N" map="&#x00de;"/>
  <field class="sz.csi.CharKey" name="CURLYMINUS" map="&#x00df;"/>
  <field class="sz.csi.CharKey" name="MORETHAN" map="&#x00e0;"/>
  <field class="sz.csi.CharKey" name="F11" map="&#x00e1;"/>
  <field class="sz.csi.CharKey" name="ASTERISK" map="&#x00e2;"/>
  <field class="sz.csi.CharKey" name="M" map="&#x00e3;"/>
  <field class="sz.csi.CharKey" name="F10" map="&#x00e4;"/>
  <field class="sz.csi.CharKey" name="L" map="&#x00e5;"/>
  <field class="sz.csi.CharKey" name="DOT" map="&#x00e6;"/>
  <field class="sz.csi.CharKey" name="AMPERSAND" map="&#x00e7;"/>
  <field class="sz.csi.CharKey" name="K" map="&#x00e8;"/>
  <field class="sz.csi.CharKey" name="J" map="&#x00e9;"/>
  <field class="sz.csi.CharKey" name="CLOSEPARENTHESIS" map="&#x00ea;"/>
  <field class="sz.csi.CharKey" name="I" map="&#x00eb;"/>
  <field class="sz.csi.CharKey" name="H" map="&#x00ec;"/>
  <field class="sz.csi.CharKey" name="G" map="&#x00ed;"/>
  <field class="sz.csi.CharKey" name="PAGEDOWN" map="&#x00ee;"/>
  <field class="sz.csi.CharKey" name="F" map="&#x00ef;"/>
  <field class="sz.csi.CharKey" name="E" map="&#x00f0;"/>
  <field class="sz.csi.CharKey" name="D" map="&#x00f1;"/>
  <field class="sz.csi.CharKey" name="SEMICOLON" map="&#x00f2;"/>
  <field class="sz.csi.CharKey" name="C" map="&#x00f3;"/>
  <field class="sz.csi.CharKey" name="B" map="&#x00f4;"/>
  <field class="sz.csi.CharKey" name="A" map="&#x00f5;"/>
  <field class="sz.csi.CharKey" name="PAGEUP" map="&#x00f6;"/>
  <field class="sz.csi.CharKey" name="MINUS" map="&#x00f8;"/>
  <field class="sz.csi.CharKey" name="DARROW" map="&#x00f9;"/>
  <field class="sz.csi.CharKey" name="OR" map="&#x00fa;"/>
  <field class="sz.csi.CharKey" name="ENTER" map="&#x00fb;"/>
  <field class="sz.csi.CharKey" name="RARROW" map="&#x00fc;"/>
  <field class="sz.csi.CharKey" name="END" map="&#x00fd;"/>
  <field class="sz.csi.CharKey" name="CLOSESHARPBRACETS" map="&#x00fe;"/>
  <field class="sz.csi.CharKey" name="COLON" map="&#x00ff;"/>
  <field class="sz.csi.CharKey" name="mirrors" map="&#x0100;"/>
  <field class="sz.csi.CharKey" name="LARROW" map="&#x0101;"/>
  <field class="sz.csi.CharKey" name="BACKAPOSTROPHE" map="&#x0102;"/>
  <field class="sz.csi.CharKey" name="INSERT" map="&#x0103;"/>
  <field class="sz.csi.CharKey" name="RSHIFT" map="&#x0104;"/>
  <field class="sz.csi.CharKey" name="RCTRL" map="&#x0105;"/>
  <field class="sz.csi.CharKey" name="LSHIFT" map="&#x0106;"/>
  <field class="sz.csi.CharKey" name="EQUALS" map="&#x0107;"/>
  <method class="sz.csi.CharKey" name="boolean isDownRightArrow()" map="A"/>
  <method class="sz.csi.CharKey" name="boolean isDownLeftArrow()" map="B"/>
  <method class="sz.csi.CharKey" name="boolean isMetaKey()" map="C"/>
  <method class="sz.csi.CharKey" name="boolean isDownArrow()" map="D"/>
  <method class="sz.csi.CharKey" name="boolean isAlphaNumeric()" map="E"/>
  <method class="sz.csi.CharKey" name="boolean isUpArrow()" map="F"/>
  <method class="sz.csi.CharKey" name="boolean isRightArrow()" map="G"/>
  <method class="sz.csi.CharKey" name="boolean isLeftArrow()" map="H"/>
  <method class="sz.csi.CharKey" name="java.lang.String toString()" map="toString"/>
  <method class="sz.csi.CharKey" name="boolean isUpRightArrow()" map="I"/>
  <method class="sz.csi.CharKey" name="boolean isUpLeftArrow()" map="J"/>
  <method class="sz.csi.CharKey" name="boolean isCenterArrow()" map="K"/>
  <method class="sz.csi.CharKey" name="boolean isArrow()" map="L"/>
  <class name="sz.csi.KornelExample" map="C"/>
  <method class="sz.csi.KornelExample" name="void main(java.lang.String[])" map="A"/>
  <package name="sz.wav" map="I"/>
  <class name="sz.wav.WavPlayer" map="A"/>
  <field class="sz.wav.WavPlayer" name="wavFile" map="A"/>
  <field class="sz.wav.WavPlayer" name="class$0" map="class$0"/>
  <method class="sz.wav.WavPlayer" name="void play(java.lang.String)" map="A"/>
  <method class="sz.wav.WavPlayer" name="void run()" map="run"/>
  <class name="sz.MP3Test" map="A"/>
  <field class="sz.MP3Test" name="class$0" map="class$0"/>
  <method class="sz.MP3Test" name="void playAudioStream(javax.sound.sampled.AudioInputStream)" map="A"/>
  <method class="sz.MP3Test" name="void main(java.lang.String[])" map="A"/>
  <method class="sz.MP3Test" name="void playAudioFile(java.lang.String)" map="A"/>
  <package name="crl.level" map="A"/>
  <class name="crl.level.SpawnMonster" map="A"/>
  <field class="crl.level.SpawnMonster" name="singleton" map="&#x00ba;"/>
  <method class="crl.level.SpawnMonster" name="void execute()" map="F"/>
  <method class="crl.level.SpawnMonster" name="java.lang.String getID()" map="D"/>
  <method class="crl.level.SpawnMonster" name="crl.level.SpawnMonster getAction()" map="i"/>
  <class name="crl.level.MapCellFactory" map="B"/>
  <field class="crl.level.MapCellFactory" name="definitions" map="A"/>
  <field class="crl.level.MapCellFactory" name="singleton" map="B"/>
  <method class="crl.level.MapCellFactory" name="void init(crl.level.Cell[])" map="A"/>
  <method class="crl.level.MapCellFactory" name="void addDefinition(crl.level.Cell)" map="A"/>
  <method class="crl.level.MapCellFactory" name="crl.level.MapCellFactory getMapCellFactory()" map="A"/>
  <method class="crl.level.MapCellFactory" name="crl.level.Cell getMapCell(java.lang.String)" map="A"/>
  <class name="crl.level.EmergeMonster" map="C"/>
  <field class="crl.level.EmergeMonster" name="singleton" map="Z"/>
  <method class="crl.level.EmergeMonster" name="crl.level.EmergeMonster getAction()" map="S"/>
  <method class="crl.level.EmergeMonster" name="void execute()" map="F"/>
  <method class="crl.level.EmergeMonster" name="java.lang.String getID()" map="D"/>
  <class name="crl.level.Cell" map="D"/>
  <field class="crl.level.Cell" name="keyCost" map="A"/>
  <field class="crl.level.Cell" name="isOpaque" map="B"/>
  <field class="crl.level.Cell" name="shortDescription" map="C"/>
  <field class="crl.level.Cell" name="isStair" map="D"/>
  <field class="crl.level.Cell" name="damageOnStep" map="E"/>
  <field class="crl.level.Cell" name="DOOR" map="F"/>
  <field class="crl.level.Cell" name="isWater" map="G"/>
  <field class="crl.level.Cell" name="appearance" map="H"/>
  <field class="crl.level.Cell" name="isSolid" map="I"/>
  <field class="crl.level.Cell" name="ID" map="J"/>
  <field class="crl.level.Cell" name="appearanceID" map="K"/>
  <field class="crl.level.Cell" name="description" map="L"/>
  <field class="crl.level.Cell" name="height" map="M"/>
  <field class="crl.level.Cell" name="heightMod" map="N"/>
  <method class="crl.level.Cell" name="boolean isSolid()" map="A"/>
  <method class="crl.level.Cell" name="java.lang.String getShortDescription()" map="B"/>
  <method class="crl.level.Cell" name="boolean isOpaque()" map="C"/>
  <method class="crl.level.Cell" name="boolean isWater()" map="D"/>
  <method class="crl.level.Cell" name="java.lang.String getID()" map="E"/>
  <method class="crl.level.Cell" name="int getHeightMod()" map="F"/>
  <method class="crl.level.Cell" name="boolean isStair()" map="G"/>
  <method class="crl.level.Cell" name="void setWater(boolean)" map="A"/>
  <method class="crl.level.Cell" name="void setIsStair(boolean)" map="B"/>
  <method class="crl.level.Cell" name="void setHeightMod(int)" map="A"/>
  <method class="crl.level.Cell" name="int getKeyCost()" map="H"/>
  <method class="crl.level.Cell" name="void setHeight(int)" map="B"/>
  <method class="crl.level.Cell" name="void setDamageOnStep(int)" map="C"/>
  <method class="crl.level.Cell" name="crl.ui.Appearance getAppearance()" map="I"/>
  <method class="crl.level.Cell" name="void setKeyCost(int)" map="D"/>
  <method class="crl.level.Cell" name="java.lang.String getDescription()" map="J"/>
  <method class="crl.level.Cell" name="int getDamageOnStep()" map="K"/>
  <method class="crl.level.Cell" name="int getHeight()" map="L"/>
  <class name="crl.level.Respawner" map="E"/>
  <field class="crl.level.Respawner" name="prob" map="K"/>
  <field class="crl.level.Respawner" name="freq" map="L"/>
  <method class="crl.level.Respawner" name="java.lang.String getDescription()" map="I"/>
  <method class="crl.level.Respawner" name="int getFreq()" map="K"/>
  <method class="crl.level.Respawner" name="int getProb()" map="L"/>
  <class name="crl.level.EmergerAI" map="F"/>
  <field class="crl.level.EmergerAI" name="counter" map="N"/>
  <method class="crl.level.EmergerAI" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.level.EmergerAI" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.level.EmergerAI" name="java.lang.String getID()" map="B"/>
  <class name="crl.level.PreemergeEffects" map="G"/>
  <field class="crl.level.PreemergeEffects" name="singleton" map="_"/>
  <method class="crl.level.PreemergeEffects" name="void execute()" map="F"/>
  <method class="crl.level.PreemergeEffects" name="java.lang.String getID()" map="D"/>
  <method class="crl.level.PreemergeEffects" name="crl.level.PreemergeEffects getAction()" map="T"/>
  <class name="crl.level.Emerger" map="H"/>
  <field class="crl.level.Emerger" name="point" map="M"/>
  <field class="crl.level.Emerger" name="counter" map="N"/>
  <field class="crl.level.Emerger" name="monster" map="O"/>
  <method class="crl.level.Emerger" name="int getCounter()" map="M"/>
  <method class="crl.level.Emerger" name="java.lang.String getDescription()" map="I"/>
  <method class="crl.level.Emerger" name="sz.util.Position getPoint()" map="N"/>
  <method class="crl.level.Emerger" name="crl.monster.Monster getMonster()" map="O"/>
  <class name="crl.level.SFX" map="I"/>
  <field class="crl.level.SFX" name="effect" map="a"/>
  <field class="crl.level.SFX" name="THUNDER" map="b"/>
  <field class="crl.level.SFX" name="singleton" map="c"/>
  <method class="crl.level.SFX" name="void setEffect(int)" map="D"/>
  <method class="crl.level.SFX" name="void execute()" map="F"/>
  <method class="crl.level.SFX" name="crl.level.SFX getThunder()" map="U"/>
  <method class="crl.level.SFX" name="java.lang.String getID()" map="D"/>
  <class name="crl.level.RespawnAI" map="J"/>
  <field class="crl.level.RespawnAI" name="counter" map="A"/>
  <method class="crl.level.RespawnAI" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.level.RespawnAI" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.level.RespawnAI" name="java.lang.String getID()" map="B"/>
  <class name="crl.level.Level" map="K"/>
  <field class="crl.level.Level" name="haunted" map="A"/>
  <field class="crl.level.Level" name="exitPositions" map="B"/>
  <field class="crl.level.Level" name="unleashers" map="C"/>
  <field class="crl.level.Level" name="levelNumber" map="D"/>
  <field class="crl.level.Level" name="musicKeyNoon" map="E"/>
  <field class="crl.level.Level" name="remembered" map="F"/>
  <field class="crl.level.Level" name="nightRespawner" map="G"/>
  <field class="crl.level.Level" name="mapLocationKey" map="H"/>
  <field class="crl.level.Level" name="features" map="I"/>
  <field class="crl.level.Level" name="description" map="J"/>
  <field class="crl.level.Level" name="inhabitants" map="K"/>
  <field class="crl.level.Level" name="darkness" map="L"/>
  <field class="crl.level.Level" name="isCandled" map="M"/>
  <field class="crl.level.Level" name="isHostageSafe" map="N"/>
  <field class="crl.level.Level" name="exits" map="O"/>
  <field class="crl.level.Level" name="items" map="P"/>
  <field class="crl.level.Level" name="gemCost" map="Q"/>
  <field class="crl.level.Level" name="ID" map="R"/>
  <field class="crl.level.Level" name="visible" map="S"/>
  <field class="crl.level.Level" name="smartFeatures" map="T"/>
  <field class="crl.level.Level" name="timeStopBlocked" map="U"/>
  <field class="crl.level.Level" name="dispatcher" map="V"/>
  <field class="crl.level.Level" name="map" map="W"/>
  <field class="crl.level.Level" name="monsters" map="X"/>
  <field class="crl.level.Level" name="frosts" map="Y"/>
  <field class="crl.level.Level" name="spawnItemIDs" map="Z"/>
  <field class="crl.level.Level" name="boss" map="_"/>
  <field class="crl.level.Level" name="isDay" map="a"/>
  <field class="crl.level.Level" name="dwellerIDs" map="b"/>
  <field class="crl.level.Level" name="tempPositionFeature" map="c"/>
  <field class="crl.level.Level" name="tempActors" map="d"/>
  <field class="crl.level.Level" name="messagesneffects" map="e"/>
  <field class="crl.level.Level" name="musicKeyMorning" map="f"/>
  <field class="crl.level.Level" name="hashCounters" map="g"/>
  <field class="crl.level.Level" name="player" map="h"/>
  <field class="crl.level.Level" name="bloods" map="i"/>
  <field class="crl.level.Level" name="respawner" map="j"/>
  <field class="crl.level.Level" name="hashFlags" map="k"/>
  <method class="crl.level.Level" name="int getDarkness()" map="A"/>
  <method class="crl.level.Level" name="void disableTriggers()" map="B"/>
  <method class="crl.level.Level" name="void removeBoss()" map="C"/>
  <method class="crl.level.Level" name="void setDarkness(int)" map="A"/>
  <method class="crl.level.Level" name="void addMessage(java.lang.String, sz.util.Position)" map="A"/>
  <method class="crl.level.Level" name="void spawnTreasure()" map="D"/>
  <method class="crl.level.Level" name="sz.util.SZQueue getMessagesAndEffects()" map="E"/>
  <method class="crl.level.Level" name="void destroyCandles()" map="F"/>
  <method class="crl.level.Level" name="crl.feature.Feature getFeatureAt(int, int, int)" map="A"/>
  <method class="crl.level.Level" name="crl.level.Cell getMapCell(int, int, int)" map="B"/>
  <method class="crl.level.Level" name="void setDwellerIDs(java.lang.String[])" map="A"/>
  <method class="crl.level.Level" name="void reduceFrosts()" map="G"/>
  <method class="crl.level.Level" name="boolean isExit(sz.util.Position)" map="A"/>
  <method class="crl.level.Level" name="crl.monster.Monster getMonsterAt(int, int, int)" map="C"/>
  <method class="crl.level.Level" name="crl.monster.Monster getBoss()" map="H"/>
  <method class="crl.level.Level" name="boolean isValidCoordinate(int, int)" map="C"/>
  <method class="crl.level.Level" name="void addActor(crl.actor.Actor)" map="A"/>
  <method class="crl.level.Level" name="void setDescription(java.lang.String)" map="A"/>
  <method class="crl.level.Level" name="int getDepth()" map="I"/>
  <method class="crl.level.Level" name="int getHeight()" map="J"/>
  <method class="crl.level.Level" name="void setSpawnItemIDs(java.lang.String[])" map="B"/>
  <method class="crl.level.Level" name="crl.feature.SmartFeature getSmartFeature(sz.util.Position)" map="B"/>
  <method class="crl.level.Level" name="crl.feature.Feature getFeatureAt(sz.util.Position)" map="C"/>
  <method class="crl.level.Level" name="void setMapLocationKey(java.lang.String)" map="B"/>
  <method class="crl.level.Level" name="boolean isVisible(int, int)" map="D"/>
  <method class="crl.level.Level" name="boolean isValidCoordinate(int, int, int)" map="D"/>
  <method class="crl.level.Level" name="void setBoss(crl.monster.Monster)" map="A"/>
  <method class="crl.level.Level" name="void anihilate()" map="K"/>
  <method class="crl.level.Level" name="void transformCell(sz.util.Position, java.lang.String)" map="A"/>
  <method class="crl.level.Level" name="void removeSmartFeature(crl.feature.SmartFeature)" map="A"/>
  <method class="crl.level.Level" name="crl.monster.VMonster getMonsters()" map="L"/>
  <method class="crl.level.Level" name="void darken(int, int)" map="E"/>
  <method class="crl.level.Level" name="int getFrostAt(sz.util.Position)" map="D"/>
  <method class="crl.level.Level" name="java.lang.String getMusicKeyNoon()" map="M"/>
  <method class="crl.level.Level" name="void addExit(sz.util.Position, java.lang.String)" map="B"/>
  <method class="crl.level.Level" name="void setTimeStopBlocked(boolean)" map="A"/>
  <method class="crl.level.Level" name="crl.monster.Monster getMonsterAt(sz.util.Position)" map="E"/>
  <method class="crl.level.Level" name="crl.level.Cell[][][] getCells()" map="N"/>
  <method class="crl.level.Level" name="void setDispatcher(crl.level.Dispatcher)" map="A"/>
  <method class="crl.level.Level" name="void removeItemFrom(crl.item.Item, sz.util.Position)" map="A"/>
  <method class="crl.level.Level" name="crl.levelgen.MonsterSpawnInfo[] getSpawnInfo()" map="O"/>
  <method class="crl.level.Level" name="void addBlood(sz.util.Position, int)" map="A"/>
  <method class="crl.level.Level" name="crl.level.Dispatcher getDispatcher()" map="P"/>
  <method class="crl.level.Level" name="void setHaunted(boolean)" map="B"/>
  <method class="crl.level.Level" name="void populate()" map="Q"/>
  <method class="crl.level.Level" name="void updateLevelStatus()" map="R"/>
  <method class="crl.level.Level" name="int getDepthFromPlayer(int, int)" map="F"/>
  <method class="crl.level.Level" name="boolean isHaunted()" map="S"/>
  <method class="crl.level.Level" name="crl.level.Cell[][] getMemoryCellsAround(int, int, int, int, int)" map="A"/>
  <method class="crl.level.Level" name="crl.actor.Actor getActorAt(sz.util.Position)" map="F"/>
  <method class="crl.level.Level" name="void setMusicKeyNoon(java.lang.String)" map="C"/>
  <method class="crl.level.Level" name="void setIsCandled(boolean)" map="C"/>
  <method class="crl.level.Level" name="void setUnleashers(crl.cuts.Unleasher[])" map="A"/>
  <method class="crl.level.Level" name="java.util.Vector getItemsAt(sz.util.Position)" map="G"/>
  <method class="crl.level.Level" name="void setLevelNumber(int)" map="B"/>
  <method class="crl.level.Level" name="void setNightRespawner(crl.level.Respawner)" map="A"/>
  <method class="crl.level.Level" name="void validate(sz.util.Position)" map="H"/>
  <method class="crl.level.Level" name="int getWidth()" map="T"/>
  <method class="crl.level.Level" name="void savePop()" map="U"/>
  <method class="crl.level.Level" name="void setHostageSafe(boolean)" map="D"/>
  <method class="crl.level.Level" name="int getLevelNumber()" map="V"/>
  <method class="crl.level.Level" name="sz.util.Position getDeepPosition(sz.util.Position)" map="I"/>
  <method class="crl.level.Level" name="boolean remembers(int, int, int)" map="E"/>
  <method class="crl.level.Level" name="void setCells(crl.level.Cell[][][])" map="A"/>
  <method class="crl.level.Level" name="boolean isValidCoordinate(sz.util.Position)" map="J"/>
  <method class="crl.level.Level" name="void respawn()" map="W"/>
  <method class="crl.level.Level" name="void destroyFeature(crl.feature.Feature)" map="A"/>
  <method class="crl.level.Level" name="void addMessage(java.lang.String)" map="D"/>
  <method class="crl.level.Level" name="void stopTime(int)" map="C"/>
  <method class="crl.level.Level" name="java.lang.String getMapLocationKey()" map="X"/>
  <method class="crl.level.Level" name="java.lang.String getDescription()" map="Y"/>
  <method class="crl.level.Level" name="void removeActor(crl.actor.Actor)" map="B"/>
  <method class="crl.level.Level" name="void addSmartFeature(java.lang.String, sz.util.Position)" map="B"/>
  <method class="crl.level.Level" name="java.lang.String getExitOn(sz.util.Position)" map="K"/>
  <method class="crl.level.Level" name="void addMonster(crl.monster.Monster)" map="B"/>
  <method class="crl.level.Level" name="void removeRespawner()" map="Z"/>
  <method class="crl.level.Level" name="boolean isDay()" map="_"/>
  <method class="crl.level.Level" name="void setID(java.lang.String)" map="E"/>
  <method class="crl.level.Level" name="void setFlag(java.lang.String, boolean)" map="A"/>
  <method class="crl.level.Level" name="void setMusicKeyMorning(java.lang.String)" map="F"/>
  <method class="crl.level.Level" name="void addFeature(java.lang.String, sz.util.Position)" map="C"/>
  <method class="crl.level.Level" name="java.lang.String[] getDwellerIDs()" map="a"/>
  <method class="crl.level.Level" name="sz.util.Position getExitFor(java.lang.String)" map="G"/>
  <method class="crl.level.Level" name="void addCounter(java.lang.String, int)" map="A"/>
  <method class="crl.level.Level" name="int getGemCost()" map="b"/>
  <method class="crl.level.Level" name="crl.level.Cell getMapCell(sz.util.Position)" map="L"/>
  <method class="crl.level.Level" name="void anihilateMonsters()" map="c"/>
  <method class="crl.level.Level" name="boolean hasNoonMusic()" map="d"/>
  <method class="crl.level.Level" name="void setInhabitants(crl.levelgen.MonsterSpawnInfo[])" map="A"/>
  <method class="crl.level.Level" name="crl.player.Player getPlayer()" map="e"/>
  <method class="crl.level.Level" name="java.lang.String getID()" map="f"/>
  <method class="crl.level.Level" name="crl.level.Cell[][] getVisibleCellsAround(int, int, int, int, int)" map="B"/>
  <method class="crl.level.Level" name="boolean isTimeStopBlocked()" map="g"/>
  <method class="crl.level.Level" name="void removeMonster(crl.monster.Monster)" map="C"/>
  <method class="crl.level.Level" name="boolean isSolid(sz.util.Position)" map="M"/>
  <method class="crl.level.Level" name="void addFeature(crl.feature.Feature)" map="B"/>
  <method class="crl.level.Level" name="sz.util.Counter getCounter(java.lang.String)" map="H"/>
  <method class="crl.level.Level" name="void loadPop()" map="h"/>
  <method class="crl.level.Level" name="void setPlayer(crl.player.Player)" map="A"/>
  <method class="crl.level.Level" name="void signal(sz.util.Position, int, java.lang.String)" map="A"/>
  <method class="crl.level.Level" name="java.lang.String getMusicKeyMorning()" map="i"/>
  <method class="crl.level.Level" name="crl.monster.Monster getMonsterByID(java.lang.String)" map="I"/>
  <method class="crl.level.Level" name="java.lang.String getBloodAt(sz.util.Position)" map="N"/>
  <method class="crl.level.Level" name="void removeCounter(java.lang.String)" map="J"/>
  <method class="crl.level.Level" name="void setRespawner(crl.level.Respawner)" map="B"/>
  <method class="crl.level.Level" name="boolean remembers(int, int)" map="G"/>
  <method class="crl.level.Level" name="boolean isWalkable(sz.util.Position)" map="O"/>
  <method class="crl.level.Level" name="void checkUnleashers(crl.game.Game)" map="A"/>
  <method class="crl.level.Level" name="boolean isHostageSafe()" map="j"/>
  <method class="crl.level.Level" name="void addFrost(sz.util.Position, int)" map="B"/>
  <method class="crl.level.Level" name="void setSeen(int, int)" map="B"/>
  <method class="crl.level.Level" name="void addSmartFeature(crl.feature.SmartFeature)" map="B"/>
  <method class="crl.level.Level" name="void addMessage(crl.actor.Message)" map="A"/>
  <method class="crl.level.Level" name="void setGemCost(int)" map="D"/>
  <method class="crl.level.Level" name="void setIsDay(boolean)" map="E"/>
  <method class="crl.level.Level" name="void removeExit(java.lang.String)" map="K"/>
  <method class="crl.level.Level" name="void darken()" map="k"/>
  <method class="crl.level.Level" name="boolean getFlag(java.lang.String)" map="L"/>
  <method class="crl.level.Level" name="boolean isCandled()" map="l"/>
  <method class="crl.level.Level" name="void addItem(sz.util.Position, crl.item.Item)" map="A"/>
  <method class="crl.level.Level" name="void createMonster(java.lang.String, sz.util.Position)" map="D"/>
  <method class="crl.level.Level" name="java.lang.String[] getSpawnItemsIDs()" map="m"/>
  <method class="crl.level.Level" name="boolean blockLOS(int, int)" map="A"/>
  <method class="crl.level.Level" name="void addEffect(crl.ui.effects.Effect)" map="A"/>
  <class name="crl.level.Dispatcher" map="L"/>
  <field class="crl.level.Dispatcher" name="countdown" map="A"/>
  <field class="crl.level.Dispatcher" name="fixed" map="B"/>
  <field class="crl.level.Dispatcher" name="actors" map="C"/>
  <field class="crl.level.Dispatcher" name="ixx" map="D"/>
  <method class="crl.level.Dispatcher" name="void addActor(crl.actor.Actor)" map="A"/>
  <method class="crl.level.Dispatcher" name="void setFixed(crl.actor.Actor, int)" map="A"/>
  <method class="crl.level.Dispatcher" name="void addActor(crl.actor.Actor, boolean)" map="A"/>
  <method class="crl.level.Dispatcher" name="void returnActor(crl.actor.Actor)" map="B"/>
  <method class="crl.level.Dispatcher" name="void removeActor(crl.actor.Actor)" map="C"/>
  <method class="crl.level.Dispatcher" name="boolean contains(crl.actor.Actor)" map="D"/>
  <method class="crl.level.Dispatcher" name="java.util.Vector getActors()" map="A"/>
  <method class="crl.level.Dispatcher" name="void addActor(crl.actor.Actor, boolean, java.lang.Object)" map="A"/>
  <method class="crl.level.Dispatcher" name="crl.actor.Actor getNextActor()" map="B"/>
  <method class="crl.level.Dispatcher" name="void removeAll()" map="C"/>
  <package name="crl.levelgen" map="B"/>
  <package name="crl.levelgen.patterns" map="A"/>
  <class name="crl.levelgen.patterns.Crashing" map="A"/>
  <method class="crl.levelgen.patterns.Crashing" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.Crashing" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.Crashing" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.Crashing" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.ChimeraLair" map="B"/>
  <method class="crl.levelgen.patterns.ChimeraLair" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.ChimeraLair" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.ChimeraLair" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.ChimeraLair" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.Space" map="C"/>
  <method class="crl.levelgen.patterns.Space" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.Space" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.Space" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.Space" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.Launching" map="D"/>
  <method class="crl.levelgen.patterns.Launching" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.Launching" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.Launching" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.Launching" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.EodonPad" map="E"/>
  <method class="crl.levelgen.patterns.EodonPad" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.EodonPad" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.EodonPad" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.EodonPad" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.AvatarCell" map="F"/>
  <method class="crl.levelgen.patterns.AvatarCell" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.AvatarCell" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.AvatarCell" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.AvatarCell" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.StaticPattern" map="G"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="inhabitantsMap" map="A"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="unleashers" map="B"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="cellMap" map="C"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="inhabitants" map="D"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="charMap" map="E"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="spawnInfo" map="F"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="boolean isHostageSafe()" map="A"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="void setup(crl.levelgen.StaticGenerator)" map="A"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="boolean isHaunted()" map="C"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="crl.cuts.Unleasher[] getUnleashers()" map="D"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.util.Hashtable getCharMap()" map="E"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String[] getDwellers()" map="F"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getBoss()" map="G"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.util.Hashtable getInhabitantsMap()" map="H"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="crl.levelgen.MonsterSpawnInfo[] getSpawnInfo()" map="J"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String[][] getInhabitants()" map="L"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String[][] getCellMap()" map="N"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="sz.util.Position getBossPosition()" map="O"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String[] getItems()" map="P"/>
  <package name="crl.levelgen.cave" map="B"/>
  <class name="crl.levelgen.cave.WispInt" map="A"/>
  <field class="crl.levelgen.cave.WispInt" name="level" map="A"/>
  <field class="crl.levelgen.cave.WispInt" name="strength" map="B"/>
  <field class="crl.levelgen.cave.WispInt" name="toleranceCounter" map="C"/>
  <field class="crl.levelgen.cave.WispInt" name="stupidCounter" map="D"/>
  <field class="crl.levelgen.cave.WispInt" name="friend" map="E"/>
  <field class="crl.levelgen.cave.WispInt" name="stupidTurns" map="F"/>
  <field class="crl.levelgen.cave.WispInt" name="position" map="G"/>
  <field class="crl.levelgen.cave.WispInt" name="xfriend" map="H"/>
  <field class="crl.levelgen.cave.WispInt" name="tolerance" map="I"/>
  <field class="crl.levelgen.cave.WispInt" name="yfriend" map="J"/>
  <method class="crl.levelgen.cave.WispInt" name="void rip(int, int)" map="A"/>
  <method class="crl.levelgen.cave.WispInt" name="void setLevel(int[][])" map="A"/>
  <method class="crl.levelgen.cave.WispInt" name="void radarFriend()" map="A"/>
  <method class="crl.levelgen.cave.WispInt" name="sz.util.Position getPosition()" map="B"/>
  <method class="crl.levelgen.cave.WispInt" name="void setFriend(crl.levelgen.cave.WispInt)" map="A"/>
  <method class="crl.levelgen.cave.WispInt" name="void blastAway()" map="C"/>
  <method class="crl.levelgen.cave.WispInt" name="void go()" map="D"/>
  <class name="crl.levelgen.cave.WispSim" map="B"/>
  <field class="crl.levelgen.cave.WispSim" name="lastWisp" map="A"/>
  <field class="crl.levelgen.cave.WispSim" name="wisp2" map="B"/>
  <field class="crl.levelgen.cave.WispSim" name="wisp1" map="C"/>
  <method class="crl.levelgen.cave.WispSim" name="void run(crl.level.Cell[][], crl.level.Cell)" map="A"/>
  <method class="crl.levelgen.cave.WispSim" name="void setWisps(crl.levelgen.cave.Wisp, crl.levelgen.cave.Wisp)" map="A"/>
  <class name="crl.levelgen.cave.WispSimInt" map="C"/>
  <field class="crl.levelgen.cave.WispSimInt" name="lastWisp" map="A"/>
  <field class="crl.levelgen.cave.WispSimInt" name="wisp2" map="B"/>
  <field class="crl.levelgen.cave.WispSimInt" name="wisp1" map="C"/>
  <method class="crl.levelgen.cave.WispSimInt" name="void run(int[][])" map="A"/>
  <method class="crl.levelgen.cave.WispSimInt" name="void setWisps(crl.levelgen.cave.WispInt, crl.levelgen.cave.WispInt)" map="A"/>
  <class name="crl.levelgen.cave.Wisp" map="D"/>
  <field class="crl.levelgen.cave.Wisp" name="level" map="A"/>
  <field class="crl.levelgen.cave.Wisp" name="noSolidCell" map="B"/>
  <field class="crl.levelgen.cave.Wisp" name="strength" map="C"/>
  <field class="crl.levelgen.cave.Wisp" name="toleranceCounter" map="D"/>
  <field class="crl.levelgen.cave.Wisp" name="stupidCounter" map="E"/>
  <field class="crl.levelgen.cave.Wisp" name="friend" map="F"/>
  <field class="crl.levelgen.cave.Wisp" name="stupidTurns" map="G"/>
  <field class="crl.levelgen.cave.Wisp" name="position" map="H"/>
  <field class="crl.levelgen.cave.Wisp" name="xfriend" map="I"/>
  <field class="crl.levelgen.cave.Wisp" name="tolerance" map="J"/>
  <field class="crl.levelgen.cave.Wisp" name="yfriend" map="K"/>
  <method class="crl.levelgen.cave.Wisp" name="void rip(int, int)" map="A"/>
  <method class="crl.levelgen.cave.Wisp" name="void radarFriend()" map="A"/>
  <method class="crl.levelgen.cave.Wisp" name="sz.util.Position getPosition()" map="B"/>
  <method class="crl.levelgen.cave.Wisp" name="void blastAway()" map="C"/>
  <method class="crl.levelgen.cave.Wisp" name="void setFriend(crl.levelgen.cave.Wisp)" map="A"/>
  <method class="crl.levelgen.cave.Wisp" name="void setLevel(crl.level.Cell[][], crl.level.Cell)" map="A"/>
  <method class="crl.levelgen.cave.Wisp" name="void go()" map="D"/>
  <class name="crl.levelgen.MonsterSpawnInfo" map="A"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="BORDER" map="A"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="WATER" map="B"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="frequency" map="C"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="monsterID" map="D"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="UNDERGROUND" map="E"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="spawnLocation" map="F"/>
  <method class="crl.levelgen.MonsterSpawnInfo" name="java.lang.String getMonsterID()" map="A"/>
  <method class="crl.levelgen.MonsterSpawnInfo" name="int getFrequency()" map="B"/>
  <method class="crl.levelgen.MonsterSpawnInfo" name="int getSpawnLocation()" map="C"/>
  <class name="crl.levelgen.LevelFeature" map="B"/>
  <field class="crl.levelgen.LevelFeature" name="descriptions" map="A"/>
  <field class="crl.levelgen.LevelFeature" name="size" map="B"/>
  <field class="crl.levelgen.LevelFeature" name="layouts" map="C"/>
  <method class="crl.levelgen.LevelFeature" name="java.lang.String[][] getALayout()" map="A"/>
  <method class="crl.levelgen.LevelFeature" name="void setSize(sz.util.Dimension)" map="A"/>
  <method class="crl.levelgen.LevelFeature" name="void addLayout(java.lang.String[][])" map="A"/>
  <method class="crl.levelgen.LevelFeature" name="void addLayout(java.lang.String[])" map="A"/>
  <method class="crl.levelgen.LevelFeature" name="sz.util.Dimension getSize()" map="B"/>
  <class name="crl.levelgen.LevelMaster" map="C"/>
  <field class="crl.levelgen.LevelMaster" name="firstCave" map="A"/>
  <field class="crl.levelgen.LevelMaster" name="currentDispatcher" map="B"/>
  <method class="crl.levelgen.LevelMaster" name="crl.level.Level createLevel(java.lang.String, java.lang.String, int)" map="A"/>
  <method class="crl.levelgen.LevelMaster" name="void lightCandles(crl.level.Level)" map="A"/>
  <method class="crl.levelgen.LevelMaster" name="void placeItems(crl.level.Level, crl.player.Player, int)" map="A"/>
  <method class="crl.levelgen.LevelMaster" name="crl.level.Dispatcher getCurrentDispatcher()" map="A"/>
  <method class="crl.levelgen.LevelMaster" name="int placeKeys(crl.level.Level)" map="B"/>
  <class name="crl.levelgen.RuinLevelGenerator" map="D"/>
  <field class="crl.levelgen.RuinLevelGenerator" name="baseWall" map="P"/>
  <field class="crl.levelgen.RuinLevelGenerator" name="baseDoor" map="Q"/>
  <field class="crl.levelgen.RuinLevelGenerator" name="baseFloor" map="R"/>
  <field class="crl.levelgen.RuinLevelGenerator" name="preLevel" map="S"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="void lightCandles(crl.level.Level)" map="C"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="boolean hasConflicts(int, int, int, int)" map="A"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="int getWidth()" map="K"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="crl.level.Level generateLevel(int, int, int)" map="A"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="void init(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="void doRuin()" map="L"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="int getHeight()" map="M"/>
  <class name="crl.levelgen.DrashLevelGenerator" map="E"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="xdim" map="A"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="gems" map="B"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="levelNumber" map="C"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="SFEATURES" map="D"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="baseDoor" map="E"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="darkness" map="F"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="darkMonsters" map="G"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="baseLava" map="H"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="baseFloor" map="I"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="baseWall" map="J"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="ydim" map="K"/>
  <field class="crl.levelgen.DrashLevelGenerator" name="BFEATURES" map="L"/>
  <method class="crl.levelgen.DrashLevelGenerator" name="boolean isValidArea(sz.util.Position, sz.util.Position)" map="A"/>
  <method class="crl.levelgen.DrashLevelGenerator" name="void scatterItems(crl.level.Level, int)" map="A"/>
  <method class="crl.levelgen.DrashLevelGenerator" name="void populate(crl.level.Level, int)" map="B"/>
  <method class="crl.levelgen.DrashLevelGenerator" name="void renderFeature(crl.levelgen.LGFeature, sz.util.Position, crl.level.Level)" map="A"/>
  <method class="crl.levelgen.DrashLevelGenerator" name="void init(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, boolean, boolean, int)" map="A"/>
  <method class="crl.levelgen.DrashLevelGenerator" name="crl.level.Level generateLevel(int, int)" map="A"/>
  <method class="crl.levelgen.DrashLevelGenerator" name="crl.level.Cell[][] renderLevel(java.lang.String[][])" map="A"/>
  <class name="crl.levelgen.PatternGenerator" map="F"/>
  <field class="crl.levelgen.PatternGenerator" name="endFeature" map="A"/>
  <field class="crl.levelgen.PatternGenerator" name="baseFeature" map="B"/>
  <field class="crl.levelgen.PatternGenerator" name="assignedFeatures" map="C"/>
  <field class="crl.levelgen.PatternGenerator" name="charMap" map="D"/>
  <field class="crl.levelgen.PatternGenerator" name="singleton" map="E"/>
  <field class="crl.levelgen.PatternGenerator" name="hasBoss" map="F"/>
  <method class="crl.levelgen.PatternGenerator" name="void setCharMap(java.util.Hashtable)" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="void assignFeature(crl.levelgen.LevelFeature, sz.util.Position)" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="void drawFeature(crl.levelgen.LevelFeature, sz.util.Position, crl.level.Level)" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="crl.levelgen.PatternGenerator getGenerator()" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="boolean hasBoss()" map="B"/>
  <method class="crl.levelgen.PatternGenerator" name="crl.level.Level createLevel()" map="C"/>
  <method class="crl.levelgen.PatternGenerator" name="void setBaseFeature(crl.levelgen.LevelFeature)" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="void resetFeatures()" map="D"/>
  <method class="crl.levelgen.PatternGenerator" name="void setHasBoss(boolean)" map="A"/>
  <class name="crl.levelgen.LGFeature" map="G"/>
  <field class="crl.levelgen.LGFeature" name="prob" map="A"/>
  <field class="crl.levelgen.LGFeature" name="size" map="B"/>
  <field class="crl.levelgen.LGFeature" name="table" map="C"/>
  <field class="crl.levelgen.LGFeature" name="map" map="D"/>
  <field class="crl.levelgen.LGFeature" name="minLevel" map="E"/>
  <method class="crl.levelgen.LGFeature" name="java.lang.String[] getMap()" map="A"/>
  <method class="crl.levelgen.LGFeature" name="int getMinLevel()" map="B"/>
  <method class="crl.levelgen.LGFeature" name="int getProb()" map="C"/>
  <method class="crl.levelgen.LGFeature" name="java.util.Hashtable getTable()" map="D"/>
  <method class="crl.levelgen.LGFeature" name="sz.util.Position getSize()" map="E"/>
  <class name="crl.levelgen.AssignedFeature" map="H"/>
  <field class="crl.levelgen.AssignedFeature" name="position" map="A"/>
  <field class="crl.levelgen.AssignedFeature" name="feature" map="B"/>
  <method class="crl.levelgen.AssignedFeature" name="sz.util.Position getPosition()" map="A"/>
  <method class="crl.levelgen.AssignedFeature" name="crl.levelgen.LevelFeature getFeature()" map="B"/>
  <class name="crl.levelgen.StaticGenerator" map="I"/>
  <field class="crl.levelgen.StaticGenerator" name="inhabitantsMap" map="A"/>
  <field class="crl.levelgen.StaticGenerator" name="inhabitants" map="B"/>
  <field class="crl.levelgen.StaticGenerator" name="charMap" map="C"/>
  <field class="crl.levelgen.StaticGenerator" name="POTION_IDS" map="D"/>
  <field class="crl.levelgen.StaticGenerator" name="singleton" map="E"/>
  <field class="crl.levelgen.StaticGenerator" name="level" map="F"/>
  <method class="crl.levelgen.StaticGenerator" name="void setCharMap(java.util.Hashtable)" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="int placeKeys(crl.level.Level)" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="void setInhabitants(java.lang.String[][])" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="void reset()" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="crl.levelgen.StaticGenerator getGenerator()" map="B"/>
  <method class="crl.levelgen.StaticGenerator" name="void renderOverLevel(crl.level.Level, java.lang.String[], java.util.Hashtable, sz.util.Position, int)" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="void setInhabitantsMap(java.util.Hashtable)" map="B"/>
  <method class="crl.levelgen.StaticGenerator" name="crl.level.Level createLevel()" map="C"/>
  <method class="crl.levelgen.StaticGenerator" name="void setFlatLevel(java.lang.String[])" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="void setLevel(java.lang.String[][])" map="B"/>
  <class name="crl.levelgen.LevelGenerator" map="J"/>
  <method class="crl.levelgen.LevelGenerator" name="int placeKeys(crl.level.Level)" map="A"/>
  <method class="crl.levelgen.LevelGenerator" name="crl.level.Cell[][] renderLevel(java.lang.String[][])" map="A"/>
  <class name="crl.levelgen.TestLevelGenerator" map="K"/>
  <field class="crl.levelgen.TestLevelGenerator" name="descriptions" map="G"/>
  <method class="crl.levelgen.TestLevelGenerator" name="crl.level.Level generateLevel(java.lang.String, crl.level.Dispatcher)" map="A"/>
  <class name="crl.levelgen.GirdLevelGenerator" map="L"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="candles" map="H"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="baseWall" map="I"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="baseFloor" map="J"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="visitedRooms" map="K"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="endIndex" map="L"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="roomHeight" map="M"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="startIndex" map="N"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="roomWidth" map="O"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="boolean connected()" map="E"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void carveRoom(crl.level.Cell[][][], int, int)" map="A"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void setCandles(int)" map="A"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void printVisited()" map="F"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void init(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void lightCandles(crl.level.Level)" map="B"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="crl.level.Level plotLevel()" map="G"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="crl.level.Level generateLevel(sz.util.Position, int, int, int, int)" map="A"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void setVisitedRooms()" map="H"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="int getWidth()" map="I"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="int getHeight()" map="J"/>
  <package name="crl.cuts" map="C"/>
  <package name="crl.cuts.arena" map="A"/>
  <class name="crl.cuts.arena.PreludeArena2" map="A"/>
  <field class="crl.cuts.arena.PreludeArena2" name="counter" map="B"/>
  <field class="crl.cuts.arena.PreludeArena2" name="superCounter" map="C"/>
  <method class="crl.cuts.arena.PreludeArena2" name="void unleash(crl.level.Level, crl.game.Game)" map="A"/>
  <method class="crl.cuts.arena.PreludeArena2" name="crl.levelgen.MonsterSpawnInfo[] doInhabitants(java.lang.String[])" map="A"/>
  <class name="crl.cuts.arena.PreludeArena1" map="B"/>
  <method class="crl.cuts.arena.PreludeArena1" name="void unleash(crl.level.Level, crl.game.Game)" map="A"/>
  <package name="crl.cuts.training" map="B"/>
  <class name="crl.cuts.training.Training1" map="A"/>
  <method class="crl.cuts.training.Training1" name="void unleash(crl.level.Level, crl.game.Game)" map="A"/>
  <class name="crl.cuts.EndingTrigger" map="A"/>
  <method class="crl.cuts.EndingTrigger" name="void unleash(crl.level.Level, crl.game.Game)" map="A"/>
  <class name="crl.cuts.Unleasher" map="B"/>
  <field class="crl.cuts.Unleasher" name="enabled" map="A"/>
  <method class="crl.cuts.Unleasher" name="boolean enabled()" map="A"/>
  <method class="crl.cuts.Unleasher" name="void disable()" map="B"/>
  <method class="crl.cuts.Unleasher" name="void unleash(crl.level.Level, crl.game.Game)" map="A"/>
  <package name="crl.deploy" map="D"/>
  <class name="crl.deploy.ItemLoader" map="A"/>
  <method class="crl.deploy.ItemLoader" name="void main(java.lang.String[])" map="A"/>
  <method class="crl.deploy.ItemLoader" name="boolean isNumber(java.lang.String)" map="A"/>
  <class name="crl.deploy.MonsterEncrypter" map="B"/>
  <method class="crl.deploy.MonsterEncrypter" name="void main(java.lang.String[])" map="A"/>
  <package name="crl.action" map="E"/>
  <package name="crl.action.spells" map="A"/>
  <class name="crl.action.spells.MissileSpell" map="A"/>
  <method class="crl.action.spells.MissileSpell" name="java.lang.String getSpellAttackDesc()" map="X"/>
  <method class="crl.action.spells.MissileSpell" name="void execute()" map="F"/>
  <method class="crl.action.spells.MissileSpell" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.MissileSpell" name="int getSpellBreak()" map="Y"/>
  <method class="crl.action.spells.MissileSpell" name="java.lang.String getSFXID()" map="Z"/>
  <method class="crl.action.spells.MissileSpell" name="int getHit()" map="_"/>
  <method class="crl.action.spells.MissileSpell" name="java.lang.String getShootMessage()" map="a"/>
  <method class="crl.action.spells.MissileSpell" name="int getRange()" map="b"/>
  <method class="crl.action.spells.MissileSpell" name="java.lang.String getSelfTargettedMessage()" map="c"/>
  <method class="crl.action.spells.MissileSpell" name="int getSpellDamage()" map="d"/>
  <method class="crl.action.spells.MissileSpell" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.Blink" map="B"/>
  <method class="crl.action.spells.Blink" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.Blink" name="void execute()" map="F"/>
  <method class="crl.action.spells.Blink" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.Blink" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Blink" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Blink" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Blink" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.IceBall" map="C"/>
  <method class="crl.action.spells.IceBall" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.IceBall" name="java.lang.String getSpellAttackDesc()" map="X"/>
  <method class="crl.action.spells.IceBall" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.IceBall" name="java.lang.String getSFXID()" map="Z"/>
  <method class="crl.action.spells.IceBall" name="int getHit()" map="_"/>
  <method class="crl.action.spells.IceBall" name="java.lang.String getShootMessage()" map="a"/>
  <method class="crl.action.spells.IceBall" name="int getRange()" map="b"/>
  <method class="crl.action.spells.IceBall" name="java.lang.String getSelfTargettedMessage()" map="c"/>
  <method class="crl.action.spells.IceBall" name="int getSpellDamage()" map="d"/>
  <method class="crl.action.spells.IceBall" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.IceBall" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.spells.IceBall" name="java.lang.String getSFX()" map="A"/>
  <class name="crl.action.spells.Invoke" map="D"/>
  <field class="crl.action.spells.Invoke" name="SUMMONS" map="d"/>
  <method class="crl.action.spells.Invoke" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.Invoke" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Invoke" name="void execute()" map="F"/>
  <method class="crl.action.spells.Invoke" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Invoke" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.Spell" map="E"/>
  <method class="crl.action.spells.Spell" name="void execute()" map="F"/>
  <method class="crl.action.spells.Spell" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Spell" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Spell" name="boolean canPerform(crl.actor.Actor)" map="B"/>
  <method class="crl.action.spells.Spell" name="int getCost()" map="M"/>
  <class name="crl.action.spells.LightingStorm" map="F"/>
  <method class="crl.action.spells.LightingStorm" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.LightingStorm" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.LightingStorm" name="void execute()" map="F"/>
  <method class="crl.action.spells.LightingStorm" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.LightingStorm" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.Light" map="G"/>
  <method class="crl.action.spells.Light" name="void execute()" map="F"/>
  <method class="crl.action.spells.Light" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Light" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Light" name="int getManaCost()" map="W"/>
  <class name="crl.action.spells.LightMissile" map="H"/>
  <method class="crl.action.spells.LightMissile" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.LightMissile" name="java.lang.String getSpellAttackDesc()" map="X"/>
  <method class="crl.action.spells.LightMissile" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.LightMissile" name="java.lang.String getSFXID()" map="Z"/>
  <method class="crl.action.spells.LightMissile" name="int getHit()" map="_"/>
  <method class="crl.action.spells.LightMissile" name="java.lang.String getShootMessage()" map="a"/>
  <method class="crl.action.spells.LightMissile" name="int getRange()" map="b"/>
  <method class="crl.action.spells.LightMissile" name="java.lang.String getSelfTargettedMessage()" map="c"/>
  <method class="crl.action.spells.LightMissile" name="int getSpellDamage()" map="d"/>
  <method class="crl.action.spells.LightMissile" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.LightMissile" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.spells.LightMissile" name="java.lang.String getSFX()" map="A"/>
  <class name="crl.action.spells.Kill" map="I"/>
  <method class="crl.action.spells.Kill" name="void execute()" map="F"/>
  <method class="crl.action.spells.Kill" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Kill" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.Kill" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Kill" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Kill" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.Protection" map="J"/>
  <method class="crl.action.spells.Protection" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Protection" name="void execute()" map="F"/>
  <method class="crl.action.spells.Protection" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Protection" name="int getManaCost()" map="W"/>
  <class name="crl.action.spells.Poison" map="K"/>
  <method class="crl.action.spells.Poison" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.Poison" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Poison" name="void execute()" map="F"/>
  <method class="crl.action.spells.Poison" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.Poison" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Poison" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Poison" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.MagicMissile" map="L"/>
  <method class="crl.action.spells.MagicMissile" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.MagicMissile" name="java.lang.String getSpellAttackDesc()" map="X"/>
  <method class="crl.action.spells.MagicMissile" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.MagicMissile" name="int getSpellBreak()" map="Y"/>
  <method class="crl.action.spells.MagicMissile" name="java.lang.String getSFXID()" map="Z"/>
  <method class="crl.action.spells.MagicMissile" name="int getHit()" map="_"/>
  <method class="crl.action.spells.MagicMissile" name="java.lang.String getShootMessage()" map="a"/>
  <method class="crl.action.spells.MagicMissile" name="int getRange()" map="b"/>
  <method class="crl.action.spells.MagicMissile" name="java.lang.String getSelfTargettedMessage()" map="c"/>
  <method class="crl.action.spells.MagicMissile" name="int getSpellDamage()" map="d"/>
  <method class="crl.action.spells.MagicMissile" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.MagicMissile" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.spells.MagicMissile" name="java.lang.String getSFX()" map="A"/>
  <class name="crl.action.spells.Destruction" map="M"/>
  <method class="crl.action.spells.Destruction" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Destruction" name="void execute()" map="F"/>
  <method class="crl.action.spells.Destruction" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Destruction" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.Lighting" map="N"/>
  <method class="crl.action.spells.Lighting" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Lighting" name="java.lang.String getSpellAttackDesc()" map="X"/>
  <method class="crl.action.spells.Lighting" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Lighting" name="java.lang.String getSFXID()" map="Z"/>
  <method class="crl.action.spells.Lighting" name="int getHit()" map="_"/>
  <method class="crl.action.spells.Lighting" name="java.lang.String getShootMessage()" map="a"/>
  <method class="crl.action.spells.Lighting" name="int getRange()" map="b"/>
  <method class="crl.action.spells.Lighting" name="java.lang.String getSelfTargettedMessage()" map="c"/>
  <method class="crl.action.spells.Lighting" name="int getSpellDamage()" map="d"/>
  <method class="crl.action.spells.Lighting" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Lighting" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.spells.Lighting" name="java.lang.String getSFX()" map="A"/>
  <class name="crl.action.spells.Quickness" map="O"/>
  <method class="crl.action.spells.Quickness" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Quickness" name="void execute()" map="F"/>
  <method class="crl.action.spells.Quickness" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Quickness" name="int getManaCost()" map="W"/>
  <class name="crl.action.spells.CreateBarrier" map="P"/>
  <method class="crl.action.spells.CreateBarrier" name="void execute()" map="F"/>
  <method class="crl.action.spells.CreateBarrier" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.CreateBarrier" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.CreateBarrier" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.CreateBarrier" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.CreateBarrier" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.LifeDrain" map="Q"/>
  <method class="crl.action.spells.LifeDrain" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.LifeDrain" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.LifeDrain" name="void execute()" map="F"/>
  <method class="crl.action.spells.LifeDrain" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.LifeDrain" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.LifeDrain" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.LifeDrain" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.BlastWall" map="R"/>
  <method class="crl.action.spells.BlastWall" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.BlastWall" name="void execute()" map="F"/>
  <method class="crl.action.spells.BlastWall" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.BlastWall" name="boolean hit(sz.util.Position)" map="E"/>
  <method class="crl.action.spells.BlastWall" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.BlastWall" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.BlastWall" name="java.lang.String getPromptDirection()" map="E"/>
  <method class="crl.action.spells.BlastWall" name="boolean needsDirection()" map="G"/>
  <class name="crl.action.spells.FireMissile" map="S"/>
  <method class="crl.action.spells.FireMissile" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.FireMissile" name="java.lang.String getSpellAttackDesc()" map="X"/>
  <method class="crl.action.spells.FireMissile" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.FireMissile" name="java.lang.String getSFXID()" map="Z"/>
  <method class="crl.action.spells.FireMissile" name="int getHit()" map="_"/>
  <method class="crl.action.spells.FireMissile" name="java.lang.String getShootMessage()" map="a"/>
  <method class="crl.action.spells.FireMissile" name="int getRange()" map="b"/>
  <method class="crl.action.spells.FireMissile" name="java.lang.String getSelfTargettedMessage()" map="c"/>
  <method class="crl.action.spells.FireMissile" name="int getSpellDamage()" map="d"/>
  <method class="crl.action.spells.FireMissile" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.FireMissile" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.spells.FireMissile" name="java.lang.String getSFX()" map="A"/>
  <class name="crl.action.spells.Explotion" map="T"/>
  <method class="crl.action.spells.Explotion" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.Explotion" name="void execute()" map="F"/>
  <method class="crl.action.spells.Explotion" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.Explotion" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Explotion" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Explotion" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Explotion" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.GreatLight" map="U"/>
  <method class="crl.action.spells.GreatLight" name="void execute()" map="F"/>
  <method class="crl.action.spells.GreatLight" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.GreatLight" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.GreatLight" name="int getManaCost()" map="W"/>
  <class name="crl.action.spells.Summon" map="V"/>
  <field class="crl.action.spells.Summon" name="SUMMONS" map="e"/>
  <method class="crl.action.spells.Summon" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.Summon" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Summon" name="void execute()" map="F"/>
  <method class="crl.action.spells.Summon" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Summon" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.Tremor" map="W"/>
  <method class="crl.action.spells.Tremor" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.Tremor" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Tremor" name="void execute()" map="F"/>
  <method class="crl.action.spells.Tremor" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Tremor" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.EnergyArmor" map="X"/>
  <method class="crl.action.spells.EnergyArmor" name="void execute()" map="F"/>
  <method class="crl.action.spells.EnergyArmor" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.EnergyArmor" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.EnergyArmor" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.EnergyArmor" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.EnergyArmor" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.Cure" map="Y"/>
  <method class="crl.action.spells.Cure" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Cure" name="void execute()" map="F"/>
  <method class="crl.action.spells.Cure" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Cure" name="int getManaCost()" map="W"/>
  <class name="crl.action.spells.XRay" map="Z"/>
  <method class="crl.action.spells.XRay" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.XRay" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.XRay" name="void execute()" map="F"/>
  <method class="crl.action.spells.XRay" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.XRay" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.TimeStop" map="_"/>
  <method class="crl.action.spells.TimeStop" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.TimeStop" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.TimeStop" name="void execute()" map="F"/>
  <method class="crl.action.spells.TimeStop" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.TimeStop" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.FlameWind" map="a"/>
  <method class="crl.action.spells.FlameWind" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.FlameWind" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.FlameWind" name="void execute()" map="F"/>
  <method class="crl.action.spells.FlameWind" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.FlameWind" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.Prayer" map="b"/>
  <method class="crl.action.spells.Prayer" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Prayer" name="void execute()" map="F"/>
  <method class="crl.action.spells.Prayer" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Prayer" name="int getManaCost()" map="W"/>
  <class name="crl.action.spells.Invisibility" map="c"/>
  <method class="crl.action.spells.Invisibility" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Invisibility" name="void execute()" map="F"/>
  <method class="crl.action.spells.Invisibility" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Invisibility" name="int getManaCost()" map="W"/>
  <class name="crl.action.spells.FireBarrage" map="d"/>
  <method class="crl.action.spells.FireBarrage" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.FireBarrage" name="void execute()" map="F"/>
  <method class="crl.action.spells.FireBarrage" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.FireBarrage" name="boolean hit(sz.util.Position)" map="F"/>
  <method class="crl.action.spells.FireBarrage" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.FireBarrage" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.FireBarrage" name="java.lang.String getPromptDirection()" map="E"/>
  <method class="crl.action.spells.FireBarrage" name="boolean needsDirection()" map="G"/>
  <class name="crl.action.spells.MindMissile" map="e"/>
  <method class="crl.action.spells.MindMissile" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.MindMissile" name="java.lang.String getSpellAttackDesc()" map="X"/>
  <method class="crl.action.spells.MindMissile" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.MindMissile" name="java.lang.String getSFXID()" map="Z"/>
  <method class="crl.action.spells.MindMissile" name="int getHit()" map="_"/>
  <method class="crl.action.spells.MindMissile" name="java.lang.String getShootMessage()" map="a"/>
  <method class="crl.action.spells.MindMissile" name="int getRange()" map="b"/>
  <method class="crl.action.spells.MindMissile" name="java.lang.String getSelfTargettedMessage()" map="c"/>
  <method class="crl.action.spells.MindMissile" name="int getSpellDamage()" map="d"/>
  <method class="crl.action.spells.MindMissile" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.MindMissile" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.spells.MindMissile" name="java.lang.String getSFX()" map="A"/>
  <class name="crl.action.spells.Charm" map="f"/>
  <method class="crl.action.spells.Charm" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.Charm" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Charm" name="void execute()" map="F"/>
  <method class="crl.action.spells.Charm" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.Charm" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Charm" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Charm" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.Sleep" map="g"/>
  <method class="crl.action.spells.Sleep" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.Sleep" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Sleep" name="void execute()" map="F"/>
  <method class="crl.action.spells.Sleep" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.Sleep" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Sleep" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Sleep" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.View" map="h"/>
  <method class="crl.action.spells.View" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.View" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.View" name="void execute()" map="F"/>
  <method class="crl.action.spells.View" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.View" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.spells.DestroyBarrier" map="i"/>
  <method class="crl.action.spells.DestroyBarrier" name="void execute()" map="F"/>
  <method class="crl.action.spells.DestroyBarrier" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.DestroyBarrier" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.DestroyBarrier" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.DestroyBarrier" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.DestroyBarrier" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.Recover" map="j"/>
  <method class="crl.action.spells.Recover" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Recover" name="void execute()" map="F"/>
  <method class="crl.action.spells.Recover" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.Recover" name="int getManaCost()" map="W"/>
  <class name="crl.action.spells.LifeBurst" map="k"/>
  <method class="crl.action.spells.LifeBurst" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.spells.LifeBurst" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.LifeBurst" name="void execute()" map="F"/>
  <method class="crl.action.spells.LifeBurst" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.spells.LifeBurst" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.LifeBurst" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.spells.LifeBurst" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.spells.Noxum" map="l"/>
  <method class="crl.action.spells.Noxum" name="double getTimeCostModifier()" map="V"/>
  <method class="crl.action.spells.Noxum" name="void execute()" map="F"/>
  <method class="crl.action.spells.Noxum" name="int getManaCost()" map="W"/>
  <method class="crl.action.spells.Noxum" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.Use" map="A"/>
  <method class="crl.action.Use" name="java.lang.String getPromptItem()" map="L"/>
  <method class="crl.action.Use" name="void execute()" map="F"/>
  <method class="crl.action.Use" name="boolean needsItem()" map="R"/>
  <method class="crl.action.Use" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.Walk" map="B"/>
  <field class="crl.action.Walk" name="aPlayer" map="f"/>
  <method class="crl.action.Walk" name="void execute()" map="F"/>
  <method class="crl.action.Walk" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.Walk" name="boolean needsDirection()" map="G"/>
  <method class="crl.action.Walk" name="int getCost()" map="M"/>
  <class name="crl.action.MonsterWalk" map="C"/>
  <method class="crl.action.MonsterWalk" name="void execute()" map="F"/>
  <method class="crl.action.MonsterWalk" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.MonsterWalk" name="boolean needsDirection()" map="G"/>
  <method class="crl.action.MonsterWalk" name="int getCost()" map="M"/>
  <class name="crl.action.Action" map="D"/>
  <field class="crl.action.Action" name="DOWNLEFT" map="A"/>
  <field class="crl.action.Action" name="performer" map="B"/>
  <field class="crl.action.Action" name="UPRIGHT" map="C"/>
  <field class="crl.action.Action" name="UPLEFT" map="D"/>
  <field class="crl.action.Action" name="UP" map="E"/>
  <field class="crl.action.Action" name="invalidationMessage" map="F"/>
  <field class="crl.action.Action" name="VARUR" map="G"/>
  <field class="crl.action.Action" name="VARUP" map="H"/>
  <field class="crl.action.Action" name="targetDirection" map="I"/>
  <field class="crl.action.Action" name="targetEquipedItem" map="J"/>
  <field class="crl.action.Action" name="targetItem" map="K"/>
  <field class="crl.action.Action" name="VARUL" map="L"/>
  <field class="crl.action.Action" name="targetPosition" map="M"/>
  <field class="crl.action.Action" name="RIGHT" map="N"/>
  <field class="crl.action.Action" name="VARLF" map="O"/>
  <field class="crl.action.Action" name="VARDR" map="P"/>
  <field class="crl.action.Action" name="VARRG" map="Q"/>
  <field class="crl.action.Action" name="LEFT" map="R"/>
  <field class="crl.action.Action" name="VARDN" map="S"/>
  <field class="crl.action.Action" name="VARDL" map="T"/>
  <field class="crl.action.Action" name="targetMultiItems" map="U"/>
  <field class="crl.action.Action" name="VARSL" map="V"/>
  <field class="crl.action.Action" name="DOWN" map="W"/>
  <field class="crl.action.Action" name="SELF" map="X"/>
  <field class="crl.action.Action" name="DOWNRIGHT" map="Y"/>
  <method class="crl.action.Action" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.Action" name="int toIntDirection(sz.util.Position)" map="A"/>
  <method class="crl.action.Action" name="int toIntDirection(sz.csi.CharKey)" map="A"/>
  <method class="crl.action.Action" name="java.lang.String getPromptMultiItems()" map="B"/>
  <method class="crl.action.Action" name="boolean needsUnderlyingItem()" map="C"/>
  <method class="crl.action.Action" name="void setMultiItems(java.util.Vector)" map="A"/>
  <method class="crl.action.Action" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.Action" name="sz.util.Position getPositionalDirectionFrom(sz.util.Position, int)" map="A"/>
  <method class="crl.action.Action" name="java.lang.String getPromptDirection()" map="E"/>
  <method class="crl.action.Action" name="void execute()" map="F"/>
  <method class="crl.action.Action" name="void setPerformer(crl.actor.Actor)" map="A"/>
  <method class="crl.action.Action" name="boolean needsDirection()" map="G"/>
  <method class="crl.action.Action" name="boolean needsSpirits()" map="H"/>
  <method class="crl.action.Action" name="java.lang.String getPrompUnderlyingItem()" map="I"/>
  <method class="crl.action.Action" name="sz.util.Position getPositionalDirectionFrom(sz.util.Position)" map="B"/>
  <method class="crl.action.Action" name="sz.util.Position antiVariation(sz.util.Position)" map="C"/>
  <method class="crl.action.Action" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.Action" name="int oppositeFrom(int)" map="A"/>
  <method class="crl.action.Action" name="java.lang.String getInvalidationMessage()" map="K"/>
  <method class="crl.action.Action" name="void setPosition(sz.util.Position)" map="D"/>
  <method class="crl.action.Action" name="void drawEffect(crl.ui.effects.Effect)" map="A"/>
  <method class="crl.action.Action" name="java.lang.String getPromptItem()" map="L"/>
  <method class="crl.action.Action" name="int getCost()" map="M"/>
  <method class="crl.action.Action" name="java.lang.String getPromptEquipedItem()" map="N"/>
  <method class="crl.action.Action" name="boolean needsMultiItems()" map="O"/>
  <method class="crl.action.Action" name="sz.util.Position directionToVariation(int)" map="B"/>
  <method class="crl.action.Action" name="void setDirection(int)" map="C"/>
  <method class="crl.action.Action" name="boolean needsEquipedItem()" map="P"/>
  <method class="crl.action.Action" name="boolean canPerform(crl.actor.Actor)" map="B"/>
  <method class="crl.action.Action" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.Action" name="void setItem(crl.item.Item)" map="A"/>
  <method class="crl.action.Action" name="boolean needsItem()" map="R"/>
  <method class="crl.action.Action" name="void setEquipedItem(crl.item.Item)" map="B"/>
  <class name="crl.action.Get" map="E"/>
  <method class="crl.action.Get" name="java.lang.String getPrompUnderlyingItem()" map="I"/>
  <method class="crl.action.Get" name="void execute()" map="F"/>
  <method class="crl.action.Get" name="boolean needsUnderlyingItem()" map="C"/>
  <method class="crl.action.Get" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.Attack" map="F"/>
  <field class="crl.action.Attack" name="weapon" map="g"/>
  <field class="crl.action.Attack" name="reloadTime" map="h"/>
  <method class="crl.action.Attack" name="boolean reload(crl.item.Item, crl.player.Player)" map="A"/>
  <method class="crl.action.Attack" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.Attack" name="int getDirection()" map="e"/>
  <method class="crl.action.Attack" name="void execute()" map="F"/>
  <method class="crl.action.Attack" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.Attack" name="java.lang.String getPromptDirection()" map="E"/>
  <method class="crl.action.Attack" name="boolean needsDirection()" map="G"/>
  <method class="crl.action.Attack" name="int getCost()" map="M"/>
  <class name="crl.action.ChangeTactic" map="G"/>
  <method class="crl.action.ChangeTactic" name="void execute()" map="F"/>
  <method class="crl.action.ChangeTactic" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.ChangeTactic" name="int getCost()" map="M"/>
  <class name="crl.action.MonsterMissile" map="H"/>
  <field class="crl.action.MonsterMissile" name="TYPE_STRAIGHT" map="i"/>
  <field class="crl.action.MonsterMissile" name="effectType" map="j"/>
  <field class="crl.action.MonsterMissile" name="TYPE_DIRECT" map="k"/>
  <field class="crl.action.MonsterMissile" name="range" map="l"/>
  <field class="crl.action.MonsterMissile" name="TYPE_AXE" map="m"/>
  <field class="crl.action.MonsterMissile" name="damage" map="n"/>
  <field class="crl.action.MonsterMissile" name="type" map="o"/>
  <field class="crl.action.MonsterMissile" name="effectID" map="p"/>
  <field class="crl.action.MonsterMissile" name="statusEffect" map="q"/>
  <field class="crl.action.MonsterMissile" name="effectWav" map="r"/>
  <field class="crl.action.MonsterMissile" name="message" map="s"/>
  <method class="crl.action.MonsterMissile" name="void set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String)" map="A"/>
  <method class="crl.action.MonsterMissile" name="void execute()" map="F"/>
  <method class="crl.action.MonsterMissile" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.MonsterMissile" name="java.lang.String getEffectWav()" map="f"/>
  <method class="crl.action.MonsterMissile" name="int solveDirection(sz.util.Position, sz.util.Position)" map="A"/>
  <method class="crl.action.MonsterMissile" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.MonsterMissile" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.MonsterMissile" name="int getCost()" map="M"/>
  <class name="crl.action.MonsterCharge" map="I"/>
  <field class="crl.action.MonsterCharge" name="effectWav" map="t"/>
  <field class="crl.action.MonsterCharge" name="range" map="u"/>
  <field class="crl.action.MonsterCharge" name="damage" map="v"/>
  <field class="crl.action.MonsterCharge" name="message" map="w"/>
  <field class="crl.action.MonsterCharge" name="statusEffect" map="x"/>
  <method class="crl.action.MonsterCharge" name="void execute()" map="F"/>
  <method class="crl.action.MonsterCharge" name="void set(int, java.lang.String, int, java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.action.MonsterCharge" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.MonsterCharge" name="java.lang.String getPromptDirection()" map="E"/>
  <method class="crl.action.MonsterCharge" name="boolean needsDirection()" map="G"/>
  <method class="crl.action.MonsterCharge" name="int getCost()" map="M"/>
  <class name="crl.action.SwitchWeapons" map="J"/>
  <field class="crl.action.SwitchWeapons" name="weapon" map="y"/>
  <method class="crl.action.SwitchWeapons" name="void execute()" map="F"/>
  <method class="crl.action.SwitchWeapons" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.SwitchWeapons" name="boolean canPerform(crl.actor.Actor)" map="B"/>
  <method class="crl.action.SwitchWeapons" name="int getCost()" map="M"/>
  <class name="crl.action.Equip" map="K"/>
  <method class="crl.action.Equip" name="java.lang.String getPromptItem()" map="L"/>
  <method class="crl.action.Equip" name="void execute()" map="F"/>
  <method class="crl.action.Equip" name="boolean needsItem()" map="R"/>
  <method class="crl.action.Equip" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.CharmedWalk" map="L"/>
  <method class="crl.action.CharmedWalk" name="void execute()" map="F"/>
  <method class="crl.action.CharmedWalk" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.CharmedWalk" name="boolean needsDirection()" map="G"/>
  <method class="crl.action.CharmedWalk" name="int getCost()" map="M"/>
  <class name="crl.action.Drop" map="M"/>
  <method class="crl.action.Drop" name="java.lang.String getPromptItem()" map="L"/>
  <method class="crl.action.Drop" name="void execute()" map="F"/>
  <method class="crl.action.Drop" name="boolean needsItem()" map="R"/>
  <method class="crl.action.Drop" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.Reload" map="N"/>
  <field class="crl.action.Reload" name="weapon" map="z"/>
  <method class="crl.action.Reload" name="void execute()" map="F"/>
  <method class="crl.action.Reload" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.Reload" name="boolean canPerform(crl.actor.Actor)" map="B"/>
  <method class="crl.action.Reload" name="int getCost()" map="M"/>
  <class name="crl.action.Throw" map="O"/>
  <method class="crl.action.Throw" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.Throw" name="java.lang.String getPromptItem()" map="L"/>
  <method class="crl.action.Throw" name="void execute()" map="F"/>
  <method class="crl.action.Throw" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.Throw" name="boolean needsItem()" map="R"/>
  <method class="crl.action.Throw" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.Throw" name="java.lang.String getPromptPosition()" map="J"/>
  <class name="crl.action.Unequip" map="P"/>
  <method class="crl.action.Unequip" name="java.lang.String getPromptEquipedItem()" map="N"/>
  <method class="crl.action.Unequip" name="void execute()" map="F"/>
  <method class="crl.action.Unequip" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.Unequip" name="boolean needsEquipedItem()" map="P"/>
  <class name="crl.action.ReadyWeapon" map="Q"/>
  <method class="crl.action.ReadyWeapon" name="java.lang.String getPromptItem()" map="L"/>
  <method class="crl.action.ReadyWeapon" name="void execute()" map="F"/>
  <method class="crl.action.ReadyWeapon" name="boolean needsItem()" map="R"/>
  <method class="crl.action.ReadyWeapon" name="java.lang.String getID()" map="D"/>
  <class name="crl.action.ActionFactory" map="R"/>
  <field class="crl.action.ActionFactory" name="definitions" map="A"/>
  <field class="crl.action.ActionFactory" name="singleton" map="B"/>
  <method class="crl.action.ActionFactory" name="crl.action.Action getAction(java.lang.String)" map="A"/>
  <method class="crl.action.ActionFactory" name="void addDefinition(crl.action.Action)" map="A"/>
  <method class="crl.action.ActionFactory" name="crl.action.ActionFactory getActionFactory()" map="A"/>
  <class name="crl.action.Target" map="S"/>
  <field class="crl.action.Target" name="reloadTime" map="&#x00a2;"/>
  <field class="crl.action.Target" name="weapon" map="&#x00a3;"/>
  <field class="crl.action.Target" name="player" map="&#x00a4;"/>
  <method class="crl.action.Target" name="boolean canPerform(crl.actor.Actor)" map="B"/>
  <method class="crl.action.Target" name="java.lang.String getID()" map="D"/>
  <method class="crl.action.Target" name="sz.util.Position getPosition()" map="g"/>
  <method class="crl.action.Target" name="void execute()" map="F"/>
  <method class="crl.action.Target" name="boolean needsPosition()" map="Q"/>
  <method class="crl.action.Target" name="int getCost()" map="M"/>
  <method class="crl.action.Target" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="crl.action.Target" name="java.lang.String getSFX()" map="A"/>
  <method class="crl.action.Target" name="boolean reload(crl.item.Item, crl.player.Player)" map="B"/>
  <class name="crl.action.SummonMonster" map="T"/>
  <field class="crl.action.SummonMonster" name="actionMessage" map="&#x00a5;"/>
  <field class="crl.action.SummonMonster" name="monsterId" map="&#x00aa;"/>
  <method class="crl.action.SummonMonster" name="void execute()" map="F"/>
  <method class="crl.action.SummonMonster" name="void set(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.action.SummonMonster" name="java.lang.String getID()" map="D"/>
  <package name="crl.actor" map="F"/>
  <class name="crl.actor.Actor" map="A"/>
  <field class="crl.actor.Actor" name="level" map="A"/>
  <field class="crl.actor.Actor" name="positionz" map="B"/>
  <field class="crl.actor.Actor" name="positiony" map="C"/>
  <field class="crl.actor.Actor" name="positionx" map="D"/>
  <field class="crl.actor.Actor" name="selector" map="E"/>
  <field class="crl.actor.Actor" name="nextTime" map="F"/>
  <field class="crl.actor.Actor" name="hashCounters" map="G"/>
  <field class="crl.actor.Actor" name="position" map="H"/>
  <field class="crl.actor.Actor" name="appearance" map="I"/>
  <field class="crl.actor.Actor" name="aWannaDie" map="J"/>
  <method class="crl.actor.Actor" name="crl.ai.ActionSelector getSelector()" map="B"/>
  <method class="crl.actor.Actor" name="void setSelector(crl.ai.ActionSelector)" map="A"/>
  <method class="crl.actor.Actor" name="java.lang.Object clone()" map="clone"/>
  <method class="crl.actor.Actor" name="void reduceCost(int)" map="A"/>
  <method class="crl.actor.Actor" name="sz.util.Position getPosition()" map="C"/>
  <method class="crl.actor.Actor" name="boolean hasCounter(java.lang.String)" map="A"/>
  <method class="crl.actor.Actor" name="void die()" map="D"/>
  <method class="crl.actor.Actor" name="void message(java.lang.String)" map="B"/>
  <method class="crl.actor.Actor" name="crl.level.Level getLevel()" map="E"/>
  <method class="crl.actor.Actor" name="void execute(crl.action.Action)" map="A"/>
  <method class="crl.actor.Actor" name="void act()" map="F"/>
  <method class="crl.actor.Actor" name="void setCounter(java.lang.String, int)" map="A"/>
  <method class="crl.actor.Actor" name="void setAppearance(crl.ui.Appearance)" map="A"/>
  <method class="crl.actor.Actor" name="void setPosition(sz.util.Position)" map="A"/>
  <method class="crl.actor.Actor" name="crl.ui.Appearance getAppearance()" map="G"/>
  <method class="crl.actor.Actor" name="boolean wannaDie()" map="H"/>
  <method class="crl.actor.Actor" name="void setPosition(int, int, int)" map="A"/>
  <method class="crl.actor.Actor" name="void setNextTime(int)" map="B"/>
  <method class="crl.actor.Actor" name="int getCost()" map="A"/>
  <method class="crl.actor.Actor" name="void setLevel(crl.level.Level)" map="A"/>
  <method class="crl.actor.Actor" name="int getCounter(java.lang.String)" map="C"/>
  <method class="crl.actor.Actor" name="java.lang.String getDescription()" map="I"/>
  <method class="crl.actor.Actor" name="void updateStatus()" map="J"/>
  <class name="crl.actor.Message" map="B"/>
  <field class="crl.actor.Message" name="location" map="A"/>
  <field class="crl.actor.Message" name="text" map="B"/>
  <method class="crl.actor.Message" name="sz.util.Position getLocation()" map="A"/>
  <method class="crl.actor.Message" name="java.lang.String getText()" map="B"/>
  <method class="crl.actor.Message" name="java.lang.String toString()" map="toString"/>
  <package name="crl.data" map="G"/>
  <class name="crl.data.MonsterLoader" map="A"/>
  <method class="crl.data.MonsterLoader" name="crl.monster.MonsterDefinition[] getMonsterDefinitions(java.lang.String)" map="A"/>
  <class name="crl.data.MonsterDocumentHandler" map="B"/>
  <field class="crl.data.MonsterDocumentHandler" name="currentRangedAttacks" map="A"/>
  <field class="crl.data.MonsterDocumentHandler" name="defVector" map="B"/>
  <field class="crl.data.MonsterDocumentHandler" name="currentSelector" map="C"/>
  <field class="crl.data.MonsterDocumentHandler" name="currentMD" map="D"/>
  <method class="crl.data.MonsterDocumentHandler" name="void endElement(java.lang.String)" map="endElement"/>
  <method class="crl.data.MonsterDocumentHandler" name="void setDocumentLocator(org.xml.sax.Locator)" map="setDocumentLocator"/>
  <method class="crl.data.MonsterDocumentHandler" name="void processingInstruction(java.lang.String, java.lang.String)" map="processingInstruction"/>
  <method class="crl.data.MonsterDocumentHandler" name="int inte(java.lang.String)" map="A"/>
  <method class="crl.data.MonsterDocumentHandler" name="void ignorableWhitespace(char[], int, int)" map="ignorableWhitespace"/>
  <method class="crl.data.MonsterDocumentHandler" name="java.util.Vector getMonsterDefinitions()" map="A"/>
  <method class="crl.data.MonsterDocumentHandler" name="void skippedEntity(java.lang.String)" map="B"/>
  <method class="crl.data.MonsterDocumentHandler" name="void endDocument()" map="endDocument"/>
  <method class="crl.data.MonsterDocumentHandler" name="void startPrefixMapping(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.data.MonsterDocumentHandler" name="void endPrefixMapping(java.lang.String)" map="C"/>
  <method class="crl.data.MonsterDocumentHandler" name="void startElement(java.lang.String, org.xml.sax.AttributeList)" map="startElement"/>
  <method class="crl.data.MonsterDocumentHandler" name="void characters(char[], int, int)" map="characters"/>
  <method class="crl.data.MonsterDocumentHandler" name="void startDocument()" map="startDocument"/>
  <class name="crl.data.Features" map="C"/>
  <method class="crl.data.Features" name="crl.feature.Feature[] getFeatureDefinitions(crl.ui.AppearanceFactory)" map="A"/>
  <class name="crl.data.SmartFeatures" map="D"/>
  <method class="crl.data.SmartFeatures" name="crl.feature.SmartFeature[] getSmartFeatures(crl.ai.SelectorFactory)" map="A"/>
  <class name="crl.data.Items" map="E"/>
  <field class="crl.data.Items" name="defs" map="A"/>
  <method class="crl.data.Items" name="crl.item.ItemDefinition[] getItemDefinitions()" map="A"/>
  <class name="crl.data.Cells" map="F"/>
  <method class="crl.data.Cells" name="crl.level.Cell[] getCellDefinitions(crl.ui.AppearanceFactory)" map="A"/>
  <package name="crl.conf" map="H"/>
  <package name="crl.conf.gfx" map="A"/>
  <package name="crl.conf.gfx.data" map="A"/>
  <class name="crl.conf.gfx.data.GFXEffects" map="A"/>
  <field class="crl.conf.gfx.data.GFXEffects" name="IMG_SLASHES" map="A"/>
  <field class="crl.conf.gfx.data.GFXEffects" name="IMG_EFFECTS" map="B"/>
  <field class="crl.conf.gfx.data.GFXEffects" name="effects" map="C"/>
  <field class="crl.conf.gfx.data.GFXEffects" name="tileSize" map="D"/>
  <method class="crl.conf.gfx.data.GFXEffects" name="java.awt.Image[] load2(int, int)" map="A"/>
  <method class="crl.conf.gfx.data.GFXEffects" name="crl.ui.graphicsUI.effects.GFXEffect[] getEffects(java.util.Properties)" map="A"/>
  <method class="crl.conf.gfx.data.GFXEffects" name="java.awt.Image[] load8x()" map="A"/>
  <method class="crl.conf.gfx.data.GFXEffects" name="java.awt.Image[] load4(int, int)" map="B"/>
  <method class="crl.conf.gfx.data.GFXEffects" name="java.awt.Image[] load1(int, int)" map="C"/>
  <method class="crl.conf.gfx.data.GFXEffects" name="java.awt.Image[] load8(int, int)" map="D"/>
  <method class="crl.conf.gfx.data.GFXEffects" name="java.awt.image.BufferedImage[] load(int, int, int, int)" map="A"/>
  <method class="crl.conf.gfx.data.GFXEffects" name="java.awt.image.BufferedImage[] load(int, int, int)" map="A"/>
  <class name="crl.conf.gfx.data.GFXCuts" map="B"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_F5" map="A"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_F4" map="B"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_F3" map="C"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_CHRIS" map="D"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_F2" map="E"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_F1" map="F"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_SOLIEYU" map="G"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_SOLIEYU_D" map="H"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="hashCuts" map="I"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="thus" map="J"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_MAIDEN" map="K"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_M6" map="L"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_M5" map="M"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_M4" map="N"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_M3" map="O"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_M2" map="P"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_M1" map="Q"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_MELDUCK" map="R"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_DRACULA" map="S"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_CLARA" map="T"/>
  <field class="crl.conf.gfx.data.GFXCuts" name="PRT_F6" map="U"/>
  <method class="crl.conf.gfx.data.GFXCuts" name="crl.ui.graphicsUI.GFXChat get(java.lang.String)" map="A"/>
  <method class="crl.conf.gfx.data.GFXCuts" name="void initializeSingleton()" map="A"/>
  <class name="crl.conf.gfx.data.GFXAppearances" map="C"/>
  <field class="crl.conf.gfx.data.GFXAppearances" name="defs" map="A"/>
  <field class="crl.conf.gfx.data.GFXAppearances" name="images" map="B"/>
  <field class="crl.conf.gfx.data.GFXAppearances" name="tileSetd" map="C"/>
  <field class="crl.conf.gfx.data.GFXAppearances" name="tileSet" map="D"/>
  <field class="crl.conf.gfx.data.GFXAppearances" name="tileSize" map="E"/>
  <method class="crl.conf.gfx.data.GFXAppearances" name="crl.ui.Appearance[] getAppearances()" map="A"/>
  <method class="crl.conf.gfx.data.GFXAppearances" name="crl.ui.graphicsUI.GFXAppearance createAppearance(java.lang.String, int, int)" map="A"/>
  <package name="crl.conf.console" map="B"/>
  <package name="crl.conf.console.data" map="A"/>
  <class name="crl.conf.console.data.CharEffects" map="A"/>
  <field class="crl.conf.console.data.CharEffects" name="effects" map="A"/>
  <method class="crl.conf.console.data.CharEffects" name="crl.ui.consoleUI.effects.CharEffect[] getEffects()" map="A"/>
  <class name="crl.conf.console.data.CharCuts" map="B"/>
  <field class="crl.conf.console.data.CharCuts" name="thus" map="A"/>
  <field class="crl.conf.console.data.CharCuts" name="hashCuts" map="B"/>
  <method class="crl.conf.console.data.CharCuts" name="void initializeSingleton()" map="A"/>
  <method class="crl.conf.console.data.CharCuts" name="crl.ui.consoleUI.cuts.CharChat get(java.lang.String)" map="A"/>
  <class name="crl.conf.console.data.CharAppearances" map="C"/>
  <field class="crl.conf.console.data.CharAppearances" name="defs" map="A"/>
  <method class="crl.conf.console.data.CharAppearances" name="crl.ui.Appearance[] getAppearances()" map="A"/>
  <package name="crl.ai" map="I"/>
  <package name="crl.ai.monster" map="A"/>
  <class name="crl.ai.monster.WanderToPlayerAI" map="A"/>
  <method class="crl.ai.monster.WanderToPlayerAI" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.ai.monster.WanderToPlayerAI" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.monster.WanderToPlayerAI" name="java.lang.String getID()" map="B"/>
  <class name="crl.ai.monster.StationaryAI" map="B"/>
  <method class="crl.ai.monster.StationaryAI" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.ai.monster.StationaryAI" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.monster.StationaryAI" name="java.lang.String getID()" map="B"/>
  <class name="crl.ai.monster.BasicMonsterAI" map="C"/>
  <field class="crl.ai.monster.BasicMonsterAI" name="isStationary" map="C"/>
  <field class="crl.ai.monster.BasicMonsterAI" name="changeDirection" map="D"/>
  <field class="crl.ai.monster.BasicMonsterAI" name="approachLimit" map="E"/>
  <field class="crl.ai.monster.BasicMonsterAI" name="waitPlayerRange" map="F"/>
  <field class="crl.ai.monster.BasicMonsterAI" name="chargeCounter" map="G"/>
  <field class="crl.ai.monster.BasicMonsterAI" name="lastDirection" map="H"/>
  <field class="crl.ai.monster.BasicMonsterAI" name="patrolRange" map="I"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="int getPatrolRange()" map="C"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="java.lang.String getID()" map="B"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="void setWaitPlayerRange(int)" map="A"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="void setPatrolRange(int)" map="B"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="void setStationary(boolean)" map="A"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="void setApproachLimit(int)" map="C"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="void setChangeDirection(boolean)" map="B"/>
  <method class="crl.ai.monster.BasicMonsterAI" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <class name="crl.ai.monster.RangedAI" map="D"/>
  <field class="crl.ai.monster.RangedAI" name="approachLimit" map="J"/>
  <method class="crl.ai.monster.RangedAI" name="void setApproachLimit(int)" map="D"/>
  <method class="crl.ai.monster.RangedAI" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.ai.monster.RangedAI" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.monster.RangedAI" name="java.lang.String getID()" map="B"/>
  <class name="crl.ai.monster.RangedAttack" map="E"/>
  <field class="crl.ai.monster.RangedAttack" name="attackType" map="A"/>
  <field class="crl.ai.monster.RangedAttack" name="attackMessage" map="B"/>
  <field class="crl.ai.monster.RangedAttack" name="summonMonsterId" map="C"/>
  <field class="crl.ai.monster.RangedAttack" name="effectType" map="D"/>
  <field class="crl.ai.monster.RangedAttack" name="chargeCounter" map="E"/>
  <field class="crl.ai.monster.RangedAttack" name="attackId" map="F"/>
  <field class="crl.ai.monster.RangedAttack" name="range" map="G"/>
  <field class="crl.ai.monster.RangedAttack" name="damage" map="H"/>
  <field class="crl.ai.monster.RangedAttack" name="frequency" map="I"/>
  <field class="crl.ai.monster.RangedAttack" name="effectID" map="J"/>
  <field class="crl.ai.monster.RangedAttack" name="statusEffect" map="K"/>
  <field class="crl.ai.monster.RangedAttack" name="effectWav" map="L"/>
  <method class="crl.ai.monster.RangedAttack" name="int getDamage()" map="A"/>
  <method class="crl.ai.monster.RangedAttack" name="void setSummonMonsterId(java.lang.String)" map="A"/>
  <method class="crl.ai.monster.RangedAttack" name="java.lang.String getEffectID()" map="B"/>
  <method class="crl.ai.monster.RangedAttack" name="int getFrequency()" map="C"/>
  <method class="crl.ai.monster.RangedAttack" name="java.lang.String getEffectType()" map="D"/>
  <method class="crl.ai.monster.RangedAttack" name="java.lang.String getAttackId()" map="E"/>
  <method class="crl.ai.monster.RangedAttack" name="void setEffectWav(java.lang.String)" map="B"/>
  <method class="crl.ai.monster.RangedAttack" name="int getRange()" map="F"/>
  <method class="crl.ai.monster.RangedAttack" name="java.lang.String getEffectWav()" map="G"/>
  <method class="crl.ai.monster.RangedAttack" name="java.lang.String getAttackMessage()" map="H"/>
  <method class="crl.ai.monster.RangedAttack" name="java.lang.String getStatusEffect()" map="I"/>
  <method class="crl.ai.monster.RangedAttack" name="int getChargeCounter()" map="J"/>
  <method class="crl.ai.monster.RangedAttack" name="java.lang.String getSummonMonsterId()" map="K"/>
  <method class="crl.ai.monster.RangedAttack" name="java.lang.String getAttackType()" map="L"/>
  <method class="crl.ai.monster.RangedAttack" name="void setChargeCounter(int)" map="A"/>
  <class name="crl.ai.monster.MonsterAI" map="F"/>
  <field class="crl.ai.monster.MonsterAI" name="rangedAttacks" map="B"/>
  <method class="crl.ai.monster.MonsterAI" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.ai.monster.MonsterAI" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.monster.MonsterAI" name="void setRangedAttacks(java.util.Vector)" map="A"/>
  <method class="crl.ai.monster.MonsterAI" name="java.lang.String getID()" map="B"/>
  <class name="crl.ai.SelectorFactory" map="A"/>
  <field class="crl.ai.SelectorFactory" name="definitions" map="A"/>
  <field class="crl.ai.SelectorFactory" name="singleton" map="B"/>
  <method class="crl.ai.SelectorFactory" name="crl.ai.SelectorFactory getSelectorFactory()" map="A"/>
  <method class="crl.ai.SelectorFactory" name="crl.ai.ActionSelector getSelector(java.lang.String)" map="A"/>
  <method class="crl.ai.SelectorFactory" name="void addDefinition(crl.ai.ActionSelector)" map="A"/>
  <method class="crl.ai.SelectorFactory" name="crl.ai.ActionSelector createSelector(java.lang.String)" map="B"/>
  <class name="crl.ai.ActionSelector" map="B"/>
  <method class="crl.ai.ActionSelector" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.ai.ActionSelector" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.ActionSelector" name="java.lang.String getID()" map="B"/>
  <package name="crl.ui" map="J"/>
  <package name="crl.ui.graphicsUI" map="A"/>
  <package name="crl.ui.graphicsUI.effects" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXMeleeEffect" map="A"/>
  <field class="crl.ui.graphicsUI.effects.GFXMeleeEffect" name="missile" map="x"/>
  <method class="crl.ui.graphicsUI.effects.GFXMeleeEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXMeleeEffect" name="void setMissile(java.awt.Image[])" map="D"/>
  <class name="crl.ui.graphicsUI.effects.GFXCircleBlastEffect" map="B"/>
  <field class="crl.ui.graphicsUI.effects.GFXCircleBlastEffect" name="blastColor" map="c"/>
  <field class="crl.ui.graphicsUI.effects.GFXCircleBlastEffect" name="ADVANCE" map="d"/>
  <field class="crl.ui.graphicsUI.effects.GFXCircleBlastEffect" name="si" map="e"/>
  <method class="crl.ui.graphicsUI.effects.GFXCircleBlastEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXEffect" map="C"/>
  <method class="crl.ui.graphicsUI.effects.GFXEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXIconEffect" map="D"/>
  <field class="crl.ui.graphicsUI.effects.GFXIconEffect" name="tile" map="f"/>
  <method class="crl.ui.graphicsUI.effects.GFXIconEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXFlashEffect" map="E"/>
  <field class="crl.ui.graphicsUI.effects.GFXFlashEffect" name="color" map="g"/>
  <method class="crl.ui.graphicsUI.effects.GFXFlashEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXAnimatedEffect" map="F"/>
  <field class="crl.ui.graphicsUI.effects.GFXAnimatedEffect" name="xoff" map="h"/>
  <field class="crl.ui.graphicsUI.effects.GFXAnimatedEffect" name="yoff" map="i"/>
  <field class="crl.ui.graphicsUI.effects.GFXAnimatedEffect" name="frames" map="j"/>
  <method class="crl.ui.graphicsUI.effects.GFXAnimatedEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXSplashEffect" map="G"/>
  <field class="crl.ui.graphicsUI.effects.GFXSplashEffect" name="tiles" map="k"/>
  <field class="crl.ui.graphicsUI.effects.GFXSplashEffect" name="si" map="l"/>
  <method class="crl.ui.graphicsUI.effects.GFXSplashEffect" name="void drawCirclePixels(crl.ui.graphicsUI.GFXUserInterface, sz.util.Position, int, int, java.awt.Image, int)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXSplashEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXSplashEffect" name="void drawCircle(crl.ui.graphicsUI.GFXUserInterface, sz.util.Position, int, java.awt.Image, int)" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXSequentialEffect" map="H"/>
  <field class="crl.ui.graphicsUI.effects.GFXSequentialEffect" name="tiles" map="m"/>
  <field class="crl.ui.graphicsUI.effects.GFXSequentialEffect" name="sequence" map="n"/>
  <method class="crl.ui.graphicsUI.effects.GFXSequentialEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXAnimatedMissileEffect" map="I"/>
  <field class="crl.ui.graphicsUI.effects.GFXAnimatedMissileEffect" name="missile" map="r"/>
  <method class="crl.ui.graphicsUI.effects.GFXAnimatedMissileEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXAnimatedMissileEffect" name="void setMissile(java.awt.Image[])" map="A"/>
  <class name="crl.ui.graphicsUI.effects.GFXDirectionalEffect" map="J"/>
  <field class="crl.ui.graphicsUI.effects.GFXDirectionalEffect" name="direction" map="v"/>
  <field class="crl.ui.graphicsUI.effects.GFXDirectionalEffect" name="depth" map="w"/>
  <method class="crl.ui.graphicsUI.effects.GFXDirectionalEffect" name="void set(sz.util.Position, int, int)" map="B"/>
  <class name="crl.ui.graphicsUI.effects.GFXDirectionalMissileEffect" map="K"/>
  <field class="crl.ui.graphicsUI.effects.GFXDirectionalMissileEffect" name="missile" map="s"/>
  <method class="crl.ui.graphicsUI.effects.GFXDirectionalMissileEffect" name="int solveDirection(sz.util.Position, sz.util.Position)" map="B"/>
  <method class="crl.ui.graphicsUI.effects.GFXDirectionalMissileEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXDirectionalMissileEffect" name="void setMissile(java.awt.Image[])" map="B"/>
  <class name="crl.ui.graphicsUI.effects.GFXDirectedEffect" map="L"/>
  <field class="crl.ui.graphicsUI.effects.GFXDirectedEffect" name="startPosition" map="o"/>
  <field class="crl.ui.graphicsUI.effects.GFXDirectedEffect" name="depth" map="p"/>
  <field class="crl.ui.graphicsUI.effects.GFXDirectedEffect" name="effectLine" map="q"/>
  <method class="crl.ui.graphicsUI.effects.GFXDirectedEffect" name="int getDepth()" map="G"/>
  <method class="crl.ui.graphicsUI.effects.GFXDirectedEffect" name="void setDepth(int)" map="H"/>
  <method class="crl.ui.graphicsUI.effects.GFXDirectedEffect" name="void set(sz.util.Position, sz.util.Position, sz.util.Position, int)" map="B"/>
  <class name="crl.ui.graphicsUI.effects.GFXEffectFactory" map="M"/>
  <field class="crl.ui.graphicsUI.effects.GFXEffectFactory" name="effects" map="C"/>
  <method class="crl.ui.graphicsUI.effects.GFXEffectFactory" name="crl.ui.effects.Effect createLocatedEffect(sz.util.Position, java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXEffectFactory" name="crl.ui.effects.Effect createDirectionalEffect(sz.util.Position, int, int, java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXEffectFactory" name="crl.ui.effects.Effect createDirectedEffect(sz.util.Position, sz.util.Position, java.lang.String, int)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXEffectFactory" name="void setEffects(crl.ui.effects.Effect[])" map="B"/>
  <class name="crl.ui.graphicsUI.effects.GFXBeamEffect" map="N"/>
  <field class="crl.ui.graphicsUI.effects.GFXBeamEffect" name="missile" map="t"/>
  <field class="crl.ui.graphicsUI.effects.GFXBeamEffect" name="misColor" map="u"/>
  <method class="crl.ui.graphicsUI.effects.GFXBeamEffect" name="void drawEffect(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <method class="crl.ui.graphicsUI.effects.GFXBeamEffect" name="void setMissile(java.awt.Image[])" map="C"/>
  <package name="crl.ui.graphicsUI.components" map="B"/>
  <class name="crl.ui.graphicsUI.components.GFXMenuBox" map="A"/>
  <method class="crl.ui.graphicsUI.components.GFXMenuBox" name="void setTitle(java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.components.GFXMenuBox" name="void setPrompt(java.lang.String)" map="B"/>
  <method class="crl.ui.graphicsUI.components.GFXMenuBox" name="java.lang.Object getSelection()" map="A"/>
  <method class="crl.ui.graphicsUI.components.GFXMenuBox" name="void setMenuItems(java.util.Vector)" map="A"/>
  <class name="crl.ui.graphicsUI.components.GFXButton" map="B"/>
  <field class="crl.ui.graphicsUI.components.GFXButton" name="habilitado" map="A"/>
  <field class="crl.ui.graphicsUI.components.GFXButton" name="imgActivado" map="B"/>
  <field class="crl.ui.graphicsUI.components.GFXButton" name="imgHover" map="C"/>
  <field class="crl.ui.graphicsUI.components.GFXButton" name="imgDesactivado" map="D"/>
  <field class="crl.ui.graphicsUI.components.GFXButton" name="objListeners" map="E"/>
  <field class="crl.ui.graphicsUI.components.GFXButton" name="hovering" map="F"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void addActionListener(java.awt.event.ActionListener)" map="A"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void fireActionEvent()" map="A"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="crl.ui.graphicsUI.components.GFXButton" name="void setEnabled(boolean)" map="setEnabled"/>
  <class name="crl.ui.graphicsUI.components.GFXInventoryBox" map="C"/>
  <field class="crl.ui.graphicsUI.components.GFXInventoryBox" name="player" map="A"/>
  <class name="crl.ui.graphicsUI.components.GFXChatBox" map="D"/>
  <field class="crl.ui.graphicsUI.components.GFXChatBox" name="lblName" map="K"/>
  <field class="crl.ui.graphicsUI.components.GFXChatBox" name="txtText" map="L"/>
  <field class="crl.ui.graphicsUI.components.GFXChatBox" name="lblImageIcon" map="M"/>
  <method class="crl.ui.graphicsUI.components.GFXChatBox" name="void set(java.awt.Image, java.lang.String, java.lang.String)" map="A"/>
  <class name="crl.ui.graphicsUI.CharKey" map="A"/>
  <field class="crl.ui.graphicsUI.CharKey" name="COMILLAS" map="A"/>
  <field class="crl.ui.graphicsUI.CharKey" name="ESC" map="B"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N9" map="C"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N8" map="D"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N7" map="E"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N6" map="F"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N5" map="G"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N4" map="H"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N3" map="I"/>
  <field class="crl.ui.graphicsUI.CharKey" name="APOSTROPHE" map="J"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N2" map="K"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N1" map="L"/>
  <field class="crl.ui.graphicsUI.CharKey" name="LCTRL" map="M"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N0" map="N"/>
  <field class="crl.ui.graphicsUI.CharKey" name="UNDERLINE" map="O"/>
  <field class="crl.ui.graphicsUI.CharKey" name="LALT" map="P"/>
  <field class="crl.ui.graphicsUI.CharKey" name="OPENCURLYBRACETS" map="Q"/>
  <field class="crl.ui.graphicsUI.CharKey" name="SPACE" map="R"/>
  <field class="crl.ui.graphicsUI.CharKey" name="COMMA" map="S"/>
  <field class="crl.ui.graphicsUI.CharKey" name="BACKSPACE" map="T"/>
  <field class="crl.ui.graphicsUI.CharKey" name="UARROW" map="U"/>
  <field class="crl.ui.graphicsUI.CharKey" name="RALT" map="V"/>
  <field class="crl.ui.graphicsUI.CharKey" name="EXPONENCIATION" map="W"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F9" map="X"/>
  <field class="crl.ui.graphicsUI.CharKey" name="code" map="Y"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F8" map="Z"/>
  <field class="crl.ui.graphicsUI.CharKey" name="ARROBE" map="_"/>
  <field class="crl.ui.graphicsUI.CharKey" name="PERCENTAGE" map="a"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F7" map="b"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F6" map="c"/>
  <field class="crl.ui.graphicsUI.CharKey" name="z" map="d"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F5" map="e"/>
  <field class="crl.ui.graphicsUI.CharKey" name="y" map="f"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F4" map="g"/>
  <field class="crl.ui.graphicsUI.CharKey" name="x" map="h"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F3" map="i"/>
  <field class="crl.ui.graphicsUI.CharKey" name="w" map="j"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F2" map="k"/>
  <field class="crl.ui.graphicsUI.CharKey" name="v" map="l"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F1" map="m"/>
  <field class="crl.ui.graphicsUI.CharKey" name="u" map="n"/>
  <field class="crl.ui.graphicsUI.CharKey" name="t" map="o"/>
  <field class="crl.ui.graphicsUI.CharKey" name="s" map="p"/>
  <field class="crl.ui.graphicsUI.CharKey" name="r" map="q"/>
  <field class="crl.ui.graphicsUI.CharKey" name="CTRL" map="r"/>
  <field class="crl.ui.graphicsUI.CharKey" name="q" map="s"/>
  <field class="crl.ui.graphicsUI.CharKey" name="p" map="t"/>
  <field class="crl.ui.graphicsUI.CharKey" name="o" map="u"/>
  <field class="crl.ui.graphicsUI.CharKey" name="n" map="v"/>
  <field class="crl.ui.graphicsUI.CharKey" name="m" map="w"/>
  <field class="crl.ui.graphicsUI.CharKey" name="l" map="x"/>
  <field class="crl.ui.graphicsUI.CharKey" name="LESSTHAN" map="y"/>
  <field class="crl.ui.graphicsUI.CharKey" name="k" map="z"/>
  <field class="crl.ui.graphicsUI.CharKey" name="MONEY" map="&#x00a2;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="j" map="&#x00a3;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="i" map="&#x00a4;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="h" map="&#x00a5;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="SLASH" map="&#x00aa;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="g" map="&#x00b5;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="f" map="&#x00ba;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="TAB" map="&#x00c0;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="e" map="&#x00c1;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="d" map="&#x00c2;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="PLUS" map="&#x00c3;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="c" map="&#x00c4;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="b" map="&#x00c5;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="QUESTION" map="&#x00c6;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="a" map="&#x00c7;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="OPENSHARPBRACETS" map="&#x00c8;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="EXCLAMATION" map="&#x00c9;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="OPENPARENTHESIS" map="&#x00ca;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="CLOSECURLYBRACETS" map="&#x00cb;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="DELETE" map="&#x00cc;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="Z" map="&#x00cd;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="Y" map="&#x00ce;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="BACKSLASH" map="&#x00cf;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="NONE" map="&#x00d0;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="X" map="&#x00d1;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="W" map="&#x00d2;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="HOME" map="&#x00d3;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="V" map="&#x00d4;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="U" map="&#x00d5;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="T" map="&#x00d6;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="S" map="&#x00d8;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="R" map="&#x00d9;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="Q" map="&#x00da;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="P" map="&#x00db;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="O" map="&#x00dc;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F12" map="&#x00dd;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="N" map="&#x00de;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="CURLYMINUS" map="&#x00df;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="MORETHAN" map="&#x00e0;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F11" map="&#x00e1;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="ASTERISK" map="&#x00e2;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="M" map="&#x00e3;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F10" map="&#x00e4;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="L" map="&#x00e5;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="DOT" map="&#x00e6;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="AMPERSAND" map="&#x00e7;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="K" map="&#x00e8;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="J" map="&#x00e9;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="CLOSEPARENTHESIS" map="&#x00ea;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="I" map="&#x00eb;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="H" map="&#x00ec;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="G" map="&#x00ed;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="PAGEDOWN" map="&#x00ee;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="F" map="&#x00ef;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="E" map="&#x00f0;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="D" map="&#x00f1;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="SEMICOLON" map="&#x00f2;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="C" map="&#x00f3;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="B" map="&#x00f4;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="A" map="&#x00f5;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="PAGEUP" map="&#x00f6;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="MINUS" map="&#x00f8;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="DARROW" map="&#x00f9;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="OR" map="&#x00fa;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="ENTER" map="&#x00fb;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="RARROW" map="&#x00fc;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="END" map="&#x00fd;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="CLOSESHARPBRACETS" map="&#x00fe;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="COLON" map="&#x00ff;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="mirrors" map="&#x0100;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="LARROW" map="&#x0101;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="BACKAPOSTROPHE" map="&#x0102;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="INSERT" map="&#x0103;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="RSHIFT" map="&#x0104;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="RCTRL" map="&#x0105;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="LSHIFT" map="&#x0106;"/>
  <field class="crl.ui.graphicsUI.CharKey" name="EQUALS" map="&#x0107;"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isDownRightArrow()" map="A"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isSelfArrow()" map="B"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isDownLeftArrow()" map="C"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isMetaKey()" map="D"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isDownArrow()" map="E"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isAlphaNumeric()" map="F"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isUpArrow()" map="G"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isRightArrow()" map="H"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isLeftArrow()" map="I"/>
  <method class="crl.ui.graphicsUI.CharKey" name="java.lang.String toString()" map="toString"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isUpRightArrow()" map="J"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isUpLeftArrow()" map="K"/>
  <method class="crl.ui.graphicsUI.CharKey" name="boolean isArrow()" map="L"/>
  <class name="crl.ui.graphicsUI.SimpleAddornedBorderPanel" map="B"/>
  <field class="crl.ui.graphicsUI.SimpleAddornedBorderPanel" name="IN_COLOR" map="A"/>
  <field class="crl.ui.graphicsUI.SimpleAddornedBorderPanel" name="TRANSPARENT_BLUE" map="B"/>
  <field class="crl.ui.graphicsUI.SimpleAddornedBorderPanel" name="OUT_COLOR" map="C"/>
  <method class="crl.ui.graphicsUI.SimpleAddornedBorderPanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <class name="crl.ui.graphicsUI.AddornedBorderPanel" map="C"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="borderWidth" map="A"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="UPRIGHT" map="B"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="IN_COLOR" map="C"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="UPLEFT" map="D"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="TRANSPARENT_BLUE" map="E"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="borderHeight" map="F"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="OUT_COLOR" map="G"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="DOWNRIGHT" map="H"/>
  <field class="crl.ui.graphicsUI.AddornedBorderPanel" name="DOWNLEFT" map="I"/>
  <method class="crl.ui.graphicsUI.AddornedBorderPanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <class name="crl.ui.graphicsUI.GFXPlayerGenerator" map="D"/>
  <field class="crl.ui.graphicsUI.GFXPlayerGenerator" name="IMG_GENERATOR" map="I"/>
  <field class="crl.ui.graphicsUI.GFXPlayerGenerator" name="txtClassDescription" map="J"/>
  <field class="crl.ui.graphicsUI.GFXPlayerGenerator" name="si" map="K"/>
  <method class="crl.ui.graphicsUI.GFXPlayerGenerator" name="crl.player.Player generatePlayer()" map="A"/>
  <class name="crl.ui.graphicsUI.SwingInformBox" map="E"/>
  <method class="crl.ui.graphicsUI.SwingInformBox" name="void clear()" map="A"/>
  <method class="crl.ui.graphicsUI.SwingInformBox" name="void addText(java.lang.String)" map="A"/>
  <class name="crl.ui.graphicsUI.SwingSystemInterface$2" map="2"/>
  <field class="crl.ui.graphicsUI.SwingSystemInterface$2" name="this$0" map="this$0"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface$2" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface$2" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface$2" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface$2" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface$2" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="crl.ui.graphicsUI.SwingSystemInterface$1" map="1"/>
  <field class="crl.ui.graphicsUI.SwingSystemInterface$1" name="this$0" map="this$0"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface$1" name="void mouseDragged(java.awt.event.MouseEvent)" map="mouseDragged"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface$1" name="void mouseMoved(java.awt.event.MouseEvent)" map="mouseMoved"/>
  <class name="crl.ui.graphicsUI.SwingSystemInterface" map="F"/>
  <field class="crl.ui.graphicsUI.SwingSystemInterface" name="posClic" map="A"/>
  <field class="crl.ui.graphicsUI.SwingSystemInterface" name="images" map="B"/>
  <field class="crl.ui.graphicsUI.SwingSystemInterface" name="sip" map="C"/>
  <field class="crl.ui.graphicsUI.SwingSystemInterface" name="caretPosition" map="D"/>
  <field class="crl.ui.graphicsUI.SwingSystemInterface" name="frameMain" map="E"/>
  <field class="crl.ui.graphicsUI.SwingSystemInterface" name="aStrokeInformer" map="F"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="java.awt.Point access$1(crl.ui.graphicsUI.SwingSystemInterface)" map="access$1"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void setVisible(boolean)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="crl.ui.graphicsUI.CharKey inkey()" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void cls()" map="B"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void drawImageCC(int, int, java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void flash(java.awt.Color)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void printAtPixel(int, int, java.lang.String, java.awt.Color)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void setColor(java.awt.Color)" map="B"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="java.awt.Graphics2D getGraphics2D()" map="C"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void drawImageCC(int, int, java.awt.Image)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void access$2(crl.ui.graphicsUI.SwingSystemInterface, java.awt.Point)" map="access$2"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void refresh()" map="D"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void restore()" map="E"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void setTitle(java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void drawImage(java.lang.String)" map="B"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void drawImage(int, int, java.lang.String)" map="B"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void waitKey(int)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void saveBuffer()" map="F"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void recoverFocus()" map="G"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void drawImage(int, int, java.awt.Image)" map="B"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void print(int, int, java.lang.String, java.awt.Color)" map="B"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void add(java.awt.Component)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void setIcon(java.awt.Image)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void run()" map="run"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="javax.swing.JFrame access$0(crl.ui.graphicsUI.SwingSystemInterface)" map="access$0"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void remove(java.awt.Component)" map="B"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="java.lang.String input(int, int, java.awt.Color, int)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void drawImage(java.awt.Image)" map="B"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="java.awt.Font getFont()" map="H"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void printAtPixel(int, int, java.lang.String)" map="C"/>
  <method class="crl.ui.graphicsUI.SwingSystemInterface" name="void setFont(java.awt.Font)" map="A"/>
  <class name="crl.ui.graphicsUI.SwingInterfacePanel" map="G"/>
  <field class="crl.ui.graphicsUI.SwingInterfacePanel" name="bufferGraphics" map="A"/>
  <field class="crl.ui.graphicsUI.SwingInterfacePanel" name="font" map="B"/>
  <field class="crl.ui.graphicsUI.SwingInterfacePanel" name="color" map="C"/>
  <field class="crl.ui.graphicsUI.SwingInterfacePanel" name="bufferImage" map="D"/>
  <field class="crl.ui.graphicsUI.SwingInterfacePanel" name="backImage" map="E"/>
  <field class="crl.ui.graphicsUI.SwingInterfacePanel" name="backGraphics" map="F"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void setFontFace(java.awt.Font)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void drawImage(java.awt.Image)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void print(int, int, java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void drawImage(int, int, java.awt.Image)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void restore()" map="A"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="java.awt.Component add(java.awt.Component)" map="add"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void flash(java.awt.Color)" map="A"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void setColor(java.awt.Color)" map="B"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="java.awt.Font getFontFace()" map="B"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void cls()" map="C"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="java.awt.Graphics2D getCurrentGraphics()" map="D"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void saveBuffer()" map="E"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void init()" map="F"/>
  <method class="crl.ui.graphicsUI.SwingInterfacePanel" name="void print(int, int, java.lang.String, java.awt.Color)" map="A"/>
  <class name="crl.ui.graphicsUI.AddornedBorderTextArea" map="H"/>
  <field class="crl.ui.graphicsUI.AddornedBorderTextArea" name="textArea" map="J"/>
  <method class="crl.ui.graphicsUI.AddornedBorderTextArea" name="void setForeground(java.awt.Color)" map="setForeground"/>
  <method class="crl.ui.graphicsUI.AddornedBorderTextArea" name="void setBackground(java.awt.Color)" map="setBackground"/>
  <method class="crl.ui.graphicsUI.AddornedBorderTextArea" name="void setFont(java.awt.Font)" map="setFont"/>
  <method class="crl.ui.graphicsUI.AddornedBorderTextArea" name="void setText(java.lang.String)" map="A"/>
  <class name="crl.ui.graphicsUI.StrokeInformer" map="I"/>
  <field class="crl.ui.graphicsUI.StrokeInformer" name="bufferCode" map="A"/>
  <field class="crl.ui.graphicsUI.StrokeInformer" name="keyListener" map="B"/>
  <method class="crl.ui.graphicsUI.StrokeInformer" name="int getInkeyBuffer()" map="A"/>
  <method class="crl.ui.graphicsUI.StrokeInformer" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <method class="crl.ui.graphicsUI.StrokeInformer" name="int charCode(java.awt.event.KeyEvent)" map="A"/>
  <method class="crl.ui.graphicsUI.StrokeInformer" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <method class="crl.ui.graphicsUI.StrokeInformer" name="void informKey(java.lang.Thread)" map="A"/>
  <method class="crl.ui.graphicsUI.StrokeInformer" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="crl.ui.graphicsUI.SimpleAddornedBorderTextArea" map="J"/>
  <field class="crl.ui.graphicsUI.SimpleAddornedBorderTextArea" name="textArea" map="D"/>
  <method class="crl.ui.graphicsUI.SimpleAddornedBorderTextArea" name="void setForeground(java.awt.Color)" map="setForeground"/>
  <method class="crl.ui.graphicsUI.SimpleAddornedBorderTextArea" name="void setBackground(java.awt.Color)" map="setBackground"/>
  <method class="crl.ui.graphicsUI.SimpleAddornedBorderTextArea" name="void setFont(java.awt.Font)" map="setFont"/>
  <method class="crl.ui.graphicsUI.SimpleAddornedBorderTextArea" name="void setText(java.lang.String)" map="A"/>
  <class name="crl.ui.graphicsUI.GFXChat" map="K"/>
  <field class="crl.ui.graphicsUI.GFXChat" name="portraits" map="A"/>
  <field class="crl.ui.graphicsUI.GFXChat" name="conversations" map="B"/>
  <field class="crl.ui.graphicsUI.GFXChat" name="names" map="C"/>
  <method class="crl.ui.graphicsUI.GFXChat" name="void add(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXChat" name="int getConversations()" map="A"/>
  <method class="crl.ui.graphicsUI.GFXChat" name="void add(java.lang.String, java.lang.String, java.awt.Image)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXChat" name="java.lang.String getName(int)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXChat" name="java.lang.String getConversation(int)" map="B"/>
  <method class="crl.ui.graphicsUI.GFXChat" name="java.awt.Image getPortrait(int)" map="C"/>
  <class name="crl.ui.graphicsUI.GFXUserInterface$UISelector" map="_A"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface$UISelector" name="this$0" map="this$0"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface$UISelector" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface$UISelector" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface$UISelector" name="java.lang.String getID()" map="B"/>
  <class name="crl.ui.graphicsUI.GFXUserInterface" map="L"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_REDFOUNTAIN_MINIMAP" map="&#x00c1;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="FNT_MESSAGEBOX" map="&#x00c2;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="POS_LEVELDESC_Y" map="&#x00c3;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="TILE_LINE_STEPS" map="&#x00c4;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_YELLOWFOUNTAIN_MINIMAP" map="&#x00c5;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="POS_LEVELDESC_X" map="&#x00c6;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_REDPOOL_MINIMAP" map="&#x00c7;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="IMG_STATUSSCR_BGROUND" map="&#x00c8;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="xrange" map="&#x00c9;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="messageBox" map="&#x00ca;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="UPLEFTBORDER" map="&#x00cb;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="lockedMonster" map="&#x00cc;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="yrange" map="&#x00cd;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_YELLOWPOOL_MINIMAP" map="&#x00ce;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="PC_POS" map="&#x00cf;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="FOVMask" map="&#x00d0;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="messageHistory" map="&#x00d1;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="WEAPONCODE" map="&#x00d2;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_INVENTORY_BORDER_OUT" map="&#x00d3;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_INVENTORY_BACKGROUND" map="&#x00d4;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="eraseOnArrival" map="&#x00d5;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_MSGBOX_ACTIVE" map="&#x00d6;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="GADGETSIZE" map="&#x00d8;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="selector" map="&#x00d9;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="TILE_SCAN" map="&#x00da;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="IMG_ICON" map="&#x00db;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_INVENTORY_BORDER_IN" map="&#x00dc;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="TILESIZE" map="&#x00dd;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="COLOR_MSGBOX_INACTIVE" map="&#x00de;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="si" map="&#x00df;"/>
  <field class="crl.ui.graphicsUI.GFXUserInterface" name="TILE_LINE_AIM" map="&#x00e0;"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void run()" map="run"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="java.util.Vector getMessageBuffer()" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="int toIntDirection(crl.ui.graphicsUI.CharKey)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void addMessage(crl.actor.Message)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void drawEffect(crl.ui.effects.Effect)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.player.Player access$3(crl.ui.graphicsUI.GFXUserInterface)" map="access$3"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.item.Item pickUnderlyingItem(java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void processSave()" map="B"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.action.Action access$6(crl.ui.graphicsUI.GFXUserInterface)" map="access$6"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.action.Action showSkills()" map="C"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="sz.util.Position pickPosition(java.lang.String)" map="B"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void processQuit()" map="D"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="boolean prompt()" map="E"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="boolean isOnFOVMask(int, int)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void drawStepsTo(int, int, java.awt.Image, int)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.item.Item pickEquipedItem(java.lang.String)" map="C"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="java.awt.Rectangle getRectangle(java.lang.String)" map="I"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void showMessage(java.lang.String)" map="D"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="boolean access$0(crl.ui.graphicsUI.GFXUserInterface)" map="access$0"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void showMessageHistory()" map="F"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void setTargets(crl.action.Action)" map="B"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.item.Item pickItem(java.lang.String)" map="E"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.action.Action showInventory()" map="G"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void waitKey()" map="V"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="int pickDirection(java.lang.String)" map="F"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void drawLevel()" map="W"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void doLook()" map="I"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void refresh()" map="J"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.ai.ActionSelector getSelector()" map="K"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void showSystemMessage(java.lang.String)" map="G"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.action.Action access$4(crl.ui.graphicsUI.GFXUserInterface)" map="access$4"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="sz.util.Position getNearestMonsterPosition()" map="X"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="sz.util.Position getAbsolutePosition(sz.util.Position)" map="C"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void initProperties(java.util.Properties)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.action.Action selectCommand(crl.ui.graphicsUI.CharKey)" map="B"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.ui.graphicsUI.SwingSystemInterface access$1(crl.ui.graphicsUI.GFXUserInterface)" map="access$1"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.action.Action access$2(crl.ui.graphicsUI.GFXUserInterface, crl.ui.graphicsUI.CharKey)" map="access$2"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.action.Action access$8(crl.ui.graphicsUI.GFXUserInterface, int)" map="access$8"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void access$7(crl.ui.graphicsUI.GFXUserInterface, crl.action.Action)" map="access$7"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="boolean isDisplaying(crl.actor.Actor)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void init(crl.ui.graphicsUI.SwingSystemInterface, crl.ui.UserAction[], crl.ui.UserCommand[], crl.action.Action, crl.action.Action, crl.action.Action, java.util.Properties)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="int toIntDirection(sz.util.Position)" map="D"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void examineLevelMap()" map="Y"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="crl.action.Action access$5(crl.ui.graphicsUI.GFXUserInterface)" map="access$5"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void commandSelected(int)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="int inte(java.lang.String)" map="J"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void showPlayerStats()" map="N"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="boolean insideViewPort(sz.util.Position)" map="E"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="void drawPlayerStatus()" map="Z"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="java.awt.Color getColor(java.lang.String)" map="K"/>
  <method class="crl.ui.graphicsUI.GFXUserInterface" name="boolean insideViewPort(int, int)" map="C"/>
  <class name="crl.ui.graphicsUI.GFXAppearance" map="M"/>
  <field class="crl.ui.graphicsUI.GFXAppearance" name="superHeight" map="U"/>
  <field class="crl.ui.graphicsUI.GFXAppearance" name="img" map="V"/>
  <field class="crl.ui.graphicsUI.GFXAppearance" name="superWidth" map="W"/>
  <field class="crl.ui.graphicsUI.GFXAppearance" name="darkniteImage" map="X"/>
  <field class="crl.ui.graphicsUI.GFXAppearance" name="niteImage" map="Y"/>
  <field class="crl.ui.graphicsUI.GFXAppearance" name="darkImage" map="Z"/>
  <method class="crl.ui.graphicsUI.GFXAppearance" name="java.awt.Image getImage()" map="E"/>
  <method class="crl.ui.graphicsUI.GFXAppearance" name="int getSuperWidth()" map="F"/>
  <method class="crl.ui.graphicsUI.GFXAppearance" name="int getSuperHeight()" map="G"/>
  <method class="crl.ui.graphicsUI.GFXAppearance" name="java.awt.Image getNiteImage()" map="H"/>
  <method class="crl.ui.graphicsUI.GFXAppearance" name="java.awt.Image getDarkImage()" map="I"/>
  <method class="crl.ui.graphicsUI.GFXAppearance" name="java.awt.Image getDarkniteImage()" map="J"/>
  <class name="crl.ui.graphicsUI.GFXDisplay" map="N"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="FNT_TEXT" map="C"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_FRAME" map="D"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="COLOR_BOLD" map="E"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_RESUME" map="F"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_ENDGAME" map="G"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="TRANSPARENT_BLUE" map="H"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="addornedTextArea" map="I"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="si" map="J"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="FNT_TITLE" map="K"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_LEVEL_UP" map="L"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_HELP" map="M"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_HISCORES" map="N"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_PROLOGUE" map="O"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="FNT_DIALOGUEIN" map="P"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="FNT_MONO" map="Q"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_TITLE" map="R"/>
  <field class="crl.ui.graphicsUI.GFXDisplay" name="IMG_SAVED" map="S"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void showTextBox(java.lang.String, int, int, int, int, java.awt.Font)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="java.awt.Color getColor(java.lang.String)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void showTextBox(java.lang.String, int, int, int, int)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void initProperties(java.util.Properties)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="int inte(java.lang.String)" map="B"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void showHelp()" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="int showTitleScreen()" map="B"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void showScreen(java.lang.Object)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void showHiscores(crl.player.HiScore[])" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="boolean showResumeScreen(crl.player.Player)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="crl.player.advancements.Advancement levelUp(crl.player.Player)" map="B"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void init(crl.ui.graphicsUI.SwingSystemInterface)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="javax.swing.JTextArea createTempArea(int, int, int, int)" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="int showSavedGames(java.io.File[])" map="A"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void showEndgame(crl.player.Player)" map="C"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="int readAlphaToNumber(int)" map="B"/>
  <method class="crl.ui.graphicsUI.GFXDisplay" name="void showIntro(crl.player.Player)" map="D"/>
  <package name="crl.ui.consoleUI" map="B"/>
  <package name="crl.ui.consoleUI.cuts" map="A"/>
  <class name="crl.ui.consoleUI.cuts.CharChat" map="A"/>
  <field class="crl.ui.consoleUI.cuts.CharChat" name="conversations" map="A"/>
  <field class="crl.ui.consoleUI.cuts.CharChat" name="names" map="B"/>
  <method class="crl.ui.consoleUI.cuts.CharChat" name="void add(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.ui.consoleUI.cuts.CharChat" name="int getConversations()" map="A"/>
  <method class="crl.ui.consoleUI.cuts.CharChat" name="java.lang.String getName(int)" map="A"/>
  <method class="crl.ui.consoleUI.cuts.CharChat" name="java.lang.String getConversation(int)" map="B"/>
  <package name="crl.ui.consoleUI.effects" map="B"/>
  <class name="crl.ui.consoleUI.effects.CharDirectedEffect" map="A"/>
  <field class="crl.ui.consoleUI.effects.CharDirectedEffect" name="depth" map="D"/>
  <field class="crl.ui.consoleUI.effects.CharDirectedEffect" name="effectLine" map="E"/>
  <method class="crl.ui.consoleUI.effects.CharDirectedEffect" name="int getDepth()" map="D"/>
  <method class="crl.ui.consoleUI.effects.CharDirectedEffect" name="void setDepth(int)" map="B"/>
  <method class="crl.ui.consoleUI.effects.CharDirectedEffect" name="void set(sz.util.Position, sz.util.Position, sz.util.Position, int)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharIconMissileEffect" map="B"/>
  <field class="crl.ui.consoleUI.effects.CharIconMissileEffect" name="missile" map="F"/>
  <field class="crl.ui.consoleUI.effects.CharIconMissileEffect" name="misColor" map="G"/>
  <method class="crl.ui.consoleUI.effects.CharIconMissileEffect" name="void setMissile(char)" map="A"/>
  <method class="crl.ui.consoleUI.effects.CharIconMissileEffect" name="void setMisColor(int)" map="C"/>
  <method class="crl.ui.consoleUI.effects.CharIconMissileEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharEffect" map="C"/>
  <method class="crl.ui.consoleUI.effects.CharEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharAnimatedMissileEffect" map="D"/>
  <field class="crl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="missile" map="H"/>
  <field class="crl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="misColor" map="I"/>
  <method class="crl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="void setMisColor(int)" map="D"/>
  <method class="crl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="void setMissile(java.lang.String)" map="A"/>
  <method class="crl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharDirectionalMissileEffect" map="E"/>
  <field class="crl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="missile" map="J"/>
  <field class="crl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="misColor" map="K"/>
  <method class="crl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="void setMisColor(int)" map="E"/>
  <method class="crl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="void setMissile(java.lang.String)" map="B"/>
  <method class="crl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="int solveDirection(sz.util.Position, sz.util.Position)" map="A"/>
  <method class="crl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharAnimatedEffect" map="F"/>
  <field class="crl.ui.consoleUI.effects.CharAnimatedEffect" name="color" map="N"/>
  <field class="crl.ui.consoleUI.effects.CharAnimatedEffect" name="frames" map="O"/>
  <method class="crl.ui.consoleUI.effects.CharAnimatedEffect" name="java.lang.String getFrames()" map="E"/>
  <method class="crl.ui.consoleUI.effects.CharAnimatedEffect" name="void setColor(int)" map="G"/>
  <method class="crl.ui.consoleUI.effects.CharAnimatedEffect" name="void setFrames(java.lang.String)" map="D"/>
  <method class="crl.ui.consoleUI.effects.CharAnimatedEffect" name="int getColor()" map="F"/>
  <method class="crl.ui.consoleUI.effects.CharAnimatedEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharSplashEffect" map="G"/>
  <field class="crl.ui.consoleUI.effects.CharSplashEffect" name="color" map="P"/>
  <field class="crl.ui.consoleUI.effects.CharSplashEffect" name="tiles" map="Q"/>
  <field class="crl.ui.consoleUI.effects.CharSplashEffect" name="si" map="R"/>
  <field class="crl.ui.consoleUI.effects.CharSplashEffect" name="ui" map="S"/>
  <method class="crl.ui.consoleUI.effects.CharSplashEffect" name="void drawCircle(crl.ui.consoleUI.ConsoleUserInterface, sz.util.Position, int, char, int)" map="A"/>
  <method class="crl.ui.consoleUI.effects.CharSplashEffect" name="void drawCirclePixels(crl.ui.consoleUI.ConsoleUserInterface, sz.util.Position, int, int, char, int)" map="A"/>
  <method class="crl.ui.consoleUI.effects.CharSplashEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharSequentialEffect" map="H"/>
  <field class="crl.ui.consoleUI.effects.CharSequentialEffect" name="color" map="T"/>
  <field class="crl.ui.consoleUI.effects.CharSequentialEffect" name="tiles" map="U"/>
  <field class="crl.ui.consoleUI.effects.CharSequentialEffect" name="sequence" map="V"/>
  <method class="crl.ui.consoleUI.effects.CharSequentialEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharBeamMissileEffect" map="I"/>
  <field class="crl.ui.consoleUI.effects.CharBeamMissileEffect" name="missile" map="L"/>
  <field class="crl.ui.consoleUI.effects.CharBeamMissileEffect" name="misColor" map="M"/>
  <method class="crl.ui.consoleUI.effects.CharBeamMissileEffect" name="void setMisColor(int)" map="F"/>
  <method class="crl.ui.consoleUI.effects.CharBeamMissileEffect" name="void setMissile(java.lang.String)" map="C"/>
  <method class="crl.ui.consoleUI.effects.CharBeamMissileEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharEffectFactory" map="J"/>
  <field class="crl.ui.consoleUI.effects.CharEffectFactory" name="effects" map="B"/>
  <method class="crl.ui.consoleUI.effects.CharEffectFactory" name="crl.ui.effects.Effect createLocatedEffect(sz.util.Position, java.lang.String)" map="A"/>
  <method class="crl.ui.consoleUI.effects.CharEffectFactory" name="crl.ui.effects.Effect createDirectionalEffect(sz.util.Position, int, int, java.lang.String)" map="A"/>
  <method class="crl.ui.consoleUI.effects.CharEffectFactory" name="crl.ui.effects.Effect createDirectedEffect(sz.util.Position, sz.util.Position, java.lang.String, int)" map="A"/>
  <method class="crl.ui.consoleUI.effects.CharEffectFactory" name="void setEffects(crl.ui.effects.Effect[])" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharMeleeEffect" map="K"/>
  <field class="crl.ui.consoleUI.effects.CharMeleeEffect" name="color" map="a"/>
  <field class="crl.ui.consoleUI.effects.CharMeleeEffect" name="directionMissileChars" map="b"/>
  <method class="crl.ui.consoleUI.effects.CharMeleeEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharFlashEffect" map="L"/>
  <field class="crl.ui.consoleUI.effects.CharFlashEffect" name="color" map="W"/>
  <method class="crl.ui.consoleUI.effects.CharFlashEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharIconEffect" map="M"/>
  <field class="crl.ui.consoleUI.effects.CharIconEffect" name="color" map="X"/>
  <field class="crl.ui.consoleUI.effects.CharIconEffect" name="tile" map="Y"/>
  <method class="crl.ui.consoleUI.effects.CharIconEffect" name="void drawEffect(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="crl.ui.consoleUI.effects.CharDirectionalEffect" map="N"/>
  <field class="crl.ui.consoleUI.effects.CharDirectionalEffect" name="direction" map="Z"/>
  <field class="crl.ui.consoleUI.effects.CharDirectionalEffect" name="depth" map="_"/>
  <method class="crl.ui.consoleUI.effects.CharDirectionalEffect" name="void set(sz.util.Position, int, int)" map="A"/>
  <class name="crl.ui.consoleUI.CharPlayerGenerator" map="A"/>
  <field class="crl.ui.consoleUI.CharPlayerGenerator" name="si" map="H"/>
  <method class="crl.ui.consoleUI.CharPlayerGenerator" name="crl.player.Player generatePlayer()" map="A"/>
  <class name="crl.ui.consoleUI.CharAppearance" map="B"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="character" map="B"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="GREEN" map="C"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="GRAY" map="D"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="TEAL" map="E"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="BLACK" map="F"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="BLUE" map="G"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="RED" map="H"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="LIGHT_GRAY" map="I"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="DARK_RED" map="J"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="BROWN" map="K"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="CYAN" map="L"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="color" map="M"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="MAGENTA" map="N"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="YELLOW" map="O"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="DARK_BLUE" map="P"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="WHITE" map="Q"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="VOID" map="R"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="PURPLE" map="S"/>
  <field class="crl.ui.consoleUI.CharAppearance" name="LEMON" map="T"/>
  <method class="crl.ui.consoleUI.CharAppearance" name="int getColor(java.lang.String)" map="A"/>
  <method class="crl.ui.consoleUI.CharAppearance" name="crl.ui.consoleUI.CharAppearance getVoidAppearance()" map="B"/>
  <method class="crl.ui.consoleUI.CharAppearance" name="int getColor()" map="C"/>
  <method class="crl.ui.consoleUI.CharAppearance" name="char getChar()" map="D"/>
  <class name="crl.ui.consoleUI.CharDisplay" map="C"/>
  <field class="crl.ui.consoleUI.CharDisplay" name="si" map="B"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="void showChat(java.lang.String, crl.game.Game)" map="A"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="void init(sz.csi.ConsoleSystemInterface)" map="A"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="void showHelp()" map="A"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="int showTitleScreen()" map="B"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="void showScreen(java.lang.Object)" map="A"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="void showHiscores(crl.player.HiScore[])" map="A"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="boolean showResumeScreen(crl.player.Player)" map="A"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="crl.player.advancements.Advancement levelUp(crl.player.Player)" map="B"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="void showEndgame(crl.player.Player)" map="C"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="int showSavedGames(java.io.File[])" map="A"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="int readAlphaToNumber(int)" map="A"/>
  <method class="crl.ui.consoleUI.CharDisplay" name="void showIntro(crl.player.Player)" map="D"/>
  <class name="crl.ui.consoleUI.ConsoleUserInterface$UISelector" map="_A"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface$UISelector" name="this$0" map="this$0"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface$UISelector" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface$UISelector" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface$UISelector" name="java.lang.String getID()" map="B"/>
  <class name="crl.ui.consoleUI.ConsoleUserInterface" map="D"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="sightListItems" map="n"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="lastMessage" map="o"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="VP_END" map="p"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="xrange" map="q"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="messageBox" map="r"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="lockedMonster" map="s"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="yrange" map="t"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="PC_POS" map="u"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="statusBuffer" map="v"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="FOVMask" map="w"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="messageHistory" map="x"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="WEAPONCODE" map="y"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="idList" map="z"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="VP_START" map="&#x00a2;"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="eraseOnArrival" map="&#x00a3;"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="selector" map="&#x00a4;"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="msgCounter" map="&#x00a5;"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="SOUL_OPTIONS" map="&#x00aa;"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="SPACES" map="&#x00b5;"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="si" map="&#x00ba;"/>
  <field class="crl.ui.consoleUI.ConsoleUserInterface" name="messageBuffer" map="&#x00c0;"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.action.Action access$4(crl.ui.consoleUI.ConsoleUserInterface)" map="access$4"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="sz.util.Position access$7(crl.ui.consoleUI.ConsoleUserInterface)" map="access$7"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.action.Action access$2(crl.ui.consoleUI.ConsoleUserInterface, sz.csi.CharKey)" map="access$2"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void run()" map="run"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="java.util.Vector getMessageBuffer()" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.action.Action selectCommand(sz.csi.CharKey)" map="B"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void addMessage(crl.actor.Message)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.player.Player access$3(crl.ui.consoleUI.ConsoleUserInterface)" map="access$3"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void drawEffect(crl.ui.effects.Effect)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.item.Item pickUnderlyingItem(java.lang.String)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void processSave()" map="B"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.action.Action showSkills()" map="C"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="sz.util.Position pickPosition(java.lang.String)" map="B"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void processQuit()" map="D"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="boolean prompt()" map="E"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="boolean isOnFOVMask(int, int)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.level.Level access$9(crl.ui.consoleUI.ConsoleUserInterface)" map="access$9"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="sz.csi.ConsoleSystemInterface access$1(crl.ui.consoleUI.ConsoleUserInterface)" map="access$1"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.item.Item pickEquipedItem(java.lang.String)" map="C"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void showMessage(java.lang.String)" map="D"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void showMessageHistory()" map="F"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void init(sz.csi.ConsoleSystemInterface, crl.ui.UserAction[], crl.ui.UserCommand[], crl.action.Action, crl.action.Action, crl.action.Action)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="java.util.Vector pickMultiItems(java.lang.String)" map="H"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void setTargets(crl.action.Action)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.item.Item pickItem(java.lang.String)" map="E"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.action.Action showInventory()" map="G"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void waitKey()" map="O"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="int pickDirection(java.lang.String)" map="F"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void drawLevel()" map="P"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void drawLineTo(int, int, char, int)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void doLook()" map="I"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void refresh()" map="J"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="java.util.Vector pickSpirits()" map="Q"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.ai.ActionSelector getSelector()" map="K"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void showSystemMessage(java.lang.String)" map="G"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="sz.util.Position getNearestMonsterPosition()" map="R"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="sz.util.Position getAbsolutePosition(sz.util.Position)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="boolean isDisplaying(crl.actor.Actor)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.action.Action access$6(crl.ui.consoleUI.ConsoleUserInterface, int)" map="access$6"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void examineLevelMap()" map="S"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="boolean access$0(crl.ui.consoleUI.ConsoleUserInterface)" map="access$0"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void cleanViewPort()" map="T"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void commandSelected(int)" map="A"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="crl.action.Action access$5(crl.ui.consoleUI.ConsoleUserInterface)" map="access$5"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void showPlayerStats()" map="N"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="boolean insideViewPort(sz.util.Position)" map="B"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void drawPlayerStatus()" map="U"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="void access$8(crl.ui.consoleUI.ConsoleUserInterface, crl.action.Action)" map="access$8"/>
  <method class="crl.ui.consoleUI.ConsoleUserInterface" name="boolean insideViewPort(int, int)" map="B"/>
  <package name="crl.ui.effects" map="C"/>
  <class name="crl.ui.effects.Effect" map="A"/>
  <field class="crl.ui.effects.Effect" name="position" map="A"/>
  <field class="crl.ui.effects.Effect" name="animationDelay" map="B"/>
  <field class="crl.ui.effects.Effect" name="id" map="C"/>
  <method class="crl.ui.effects.Effect" name="void setPosition(sz.util.Position)" map="A"/>
  <method class="crl.ui.effects.Effect" name="sz.util.Position getPosition()" map="A"/>
  <method class="crl.ui.effects.Effect" name="java.lang.String getID()" map="B"/>
  <method class="crl.ui.effects.Effect" name="void animationPause()" map="C"/>
  <method class="crl.ui.effects.Effect" name="void setAnimationDelay(int)" map="A"/>
  <method class="crl.ui.effects.Effect" name="void set(sz.util.Position)" map="B"/>
  <class name="crl.ui.effects.VEffect" map="B"/>
  <field class="crl.ui.effects.VEffect" name="effects" map="A"/>
  <method class="crl.ui.effects.VEffect" name="crl.ui.effects.Effect getEffect(int)" map="A"/>
  <method class="crl.ui.effects.VEffect" name="int size()" map="A"/>
  <method class="crl.ui.effects.VEffect" name="void erase()" map="B"/>
  <method class="crl.ui.effects.VEffect" name="void addEffect(crl.ui.effects.Effect)" map="A"/>
  <class name="crl.ui.effects.EffectFactory" map="C"/>
  <field class="crl.ui.effects.EffectFactory" name="singleton" map="A"/>
  <method class="crl.ui.effects.EffectFactory" name="void setSingleton(crl.ui.effects.EffectFactory)" map="A"/>
  <method class="crl.ui.effects.EffectFactory" name="crl.ui.effects.Effect createLocatedEffect(sz.util.Position, java.lang.String)" map="A"/>
  <method class="crl.ui.effects.EffectFactory" name="crl.ui.effects.Effect createDirectionalEffect(sz.util.Position, int, int, java.lang.String)" map="A"/>
  <method class="crl.ui.effects.EffectFactory" name="crl.ui.effects.EffectFactory getSingleton()" map="A"/>
  <method class="crl.ui.effects.EffectFactory" name="crl.ui.effects.Effect createDirectedEffect(sz.util.Position, sz.util.Position, java.lang.String, int)" map="A"/>
  <class name="crl.ui.UserInterface" map="A"/>
  <field class="crl.ui.UserInterface" name="level" map="T"/>
  <field class="crl.ui.UserInterface" name="itemsOnSight" map="U"/>
  <field class="crl.ui.UserInterface" name="lastMessage" map="V"/>
  <field class="crl.ui.UserInterface" name="verboseSkills" map="W"/>
  <field class="crl.ui.UserInterface" name="gameOver" map="X"/>
  <field class="crl.ui.UserInterface" name="quitMessages" map="Y"/>
  <field class="crl.ui.UserInterface" name="gameActions" map="Z"/>
  <field class="crl.ui.UserInterface" name="gameCommands" map="_"/>
  <field class="crl.ui.UserInterface" name="singleton" map="a"/>
  <field class="crl.ui.UserInterface" name="FOVMask" map="b"/>
  <field class="crl.ui.UserInterface" name="advance" map="c"/>
  <field class="crl.ui.UserInterface" name="WEAPONCODE" map="d"/>
  <field class="crl.ui.UserInterface" name="eraseOnArrival" map="e"/>
  <field class="crl.ui.UserInterface" name="player" map="f"/>
  <field class="crl.ui.UserInterface" name="monstersOnSight" map="g"/>
  <field class="crl.ui.UserInterface" name="attack" map="h"/>
  <field class="crl.ui.UserInterface" name="commandListeners" map="i"/>
  <field class="crl.ui.UserInterface" name="actionSelectedByCommand" map="j"/>
  <field class="crl.ui.UserInterface" name="si" map="k"/>
  <field class="crl.ui.UserInterface" name="featuresOnSight" map="l"/>
  <field class="crl.ui.UserInterface" name="target" map="m"/>
  <method class="crl.ui.UserInterface" name="crl.action.Action selectCommand(sz.csi.CharKey)" map="A"/>
  <method class="crl.ui.UserInterface" name="java.util.Vector getMessageBuffer()" map="A"/>
  <method class="crl.ui.UserInterface" name="void addMessage(crl.actor.Message)" map="A"/>
  <method class="crl.ui.UserInterface" name="int getRelatedCommand(int)" map="B"/>
  <method class="crl.ui.UserInterface" name="void drawEffect(crl.ui.effects.Effect)" map="A"/>
  <method class="crl.ui.UserInterface" name="crl.item.Item pickUnderlyingItem(java.lang.String)" map="A"/>
  <method class="crl.ui.UserInterface" name="void processSave()" map="B"/>
  <method class="crl.ui.UserInterface" name="void removeCommandListener(crl.ui.CommandListener)" map="A"/>
  <method class="crl.ui.UserInterface" name="crl.action.Action showSkills()" map="C"/>
  <method class="crl.ui.UserInterface" name="sz.util.Position pickPosition(java.lang.String)" map="B"/>
  <method class="crl.ui.UserInterface" name="void processQuit()" map="D"/>
  <method class="crl.ui.UserInterface" name="boolean prompt()" map="E"/>
  <method class="crl.ui.UserInterface" name="boolean isOnFOVMask(int, int)" map="A"/>
  <method class="crl.ui.UserInterface" name="crl.item.Item pickEquipedItem(java.lang.String)" map="C"/>
  <method class="crl.ui.UserInterface" name="void showMessage(java.lang.String)" map="D"/>
  <method class="crl.ui.UserInterface" name="void showMessageHistory()" map="F"/>
  <method class="crl.ui.UserInterface" name="void init(crl.ui.UserAction[], crl.ui.UserCommand[], crl.action.Action, crl.action.Action, crl.action.Action)" map="A"/>
  <method class="crl.ui.UserInterface" name="crl.item.Item pickItem(java.lang.String)" map="E"/>
  <method class="crl.ui.UserInterface" name="crl.action.Action showInventory()" map="G"/>
  <method class="crl.ui.UserInterface" name="crl.ui.UserInterface getUI()" map="H"/>
  <method class="crl.ui.UserInterface" name="int pickDirection(java.lang.String)" map="F"/>
  <method class="crl.ui.UserInterface" name="void doLook()" map="I"/>
  <method class="crl.ui.UserInterface" name="void refresh()" map="J"/>
  <method class="crl.ui.UserInterface" name="crl.ai.ActionSelector getSelector()" map="K"/>
  <method class="crl.ui.UserInterface" name="void showSystemMessage(java.lang.String)" map="G"/>
  <method class="crl.ui.UserInterface" name="void informPlayerCommand(int)" map="C"/>
  <method class="crl.ui.UserInterface" name="crl.player.Player getPlayer()" map="L"/>
  <method class="crl.ui.UserInterface" name="boolean isDisplaying(crl.actor.Actor)" map="A"/>
  <method class="crl.ui.UserInterface" name="void setSingleton(crl.ui.UserInterface)" map="A"/>
  <method class="crl.ui.UserInterface" name="void setGameOver(boolean)" map="A"/>
  <method class="crl.ui.UserInterface" name="void levelChange()" map="M"/>
  <method class="crl.ui.UserInterface" name="void setPlayer(crl.player.Player)" map="A"/>
  <method class="crl.ui.UserInterface" name="void addCommandListener(crl.ui.CommandListener)" map="B"/>
  <method class="crl.ui.UserInterface" name="void commandSelected(int)" map="A"/>
  <method class="crl.ui.UserInterface" name="void showPlayerStats()" map="N"/>
  <method class="crl.ui.UserInterface" name="crl.action.Action getRelatedAction(int)" map="D"/>
  <class name="crl.ui.UserCommand" map="B"/>
  <field class="crl.ui.UserCommand" name="keyCode" map="A"/>
  <field class="crl.ui.UserCommand" name="command" map="B"/>
  <method class="crl.ui.UserCommand" name="void setKeyCode(int)" map="A"/>
  <method class="crl.ui.UserCommand" name="int getCommand()" map="A"/>
  <method class="crl.ui.UserCommand" name="int getKeyCode()" map="B"/>
  <class name="crl.ui.Display" map="C"/>
  <field class="crl.ui.Display" name="thus" map="A"/>
  <method class="crl.ui.Display" name="void showHelp()" map="A"/>
  <method class="crl.ui.Display" name="int showTitleScreen()" map="B"/>
  <method class="crl.ui.Display" name="void showScreen(java.lang.Object)" map="A"/>
  <method class="crl.ui.Display" name="void showHiscores(crl.player.HiScore[])" map="A"/>
  <method class="crl.ui.Display" name="boolean showResumeScreen(crl.player.Player)" map="A"/>
  <method class="crl.ui.Display" name="crl.player.advancements.Advancement levelUp(crl.player.Player)" map="B"/>
  <method class="crl.ui.Display" name="void showEndgame(crl.player.Player)" map="C"/>
  <method class="crl.ui.Display" name="int showSavedGames(java.io.File[])" map="A"/>
  <method class="crl.ui.Display" name="void showIntro(crl.player.Player)" map="D"/>
  <class name="crl.ui.Appearance" map="D"/>
  <field class="crl.ui.Appearance" name="ID" map="A"/>
  <method class="crl.ui.Appearance" name="java.lang.String getID()" map="A"/>
  <class name="crl.ui.CommandListener" map="E"/>
  <field class="crl.ui.CommandListener" name="SHOWMAP" map="A"/>
  <field class="crl.ui.CommandListener" name="HELP" map="B"/>
  <field class="crl.ui.CommandListener" name="SAVE" map="C"/>
  <field class="crl.ui.CommandListener" name="SWITCHMUSIC" map="D"/>
  <field class="crl.ui.CommandListener" name="QUIT" map="E"/>
  <field class="crl.ui.CommandListener" name="CHAR_DUMP" map="F"/>
  <field class="crl.ui.CommandListener" name="SHOWSKILLS" map="G"/>
  <field class="crl.ui.CommandListener" name="PROMPTSAVE" map="H"/>
  <field class="crl.ui.CommandListener" name="LOOK" map="I"/>
  <field class="crl.ui.CommandListener" name="PROMPTQUIT" map="J"/>
  <field class="crl.ui.CommandListener" name="RESTART" map="K"/>
  <field class="crl.ui.CommandListener" name="NONE" map="L"/>
  <field class="crl.ui.CommandListener" name="SHOWINVEN" map="M"/>
  <field class="crl.ui.CommandListener" name="SHOWHISCORES" map="N"/>
  <field class="crl.ui.CommandListener" name="SHOWMESSAGEHISTORY" map="O"/>
  <field class="crl.ui.CommandListener" name="CHANGE_TACTICS" map="P"/>
  <field class="crl.ui.CommandListener" name="SHOWUNEQUIP" map="Q"/>
  <field class="crl.ui.CommandListener" name="SHOWSTATS" map="R"/>
  <field class="crl.ui.CommandListener" name="EXAMINELEVELMAP" map="S"/>
  <method class="crl.ui.CommandListener" name="void commandSelected(int)" map="A"/>
  <class name="crl.ui.AppearanceFactory" map="F"/>
  <field class="crl.ui.AppearanceFactory" name="definitions" map="A"/>
  <field class="crl.ui.AppearanceFactory" name="singleton" map="B"/>
  <method class="crl.ui.AppearanceFactory" name="crl.ui.Appearance getAppearance(java.lang.String)" map="A"/>
  <method class="crl.ui.AppearanceFactory" name="void addDefinition(crl.ui.Appearance)" map="A"/>
  <method class="crl.ui.AppearanceFactory" name="crl.ui.AppearanceFactory getAppearanceFactory()" map="A"/>
  <class name="crl.ui.RefreshActor" map="G"/>
  <field class="crl.ui.RefreshActor" name="REFRESHVIEWPORT" map="P"/>
  <field class="crl.ui.RefreshActor" name="opCode" map="Q"/>
  <field class="crl.ui.RefreshActor" name="singleton" map="R"/>
  <field class="crl.ui.RefreshActor" name="NONE" map="S"/>
  <method class="crl.ui.RefreshActor" name="crl.ui.RefreshActor getRefreshActor(int)" map="C"/>
  <method class="crl.ui.RefreshActor" name="int getOpCode()" map="P"/>
  <method class="crl.ui.RefreshActor" name="void setOpCode(int)" map="D"/>
  <method class="crl.ui.RefreshActor" name="void act()" map="F"/>
  <class name="crl.ui.UserAction" map="H"/>
  <field class="crl.ui.UserAction" name="action" map="A"/>
  <field class="crl.ui.UserAction" name="keyCode" map="B"/>
  <method class="crl.ui.UserAction" name="void setKeyCode(int)" map="A"/>
  <method class="crl.ui.UserAction" name="crl.action.Action getAction()" map="A"/>
  <method class="crl.ui.UserAction" name="void setAction(crl.action.Action)" map="A"/>
  <method class="crl.ui.UserAction" name="int getKeyCode()" map="B"/>
  <class name="crl.ui.ActionCancelException" map="I"/>
  <package name="crl.monster" map="K"/>
  <class name="crl.monster.MonsterFactory" map="A"/>
  <field class="crl.monster.MonsterFactory" name="vDefinitions" map="A"/>
  <field class="crl.monster.MonsterFactory" name="definitions" map="B"/>
  <field class="crl.monster.MonsterFactory" name="singleton" map="C"/>
  <field class="crl.monster.MonsterFactory" name="lastSpawnLocation" map="D"/>
  <method class="crl.monster.MonsterFactory" name="crl.monster.MonsterFactory getFactory()" map="A"/>
  <method class="crl.monster.MonsterFactory" name="void printAppearances()" map="B"/>
  <method class="crl.monster.MonsterFactory" name="crl.monster.Monster buildMonster(java.lang.String)" map="A"/>
  <method class="crl.monster.MonsterFactory" name="int getLastSpawnPosition()" map="C"/>
  <method class="crl.monster.MonsterFactory" name="void init(crl.monster.MonsterDefinition[])" map="A"/>
  <method class="crl.monster.MonsterFactory" name="crl.monster.MonsterDefinition getDefinition(java.lang.String)" map="B"/>
  <method class="crl.monster.MonsterFactory" name="crl.monster.Monster getMonsterForLevel(int)" map="A"/>
  <class name="crl.monster.MonsterDefinition" map="B"/>
  <field class="crl.monster.MonsterDefinition" name="vecDrops" map="A"/>
  <field class="crl.monster.MonsterDefinition" name="magus" map="B"/>
  <field class="crl.monster.MonsterDefinition" name="bloodContent" map="C"/>
  <field class="crl.monster.MonsterDefinition" name="baseIntegrityPoints" map="D"/>
  <field class="crl.monster.MonsterDefinition" name="evadeMessage" map="E"/>
  <field class="crl.monster.MonsterDefinition" name="baseCarryCapacity" map="F"/>
  <field class="crl.monster.MonsterDefinition" name="attackCost" map="G"/>
  <field class="crl.monster.MonsterDefinition" name="baseBreak" map="H"/>
  <field class="crl.monster.MonsterDefinition" name="baseSightRange" map="I"/>
  <field class="crl.monster.MonsterDefinition" name="sightRange" map="J"/>
  <field class="crl.monster.MonsterDefinition" name="baseAttack" map="K"/>
  <field class="crl.monster.MonsterDefinition" name="evadeChance" map="L"/>
  <field class="crl.monster.MonsterDefinition" name="ID" map="M"/>
  <field class="crl.monster.MonsterDefinition" name="baseEvasion" map="N"/>
  <field class="crl.monster.MonsterDefinition" name="heavy" map="O"/>
  <field class="crl.monster.MonsterDefinition" name="walkCost" map="P"/>
  <field class="crl.monster.MonsterDefinition" name="fireResistant" map="Q"/>
  <field class="crl.monster.MonsterDefinition" name="appearance" map="R"/>
  <field class="crl.monster.MonsterDefinition" name="floating" map="S"/>
  <field class="crl.monster.MonsterDefinition" name="autorespawnCount" map="T"/>
  <field class="crl.monster.MonsterDefinition" name="baseLeaping" map="U"/>
  <field class="crl.monster.MonsterDefinition" name="description" map="V"/>
  <field class="crl.monster.MonsterDefinition" name="score" map="W"/>
  <field class="crl.monster.MonsterDefinition" name="baseEvadePoints" map="X"/>
  <field class="crl.monster.MonsterDefinition" name="wavOnHit" map="Y"/>
  <field class="crl.monster.MonsterDefinition" name="undead" map="Z"/>
  <field class="crl.monster.MonsterDefinition" name="minLevel" map="_"/>
  <field class="crl.monster.MonsterDefinition" name="defaultSelector" map="a"/>
  <method class="crl.monster.MonsterDefinition" name="int getSightRange()" map="A"/>
  <method class="crl.monster.MonsterDefinition" name="void setDescription(java.lang.String)" map="A"/>
  <method class="crl.monster.MonsterDefinition" name="int getBaseCarryCapacity()" map="B"/>
  <method class="crl.monster.MonsterDefinition" name="java.lang.String getDescription()" map="C"/>
  <method class="crl.monster.MonsterDefinition" name="int getBaseEvasion()" map="D"/>
  <method class="crl.monster.MonsterDefinition" name="int getBaseIntegrityPoints()" map="E"/>
  <method class="crl.monster.MonsterDefinition" name="void addDrop(crl.monster.Drop)" map="A"/>
  <method class="crl.monster.MonsterDefinition" name="boolean isFloating()" map="F"/>
  <method class="crl.monster.MonsterDefinition" name="void setBaseEvadePoints(int)" map="A"/>
  <method class="crl.monster.MonsterDefinition" name="int getAutorespawnCount()" map="G"/>
  <method class="crl.monster.MonsterDefinition" name="boolean isHeavy()" map="H"/>
  <method class="crl.monster.MonsterDefinition" name="void setAttackCost(int)" map="B"/>
  <method class="crl.monster.MonsterDefinition" name="java.lang.String getEvadeMessage()" map="I"/>
  <method class="crl.monster.MonsterDefinition" name="void setFloating(boolean)" map="A"/>
  <method class="crl.monster.MonsterDefinition" name="int getBaseAttack()" map="J"/>
  <method class="crl.monster.MonsterDefinition" name="void setWavOnHit(java.lang.String)" map="B"/>
  <method class="crl.monster.MonsterDefinition" name="void setMinLevel(int)" map="C"/>
  <method class="crl.monster.MonsterDefinition" name="crl.ui.Appearance getAppearance()" map="K"/>
  <method class="crl.monster.MonsterDefinition" name="java.lang.String getWavOnHit()" map="L"/>
  <method class="crl.monster.MonsterDefinition" name="void setBaseBreak(int)" map="D"/>
  <method class="crl.monster.MonsterDefinition" name="void setBaseCarryCapacity(int)" map="E"/>
  <method class="crl.monster.MonsterDefinition" name="void setBaseLeaping(int)" map="F"/>
  <method class="crl.monster.MonsterDefinition" name="void setBloodContent(int)" map="G"/>
  <method class="crl.monster.MonsterDefinition" name="void setWalkCost(int)" map="H"/>
  <method class="crl.monster.MonsterDefinition" name="java.lang.String getID()" map="M"/>
  <method class="crl.monster.MonsterDefinition" name="void setScore(int)" map="I"/>
  <method class="crl.monster.MonsterDefinition" name="void setMagus(boolean)" map="B"/>
  <method class="crl.monster.MonsterDefinition" name="crl.ai.ActionSelector getDefaultSelector()" map="N"/>
  <method class="crl.monster.MonsterDefinition" name="int getEvadeChance()" map="O"/>
  <method class="crl.monster.MonsterDefinition" name="boolean isMagus()" map="P"/>
  <method class="crl.monster.MonsterDefinition" name="void setHeavy(boolean)" map="C"/>
  <method class="crl.monster.MonsterDefinition" name="int getBaseEvadePoints()" map="Q"/>
  <method class="crl.monster.MonsterDefinition" name="java.util.Vector getDrops()" map="R"/>
  <method class="crl.monster.MonsterDefinition" name="boolean isUndead()" map="S"/>
  <method class="crl.monster.MonsterDefinition" name="void setBaseIntegrityPoints(int)" map="J"/>
  <method class="crl.monster.MonsterDefinition" name="boolean isBleedable()" map="T"/>
  <method class="crl.monster.MonsterDefinition" name="void setEvadeMessage(java.lang.String)" map="C"/>
  <method class="crl.monster.MonsterDefinition" name="void setAppearance(crl.ui.Appearance)" map="A"/>
  <method class="crl.monster.MonsterDefinition" name="int getAttackCost()" map="U"/>
  <method class="crl.monster.MonsterDefinition" name="void setBaseAttack(int)" map="K"/>
  <method class="crl.monster.MonsterDefinition" name="int getBloodContent()" map="V"/>
  <method class="crl.monster.MonsterDefinition" name="int getBaseLeaping()" map="W"/>
  <method class="crl.monster.MonsterDefinition" name="void setBaseEvasion(int)" map="L"/>
  <method class="crl.monster.MonsterDefinition" name="void setUndead(boolean)" map="D"/>
  <method class="crl.monster.MonsterDefinition" name="void setFireResistant(boolean)" map="E"/>
  <method class="crl.monster.MonsterDefinition" name="int getMinLevel()" map="X"/>
  <method class="crl.monster.MonsterDefinition" name="int getWalkCost()" map="Y"/>
  <method class="crl.monster.MonsterDefinition" name="void setSightRange(int)" map="M"/>
  <method class="crl.monster.MonsterDefinition" name="int getScore()" map="Z"/>
  <method class="crl.monster.MonsterDefinition" name="boolean isFireResistant()" map="_"/>
  <method class="crl.monster.MonsterDefinition" name="void setAutorespawnCount(int)" map="N"/>
  <method class="crl.monster.MonsterDefinition" name="void setEvadeChance(int)" map="O"/>
  <method class="crl.monster.MonsterDefinition" name="void setDefaultSelector(crl.ai.ActionSelector)" map="A"/>
  <method class="crl.monster.MonsterDefinition" name="int getBaseBreak()" map="a"/>
  <class name="crl.monster.Monster" map="C"/>
  <field class="crl.monster.Monster" name="evasion" map="T"/>
  <field class="crl.monster.Monster" name="integrityMax" map="U"/>
  <field class="crl.monster.Monster" name="leaping" map="V"/>
  <field class="crl.monster.Monster" name="definition" map="W"/>
  <field class="crl.monster.Monster" name="visible" map="X"/>
  <field class="crl.monster.Monster" name="enemy" map="Y"/>
  <field class="crl.monster.Monster" name="evadePointsMax" map="Z"/>
  <field class="crl.monster.Monster" name="justEvaded" map="_"/>
  <field class="crl.monster.Monster" name="attack" map="a"/>
  <field class="crl.monster.Monster" name="sightRange" map="b"/>
  <field class="crl.monster.Monster" name="wasSeen" map="c"/>
  <field class="crl.monster.Monster" name="integrityPoints" map="d"/>
  <field class="crl.monster.Monster" name="defID" map="e"/>
  <field class="crl.monster.Monster" name="frozenCounter" map="f"/>
  <field class="crl.monster.Monster" name="featurePrize" map="g"/>
  <field class="crl.monster.Monster" name="evadePoints" map="h"/>
  <method class="crl.monster.Monster" name="int getDamage()" map="Q"/>
  <method class="crl.monster.Monster" name="void updateStatus()" map="J"/>
  <method class="crl.monster.Monster" name="void setEnemy(crl.monster.Monster)" map="A"/>
  <method class="crl.monster.Monster" name="java.lang.String getDescription()" map="I"/>
  <method class="crl.monster.Monster" name="void setFeaturePrize(java.lang.String)" map="D"/>
  <method class="crl.monster.Monster" name="boolean isFloating()" map="R"/>
  <method class="crl.monster.Monster" name="void moveRandomly()" map="S"/>
  <method class="crl.monster.Monster" name="boolean tryMagicHit(crl.player.Player, int, int, int, boolean, java.lang.String)" map="A"/>
  <method class="crl.monster.Monster" name="boolean isVisible()" map="T"/>
  <method class="crl.monster.Monster" name="crl.monster.Monster getEnemy()" map="U"/>
  <method class="crl.monster.Monster" name="boolean canSwim()" map="V"/>
  <method class="crl.monster.Monster" name="boolean isHeavy()" map="W"/>
  <method class="crl.monster.Monster" name="java.lang.String getEvadeMessage()" map="X"/>
  <method class="crl.monster.Monster" name="java.lang.String getFeaturePrize()" map="Y"/>
  <method class="crl.monster.Monster" name="int getFreezeResistance()" map="Z"/>
  <method class="crl.monster.Monster" name="boolean isFrozen()" map="_"/>
  <method class="crl.monster.Monster" name="crl.monster.Monster getNearestMonster()" map="a"/>
  <method class="crl.monster.Monster" name="boolean tryHit(crl.player.Player, crl.item.Item, boolean, boolean, int)" map="A"/>
  <method class="crl.monster.Monster" name="boolean waitsPlayer()" map="b"/>
  <method class="crl.monster.Monster" name="crl.ui.Appearance getAppearance()" map="G"/>
  <method class="crl.monster.Monster" name="java.lang.String getWavOnHit()" map="c"/>
  <method class="crl.monster.Monster" name="void damageIntegrity(crl.player.Player, int)" map="A"/>
  <method class="crl.monster.Monster" name="java.lang.String getID()" map="d"/>
  <method class="crl.monster.Monster" name="void die()" map="D"/>
  <method class="crl.monster.Monster" name="boolean hasFireLine()" map="e"/>
  <method class="crl.monster.Monster" name="int getEvadeChance()" map="f"/>
  <method class="crl.monster.Monster" name="boolean seesPlayer()" map="g"/>
  <method class="crl.monster.Monster" name="boolean isMagus()" map="h"/>
  <method class="crl.monster.Monster" name="boolean isUndead()" map="i"/>
  <method class="crl.monster.Monster" name="void setPrize()" map="j"/>
  <method class="crl.monster.Monster" name="void damageIntegrity(int)" map="E"/>
  <method class="crl.monster.Monster" name="boolean canBeVanished()" map="k"/>
  <method class="crl.monster.Monster" name="int getBreak()" map="l"/>
  <method class="crl.monster.Monster" name="boolean justEvaded()" map="m"/>
  <method class="crl.monster.Monster" name="int getAttackCost()" map="n"/>
  <method class="crl.monster.Monster" name="java.lang.String getExamineDescription()" map="o"/>
  <method class="crl.monster.Monster" name="boolean isDead()" map="p"/>
  <method class="crl.monster.Monster" name="void tryLand(sz.util.Position)" map="B"/>
  <method class="crl.monster.Monster" name="int getAutorespawncount()" map="q"/>
  <method class="crl.monster.Monster" name="crl.monster.MonsterDefinition getDefinition()" map="r"/>
  <method class="crl.monster.Monster" name="void act()" map="F"/>
  <method class="crl.monster.Monster" name="int getWalkCost()" map="s"/>
  <method class="crl.monster.Monster" name="void setVisible(boolean)" map="A"/>
  <method class="crl.monster.Monster" name="void setWasSeen(boolean)" map="B"/>
  <method class="crl.monster.Monster" name="int starePlayer()" map="t"/>
  <method class="crl.monster.Monster" name="boolean tryHit(crl.monster.Monster, int)" map="A"/>
  <method class="crl.monster.Monster" name="boolean playerInRow()" map="u"/>
  <method class="crl.monster.Monster" name="int stareMonster(crl.monster.Monster)" map="B"/>
  <method class="crl.monster.Monster" name="int getScore()" map="v"/>
  <method class="crl.monster.Monster" name="boolean isFireResistant()" map="w"/>
  <method class="crl.monster.Monster" name="int stareMonster()" map="x"/>
  <method class="crl.monster.Monster" name="void checkDeath(crl.player.Player)" map="A"/>
  <method class="crl.monster.Monster" name="int getEvasion()" map="y"/>
  <method class="crl.monster.Monster" name="void freeze(int)" map="F"/>
  <method class="crl.monster.Monster" name="boolean wasSeen()" map="z"/>
  <method class="crl.monster.Monster" name="boolean isInWater()" map="&#x00a2;"/>
  <method class="crl.monster.Monster" name="boolean tryHit(crl.monster.Monster)" map="C"/>
  <method class="crl.monster.Monster" name="java.lang.Object clone()" map="clone"/>
  <class name="crl.monster.VMonster" map="D"/>
  <field class="crl.monster.VMonster" name="monsters" map="A"/>
  <method class="crl.monster.VMonster" name="java.util.Vector getVector()" map="A"/>
  <method class="crl.monster.VMonster" name="void remove(java.lang.Object)" map="A"/>
  <method class="crl.monster.VMonster" name="boolean contains(crl.monster.Monster)" map="A"/>
  <method class="crl.monster.VMonster" name="crl.monster.Monster elementAt(int)" map="A"/>
  <method class="crl.monster.VMonster" name="java.util.Enumeration elements()" map="B"/>
  <method class="crl.monster.VMonster" name="void removeAll(java.util.Collection)" map="A"/>
  <method class="crl.monster.VMonster" name="crl.monster.Monster getMonsterAt(sz.util.Position)" map="A"/>
  <method class="crl.monster.VMonster" name="int size()" map="C"/>
  <method class="crl.monster.VMonster" name="void removeAll()" map="D"/>
  <method class="crl.monster.VMonster" name="void addMonster(crl.monster.Monster)" map="B"/>
  <class name="crl.monster.Drop" map="E"/>
  <field class="crl.monster.Drop" name="dropType" map="A"/>
  <field class="crl.monster.Drop" name="dropID" map="B"/>
  <field class="crl.monster.Drop" name="dropProb" map="C"/>
  <method class="crl.monster.Drop" name="java.lang.String getDropType()" map="A"/>
  <method class="crl.monster.Drop" name="void setDropID(java.lang.String)" map="A"/>
  <method class="crl.monster.Drop" name="void setDropType(java.lang.String)" map="B"/>
  <method class="crl.monster.Drop" name="void setDropProb(int)" map="A"/>
  <method class="crl.monster.Drop" name="int getDropProb()" map="B"/>
  <method class="crl.monster.Drop" name="java.lang.String getDropID()" map="C"/>
  <package name="crl.player" map="L"/>
  <package name="crl.player.advancements" map="A"/>
  <class name="crl.player.advancements.AdvCircle8" map="A"/>
  <field class="crl.player.advancements.AdvCircle8" name="requirements" map="h"/>
  <method class="crl.player.advancements.AdvCircle8" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCircle8" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCircle8" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCircle8" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCircle8" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCircle7" map="B"/>
  <field class="crl.player.advancements.AdvCircle7" name="requirements" map="A"/>
  <method class="crl.player.advancements.AdvCircle7" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCircle7" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCircle7" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCircle7" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCircle7" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCircle6" map="C"/>
  <field class="crl.player.advancements.AdvCircle6" name="requirements" map="B"/>
  <method class="crl.player.advancements.AdvCircle6" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCircle6" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCircle6" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCircle6" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCircle6" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCircle5" map="D"/>
  <field class="crl.player.advancements.AdvCircle5" name="requirements" map="C"/>
  <method class="crl.player.advancements.AdvCircle5" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCircle5" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCircle5" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCircle5" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCircle5" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCircle4" map="E"/>
  <field class="crl.player.advancements.AdvCircle4" name="requirements" map="D"/>
  <method class="crl.player.advancements.AdvCircle4" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCircle4" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCircle4" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCircle4" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCircle4" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCircle3" map="F"/>
  <field class="crl.player.advancements.AdvCircle3" name="requirements" map="E"/>
  <method class="crl.player.advancements.AdvCircle3" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCircle3" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCircle3" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCircle3" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCircle3" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCircle2" map="G"/>
  <field class="crl.player.advancements.AdvCircle2" name="requirements" map="F"/>
  <method class="crl.player.advancements.AdvCircle2" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCircle2" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCircle2" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCircle2" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCircle2" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCircle1" map="H"/>
  <field class="crl.player.advancements.AdvCircle1" name="requirements" map="G"/>
  <method class="crl.player.advancements.AdvCircle1" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCircle1" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCircle1" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCircle1" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCircle1" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatMirage" map="I"/>
  <field class="crl.player.advancements.AdvCombatMirage" name="requirements" map="H"/>
  <method class="crl.player.advancements.AdvCombatMirage" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatMirage" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatMirage" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatMirage" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatMirage" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvLifeBurst" map="J"/>
  <field class="crl.player.advancements.AdvLifeBurst" name="requirements" map="I"/>
  <method class="crl.player.advancements.AdvLifeBurst" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvLifeBurst" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvLifeBurst" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvLifeBurst" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvLifeBurst" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatHalfSlash" map="K"/>
  <field class="crl.player.advancements.AdvCombatHalfSlash" name="requirements" map="J"/>
  <method class="crl.player.advancements.AdvCombatHalfSlash" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatHalfSlash" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatHalfSlash" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatHalfSlash" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatHalfSlash" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatCharge" map="L"/>
  <field class="crl.player.advancements.AdvCombatCharge" name="requirements" map="K"/>
  <method class="crl.player.advancements.AdvCombatCharge" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatCharge" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatCharge" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatCharge" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatCharge" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatCorner" map="M"/>
  <field class="crl.player.advancements.AdvCombatCorner" name="requirements" map="L"/>
  <method class="crl.player.advancements.AdvCombatCorner" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatCorner" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatCorner" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatCorner" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatCorner" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvTemper4" map="N"/>
  <field class="crl.player.advancements.AdvTemper4" name="requirements" map="M"/>
  <method class="crl.player.advancements.AdvTemper4" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvTemper4" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvTemper4" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvTemper4" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvTemper4" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatSlash" map="O"/>
  <field class="crl.player.advancements.AdvCombatSlash" name="requirements" map="N"/>
  <method class="crl.player.advancements.AdvCombatSlash" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatSlash" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatSlash" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatSlash" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatSlash" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvTemper3" map="P"/>
  <field class="crl.player.advancements.AdvTemper3" name="requirements" map="O"/>
  <method class="crl.player.advancements.AdvTemper3" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvTemper3" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvTemper3" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvTemper3" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvTemper3" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvTemper2" map="Q"/>
  <field class="crl.player.advancements.AdvTemper2" name="requirements" map="P"/>
  <method class="crl.player.advancements.AdvTemper2" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvTemper2" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvTemper2" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvTemper2" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvTemper2" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatPowerBlow" map="R"/>
  <field class="crl.player.advancements.AdvCombatPowerBlow" name="requirements" map="Q"/>
  <method class="crl.player.advancements.AdvCombatPowerBlow" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatPowerBlow" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatPowerBlow" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatPowerBlow" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatPowerBlow" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvTemper1" map="S"/>
  <field class="crl.player.advancements.AdvTemper1" name="requirements" map="R"/>
  <method class="crl.player.advancements.AdvTemper1" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvTemper1" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvTemper1" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvTemper1" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvTemper1" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatKnockback" map="T"/>
  <field class="crl.player.advancements.AdvCombatKnockback" name="requirements" map="S"/>
  <method class="crl.player.advancements.AdvCombatKnockback" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatKnockback" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatKnockback" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatKnockback" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatKnockback" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatStun" map="U"/>
  <field class="crl.player.advancements.AdvCombatStun" name="requirements" map="T"/>
  <method class="crl.player.advancements.AdvCombatStun" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatStun" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatStun" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatStun" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatStun" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvResistance" map="V"/>
  <field class="crl.player.advancements.AdvResistance" name="requirements" map="U"/>
  <method class="crl.player.advancements.AdvResistance" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvResistance" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvResistance" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvResistance" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvResistance" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.Advancement" map="W"/>
  <method class="crl.player.advancements.Advancement" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.Advancement" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.Advancement" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.Advancement" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.Advancement" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatPierce" map="X"/>
  <field class="crl.player.advancements.AdvCombatPierce" name="requirements" map="V"/>
  <method class="crl.player.advancements.AdvCombatPierce" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatPierce" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatPierce" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatPierce" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatPierce" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvDiscipline4" map="Y"/>
  <field class="crl.player.advancements.AdvDiscipline4" name="requirements" map="W"/>
  <method class="crl.player.advancements.AdvDiscipline4" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvDiscipline4" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvDiscipline4" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvDiscipline4" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvDiscipline4" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvDiscipline3" map="Z"/>
  <field class="crl.player.advancements.AdvDiscipline3" name="requirements" map="X"/>
  <method class="crl.player.advancements.AdvDiscipline3" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvDiscipline3" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvDiscipline3" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvDiscipline3" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvDiscipline3" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvDiscipline2" map="_"/>
  <field class="crl.player.advancements.AdvDiscipline2" name="requirements" map="Y"/>
  <method class="crl.player.advancements.AdvDiscipline2" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvDiscipline2" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvDiscipline2" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvDiscipline2" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvDiscipline2" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvDiscipline1" map="a"/>
  <field class="crl.player.advancements.AdvDiscipline1" name="requirements" map="Z"/>
  <method class="crl.player.advancements.AdvDiscipline1" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvDiscipline1" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvDiscipline1" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvDiscipline1" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvDiscipline1" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvSoul4" map="b"/>
  <field class="crl.player.advancements.AdvSoul4" name="requirements" map="_"/>
  <method class="crl.player.advancements.AdvSoul4" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvSoul4" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvSoul4" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvSoul4" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvSoul4" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvSoul3" map="c"/>
  <field class="crl.player.advancements.AdvSoul3" name="requirements" map="a"/>
  <method class="crl.player.advancements.AdvSoul3" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvSoul3" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvSoul3" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvSoul3" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvSoul3" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvSoul2" map="d"/>
  <field class="crl.player.advancements.AdvSoul2" name="requirements" map="b"/>
  <method class="crl.player.advancements.AdvSoul2" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvSoul2" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvSoul2" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvSoul2" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvSoul2" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvDrain" map="e"/>
  <field class="crl.player.advancements.AdvDrain" name="requirements" map="c"/>
  <method class="crl.player.advancements.AdvDrain" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvDrain" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvDrain" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvDrain" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvDrain" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatCinetic" map="f"/>
  <field class="crl.player.advancements.AdvCombatCinetic" name="requirements" map="d"/>
  <method class="crl.player.advancements.AdvCombatCinetic" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatCinetic" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatCinetic" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatCinetic" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatCinetic" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvSoul1" map="g"/>
  <field class="crl.player.advancements.AdvSoul1" name="requirements" map="e"/>
  <method class="crl.player.advancements.AdvSoul1" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvSoul1" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvSoul1" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvSoul1" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvSoul1" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatCounter" map="h"/>
  <field class="crl.player.advancements.AdvCombatCounter" name="requirements" map="f"/>
  <method class="crl.player.advancements.AdvCombatCounter" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatCounter" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatCounter" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatCounter" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatCounter" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.advancements.AdvCombatDrashback" map="i"/>
  <field class="crl.player.advancements.AdvCombatDrashback" name="requirements" map="g"/>
  <method class="crl.player.advancements.AdvCombatDrashback" name="java.lang.String[] getRequirements()" map="A"/>
  <method class="crl.player.advancements.AdvCombatDrashback" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.player.advancements.AdvCombatDrashback" name="void advance(crl.player.Player)" map="A"/>
  <method class="crl.player.advancements.AdvCombatDrashback" name="java.lang.String getName()" map="C"/>
  <method class="crl.player.advancements.AdvCombatDrashback" name="java.lang.String getID()" map="D"/>
  <class name="crl.player.MonsterDeath" map="A"/>
  <field class="crl.player.MonsterDeath" name="monsterDescription" map="A"/>
  <field class="crl.player.MonsterDeath" name="times" map="B"/>
  <method class="crl.player.MonsterDeath" name="java.lang.String getMonsterDescription()" map="A"/>
  <method class="crl.player.MonsterDeath" name="void increaseDeaths()" map="B"/>
  <method class="crl.player.MonsterDeath" name="void setTimes(int)" map="A"/>
  <method class="crl.player.MonsterDeath" name="void setMonsterDescription(java.lang.String)" map="A"/>
  <method class="crl.player.MonsterDeath" name="int getTimes()" map="C"/>
  <class name="crl.player.GameSessionInfo" map="B"/>
  <field class="crl.player.GameSessionInfo" name="turns" map="A"/>
  <field class="crl.player.GameSessionInfo" name="STRANGLED_BY_ARMOR" map="B"/>
  <field class="crl.player.GameSessionInfo" name="QUIT" map="C"/>
  <field class="crl.player.GameSessionInfo" name="SMASHED" map="D"/>
  <field class="crl.player.GameSessionInfo" name="DROWNED" map="E"/>
  <field class="crl.player.GameSessionInfo" name="KEG" map="F"/>
  <field class="crl.player.GameSessionInfo" name="LIFEBURST" map="G"/>
  <field class="crl.player.GameSessionInfo" name="KILLED" map="H"/>
  <field class="crl.player.GameSessionInfo" name="deathLevel" map="I"/>
  <field class="crl.player.GameSessionInfo" name="history" map="J"/>
  <field class="crl.player.GameSessionInfo" name="ASCENDED" map="K"/>
  <field class="crl.player.GameSessionInfo" name="SHOCKED" map="L"/>
  <field class="crl.player.GameSessionInfo" name="deathLevelDescription" map="M"/>
  <field class="crl.player.GameSessionInfo" name="deathCause" map="N"/>
  <field class="crl.player.GameSessionInfo" name="player" map="O"/>
  <field class="crl.player.GameSessionInfo" name="killerMonster" map="P"/>
  <field class="crl.player.GameSessionInfo" name="deathCount" map="Q"/>
  <field class="crl.player.GameSessionInfo" name="goldCount" map="R"/>
  <field class="crl.player.GameSessionInfo" name="POISONED_TO_DEATH" map="S"/>
  <field class="crl.player.GameSessionInfo" name="BURNED_BY_LAVA" map="T"/>
  <field class="crl.player.GameSessionInfo" name="ENDLESS_PIT" map="U"/>
  <method class="crl.player.GameSessionInfo" name="void setDeathLevelDescription(java.lang.String)" map="A"/>
  <method class="crl.player.GameSessionInfo" name="java.lang.String getDeathLevelDescription()" map="A"/>
  <method class="crl.player.GameSessionInfo" name="void setKillerMonster(crl.monster.Monster)" map="A"/>
  <method class="crl.player.GameSessionInfo" name="java.util.Hashtable getDeathCount()" map="B"/>
  <method class="crl.player.GameSessionInfo" name="int getDeathLevel()" map="C"/>
  <method class="crl.player.GameSessionInfo" name="void addDeath(crl.monster.MonsterDefinition)" map="A"/>
  <method class="crl.player.GameSessionInfo" name="java.util.Vector getHistory()" map="D"/>
  <method class="crl.player.GameSessionInfo" name="void setDeathCause(int)" map="A"/>
  <method class="crl.player.GameSessionInfo" name="java.lang.String getDeathString()" map="E"/>
  <method class="crl.player.GameSessionInfo" name="void setPlayer(crl.player.Player)" map="A"/>
  <method class="crl.player.GameSessionInfo" name="int getTurns()" map="F"/>
  <method class="crl.player.GameSessionInfo" name="void increaseTurns()" map="G"/>
  <method class="crl.player.GameSessionInfo" name="void setDeathLevel(int)" map="B"/>
  <method class="crl.player.GameSessionInfo" name="int getTotalDeathCount()" map="H"/>
  <method class="crl.player.GameSessionInfo" name="long getGoldCount()" map="I"/>
  <method class="crl.player.GameSessionInfo" name="java.lang.String getShortDeathString()" map="J"/>
  <method class="crl.player.GameSessionInfo" name="crl.player.Player getPlayer()" map="K"/>
  <method class="crl.player.GameSessionInfo" name="void addHistoryItem(java.lang.String)" map="B"/>
  <method class="crl.player.GameSessionInfo" name="void addGold(int)" map="C"/>
  <class name="crl.player.PlayerEventListener" map="C"/>
  <method class="crl.player.PlayerEventListener" name="void informEvent(int, java.lang.Object)" map="A"/>
  <method class="crl.player.PlayerEventListener" name="void informEvent(int)" map="E"/>
  <class name="crl.player.Player" map="D"/>
  <field class="crl.player.Player" name="skills" map="i"/>
  <field class="crl.player.Player" name="WIN" map="j"/>
  <field class="crl.player.Player" name="evadeBreak" map="k"/>
  <field class="crl.player.Player" name="KEYINMINENT" map="l"/>
  <field class="crl.player.Player" name="DROWNED" map="m"/>
  <field class="crl.player.Player" name="pietyCounter" map="n"/>
  <field class="crl.player.Player" name="DAMAGE_MORPHED_WITH_STRONG_ARMOR" map="o"/>
  <field class="crl.player.Player" name="STATUS_STUN" map="p"/>
  <field class="crl.player.Player" name="evadePointsMax" map="q"/>
  <field class="crl.player.Player" name="availableSkills" map="r"/>
  <field class="crl.player.Player" name="gold" map="s"/>
  <field class="crl.player.Player" name="fov" map="t"/>
  <field class="crl.player.Player" name="DAMAGE_WALKED_ON_LAVA" map="u"/>
  <field class="crl.player.Player" name="evasion" map="v"/>
  <field class="crl.player.Player" name="baseSightRange" map="w"/>
  <field class="crl.player.Player" name="EVT_BACK_LEVEL" map="x"/>
  <field class="crl.player.Player" name="classString" map="y"/>
  <field class="crl.player.Player" name="gems" map="z"/>
  <field class="crl.player.Player" name="FEMALE" map="&#x00a2;"/>
  <field class="crl.player.Player" name="petrifyCount" map="&#x00a3;"/>
  <field class="crl.player.Player" name="MALE" map="&#x00a4;"/>
  <field class="crl.player.Player" name="ADVANCEMENTS" map="&#x00a5;"/>
  <field class="crl.player.Player" name="accesory" map="&#x00aa;"/>
  <field class="crl.player.Player" name="EVT_FO23RWARD" map="&#x00b5;"/>
  <field class="crl.player.Player" name="sex" map="&#x00ba;"/>
  <field class="crl.player.Player" name="DAMAGE_JINX" map="&#x00c0;"/>
  <field class="crl.player.Player" name="EVT_RE23TURN" map="&#x00c1;"/>
  <field class="crl.player.Player" name="prayerCount" map="&#x00c2;"/>
  <field class="crl.player.Player" name="currentTactic" map="&#x00c3;"/>
  <field class="crl.player.Player" name="lastWalkingDirection" map="&#x00c4;"/>
  <field class="crl.player.Player" name="chargeCounter" map="&#x00c5;"/>
  <field class="crl.player.Player" name="invincibleCount" map="&#x00c6;"/>
  <field class="crl.player.Player" name="score" map="&#x00c7;"/>
  <field class="crl.player.Player" name="DAMAGE_KEG" map="&#x00c8;"/>
  <field class="crl.player.Player" name="integrityPoints" map="&#x00c9;"/>
  <field class="crl.player.Player" name="game" map="&#x00ca;"/>
  <field class="crl.player.Player" name="mana" map="&#x00cb;"/>
  <field class="crl.player.Player" name="SEX_MALE" map="&#x00cc;"/>
  <field class="crl.player.Player" name="DAMAGE_SHOCKED" map="&#x00cd;"/>
  <field class="crl.player.Player" name="carryMax" map="&#x00ce;"/>
  <field class="crl.player.Player" name="gameSessionInfo" map="&#x00cf;"/>
  <field class="crl.player.Player" name="EVT_CHAT" map="&#x00d0;"/>
  <field class="crl.player.Player" name="STATUS_PETRIFY" map="&#x00d1;"/>
  <field class="crl.player.Player" name="EVT_LEVELUP" map="&#x00d2;"/>
  <field class="crl.player.Player" name="name" map="&#x00d3;"/>
  <field class="crl.player.Player" name="SEX_FEMALE" map="&#x00d4;"/>
  <field class="crl.player.Player" name="attack" map="&#x00d5;"/>
  <field class="crl.player.Player" name="jumpingCounter" map="&#x00d6;"/>
  <field class="crl.player.Player" name="manaHealCount" map="&#x00d8;"/>
  <field class="crl.player.Player" name="evadeHealCount" map="&#x00d9;"/>
  <field class="crl.player.Player" name="doNotRecordScore" map="&#x00da;"/>
  <field class="crl.player.Player" name="EVT_GOTO_LEVEL" map="&#x00db;"/>
  <field class="crl.player.Player" name="DAMAGE_USING_ITEM" map="&#x00dc;"/>
  <field class="crl.player.Player" name="EVT_NEXT_LEVEL" map="&#x00dd;"/>
  <field class="crl.player.Player" name="armor" map="&#x00de;"/>
  <field class="crl.player.Player" name="manaMax" map="&#x00df;"/>
  <field class="crl.player.Player" name="DAMAGE_POISON" map="&#x00e0;"/>
  <field class="crl.player.Player" name="EVT_SMASHED" map="&#x00e1;"/>
  <field class="crl.player.Player" name="attackCost" map="&#x00e2;"/>
  <field class="crl.player.Player" name="soulPower" map="&#x00e3;"/>
  <field class="crl.player.Player" name="isAttacking" map="&#x00e4;"/>
  <field class="crl.player.Player" name="STATUS_FAINTED" map="&#x00e5;"/>
  <field class="crl.player.Player" name="secondaryWeapon" map="&#x00e6;"/>
  <field class="crl.player.Player" name="evadePoints" map="&#x00e7;"/>
  <field class="crl.player.Player" name="TACTIC_BRAVE" map="&#x00e8;"/>
  <field class="crl.player.Player" name="fireballWhipCounter" map="&#x00e9;"/>
  <field class="crl.player.Player" name="TACTIC_NORMAL" map="&#x00ea;"/>
  <field class="crl.player.Player" name="justEvaded" map="&#x00eb;"/>
  <field class="crl.player.Player" name="tmpAvailableAdvancements" map="&#x00ec;"/>
  <field class="crl.player.Player" name="STATUS_POISON" map="&#x00ed;"/>
  <field class="crl.player.Player" name="playerEventListener" map="&#x00ee;"/>
  <field class="crl.player.Player" name="walkCost" map="&#x00ef;"/>
  <field class="crl.player.Player" name="inventory" map="&#x00f0;"/>
  <field class="crl.player.Player" name="integrityMax" map="&#x00f1;"/>
  <field class="crl.player.Player" name="DAMAGE_LIFEBURST" map="&#x00f2;"/>
  <field class="crl.player.Player" name="consecutiveHits" map="&#x00f3;"/>
  <field class="crl.player.Player" name="castCost" map="&#x00f4;"/>
  <field class="crl.player.Player" name="bloodThirstyCounter" map="&#x00f5;"/>
  <field class="crl.player.Player" name="energyFieldCounter" map="&#x00f6;"/>
  <field class="crl.player.Player" name="invisibleCount" map="&#x00f8;"/>
  <field class="crl.player.Player" name="DEATH" map="&#x00f9;"/>
  <field class="crl.player.Player" name="hashFlags" map="&#x00fa;"/>
  <field class="crl.player.Player" name="isRunning" map="&#x00fb;"/>
  <field class="crl.player.Player" name="lastAttackDirection" map="&#x00fc;"/>
  <field class="crl.player.Player" name="EVT_MERCHANT" map="&#x00fd;"/>
  <field class="crl.player.Player" name="weapon" map="&#x00fe;"/>
  <field class="crl.player.Player" name="faintCount" map="&#x00ff;"/>
  <method class="crl.player.Player" name="void informPlayerEvent(int, java.lang.Object)" map="A"/>
  <method class="crl.player.Player" name="int getScore()" map="&#x00a3;"/>
  <method class="crl.player.Player" name="void setIntegrityMax(int)" map="G"/>
  <method class="crl.player.Player" name="void setInvincible(int)" map="H"/>
  <method class="crl.player.Player" name="boolean sees(sz.util.Position)" map="C"/>
  <method class="crl.player.Player" name="int getEvasion()" map="&#x00a4;"/>
  <method class="crl.player.Player" name="java.util.Vector getAvailableSkills()" map="&#x00a5;"/>
  <method class="crl.player.Player" name="void increaseCarryMax(int)" map="I"/>
  <method class="crl.player.Player" name="int getBaseIntegrityMax()" map="&#x00aa;"/>
  <method class="crl.player.Player" name="int getAttack()" map="&#x00b5;"/>
  <method class="crl.player.Player" name="int getBaseEvasion()" map="&#x00ba;"/>
  <method class="crl.player.Player" name="void setGameSessionInfo(crl.player.GameSessionInfo)" map="A"/>
  <method class="crl.player.Player" name="int getBaseWalkCost()" map="&#x00c0;"/>
  <method class="crl.player.Player" name="void setSecondaryWeapon(crl.item.Item)" map="A"/>
  <method class="crl.player.Player" name="void increasePiety(int)" map="J"/>
  <method class="crl.player.Player" name="void recoverEvade(int)" map="K"/>
  <method class="crl.player.Player" name="void setEvadePointsMax(int)" map="L"/>
  <method class="crl.player.Player" name="void setParalized(int)" map="M"/>
  <method class="crl.player.Player" name="void updateStatus()" map="J"/>
  <method class="crl.player.Player" name="boolean isCharging()" map="&#x00c1;"/>
  <method class="crl.player.Player" name="boolean hasEnergyField()" map="&#x00c2;"/>
  <method class="crl.player.Player" name="void see()" map="&#x00c3;"/>
  <method class="crl.player.Player" name="crl.game.Game getGame()" map="&#x00c4;"/>
  <method class="crl.player.Player" name="void doNothing()" map="&#x00c5;"/>
  <method class="crl.player.Player" name="java.lang.String getArmorDescription()" map="&#x00c6;"/>
  <method class="crl.player.Player" name="sz.util.Position getNearestMonsterPosition()" map="&#x00c7;"/>
  <method class="crl.player.Player" name="int getBaseAttackCost()" map="&#x00c8;"/>
  <method class="crl.player.Player" name="int getPiety()" map="&#x00c9;"/>
  <method class="crl.player.Player" name="java.lang.String getName()" map="&#x00ca;"/>
  <method class="crl.player.Player" name="crl.ui.Appearance getAppearance()" map="G"/>
  <method class="crl.player.Player" name="int getBaseSightRange()" map="&#x00cb;"/>
  <method class="crl.player.Player" name="void reduceMana(int)" map="N"/>
  <method class="crl.player.Player" name="void darken()" map="&#x00cc;"/>
  <method class="crl.player.Player" name="int getCastCost()" map="&#x00cd;"/>
  <method class="crl.player.Player" name="boolean isParalized()" map="&#x00ce;"/>
  <method class="crl.player.Player" name="int getManaMax()" map="&#x00cf;"/>
  <method class="crl.player.Player" name="void removeItem(crl.player.Equipment)" map="A"/>
  <method class="crl.player.Player" name="void setManaMax(int)" map="O"/>
  <method class="crl.player.Player" name="void recoverMana(int)" map="P"/>
  <method class="crl.player.Player" name="void setBaseSightRange(int)" map="Q"/>
  <method class="crl.player.Player" name="java.lang.String getSecondaryWeaponDescription()" map="&#x00d0;"/>
  <method class="crl.player.Player" name="boolean isDrashBack()" map="&#x00d1;"/>
  <method class="crl.player.Player" name="void recoverManaP(int)" map="R"/>
  <method class="crl.player.Player" name="boolean isInvincible()" map="&#x00d2;"/>
  <method class="crl.player.Player" name="int getCarryMax()" map="&#x00d3;"/>
  <method class="crl.player.Player" name="int getBaseAttack()" map="&#x00d4;"/>
  <method class="crl.player.Player" name="void setCastCost(int)" map="S"/>
  <method class="crl.player.Player" name="int getBaseSoulPower()" map="&#x00d5;"/>
  <method class="crl.player.Player" name="void setAttack(int)" map="T"/>
  <method class="crl.player.Player" name="void reduceQuantityOf(crl.item.Item)" map="B"/>
  <method class="crl.player.Player" name="java.util.Vector getInventory()" map="&#x00d6;"/>
  <method class="crl.player.Player" name="int getSoulPower()" map="&#x00d8;"/>
  <method class="crl.player.Player" name="void informPlayerEvent(int)" map="U"/>
  <method class="crl.player.Player" name="crl.player.GameSessionInfo getGameSessionInfo()" map="&#x00d9;"/>
  <method class="crl.player.Player" name="void act()" map="F"/>
  <method class="crl.player.Player" name="void setPetrify(int)" map="V"/>
  <method class="crl.player.Player" name="boolean getFlag(java.lang.String)" map="E"/>
  <method class="crl.player.Player" name="void reduceCastCost(int)" map="W"/>
  <method class="crl.player.Player" name="void setAttackCost(int)" map="X"/>
  <method class="crl.player.Player" name="void setCurrentTactic(int)" map="Y"/>
  <method class="crl.player.Player" name="java.lang.String getWeaponDescription()" map="&#x00da;"/>
  <method class="crl.player.Player" name="int getBaseManaMax()" map="&#x00db;"/>
  <method class="crl.player.Player" name="boolean isBloodThirsty()" map="&#x00dc;"/>
  <method class="crl.player.Player" name="void addItem(crl.item.Item)" map="C"/>
  <method class="crl.player.Player" name="void setEvadePoints(int)" map="Z"/>
  <method class="crl.player.Player" name="void changeTactic()" map="&#x00dd;"/>
  <method class="crl.player.Player" name="void setRunning(boolean)" map="C"/>
  <method class="crl.player.Player" name="void land()" map="&#x00de;"/>
  <method class="crl.player.Player" name="void landOn(sz.util.Position)" map="D"/>
  <method class="crl.player.Player" name="void increaseSoulPower(int)" map="_"/>
  <method class="crl.player.Player" name="int getCurrentTactic()" map="&#x00df;"/>
  <method class="crl.player.Player" name="void addHistoricEvent(java.lang.String)" map="F"/>
  <method class="crl.player.Player" name="void recoverIntegrity(int)" map="a"/>
  <method class="crl.player.Player" name="int getSex()" map="&#x00e0;"/>
  <method class="crl.player.Player" name="boolean isFainted()" map="&#x00e1;"/>
  <method class="crl.player.Player" name="void addScore(int)" map="b"/>
  <method class="crl.player.Player" name="int getEvadeBreak()" map="&#x00e2;"/>
  <method class="crl.player.Player" name="int getGold()" map="&#x00e3;"/>
  <method class="crl.player.Player" name="crl.item.Item getWeapon()" map="&#x00e4;"/>
  <method class="crl.player.Player" name="void setIntegrityPoints(int)" map="c"/>
  <method class="crl.player.Player" name="void increaseChargeCounter()" map="&#x00e5;"/>
  <method class="crl.player.Player" name="void setIsAttacking()" map="&#x00e6;"/>
  <method class="crl.player.Player" name="int getMana()" map="&#x00e7;"/>
  <method class="crl.player.Player" name="int getIntegrityPoints()" map="&#x00e8;"/>
  <method class="crl.player.Player" name="void addGold(int)" map="d"/>
  <method class="crl.player.Player" name="void setEvadeBreak(int)" map="e"/>
  <method class="crl.player.Player" name="void resetChargeCounter()" map="&#x00e9;"/>
  <method class="crl.player.Player" name="void setName(java.lang.String)" map="G"/>
  <method class="crl.player.Player" name="void setSex(int)" map="f"/>
  <method class="crl.player.Player" name="int getBaseEvadePointsMax()" map="&#x00ea;"/>
  <method class="crl.player.Player" name="void damageIntegrity(int)" map="g"/>
  <method class="crl.player.Player" name="crl.player.PlayerEventListener getPlayerEventListener()" map="&#x00eb;"/>
  <method class="crl.player.Player" name="void setPlayerEventListener(crl.player.PlayerEventListener)" map="A"/>
  <method class="crl.player.Player" name="void setWalkCost(int)" map="h"/>
  <method class="crl.player.Player" name="void setLastWalkingDirection(int)" map="i"/>
  <method class="crl.player.Player" name="int getBaseCastCost()" map="&#x00ec;"/>
  <method class="crl.player.Player" name="boolean hasItem(crl.item.Item)" map="D"/>
  <method class="crl.player.Player" name="crl.item.Item getSecondaryWeapon()" map="&#x00ed;"/>
  <method class="crl.player.Player" name="boolean isInvisible()" map="&#x00ee;"/>
  <method class="crl.player.Player" name="crl.item.Item getAccesory()" map="&#x00ef;"/>
  <method class="crl.player.Player" name="void selfDamage(int, int)" map="A"/>
  <method class="crl.player.Player" name="int getLastWalkingDirection()" map="&#x00f0;"/>
  <method class="crl.player.Player" name="boolean hasStoredEnergy()" map="&#x00f1;"/>
  <method class="crl.player.Player" name="void setDoNotRecordScore(boolean)" map="D"/>
  <method class="crl.player.Player" name="java.lang.String getEquipedWeaponDescription()" map="&#x00f2;"/>
  <method class="crl.player.Player" name="sz.util.Position getFreeSquareAround(sz.util.Position)" map="E"/>
  <method class="crl.player.Player" name="void setEvasion(int)" map="j"/>
  <method class="crl.player.Player" name="boolean sees(crl.monster.Monster)" map="D"/>
  <method class="crl.player.Player" name="boolean canCarry()" map="&#x00f3;"/>
  <method class="crl.player.Player" name="void reduceWalkCost(int)" map="k"/>
  <method class="crl.player.Player" name="void setBloodThirsty(int)" map="l"/>
  <method class="crl.player.Player" name="void setAccesory(crl.item.Item)" map="E"/>
  <method class="crl.player.Player" name="void reduceGold(int)" map="m"/>
  <method class="crl.player.Player" name="void setInvisible(int)" map="n"/>
  <method class="crl.player.Player" name="void setMana(int)" map="o"/>
  <method class="crl.player.Player" name="java.lang.String getClassString()" map="&#x00f4;"/>
  <method class="crl.player.Player" name="boolean isDodging()" map="&#x00f5;"/>
  <method class="crl.player.Player" name="boolean isDead()" map="&#x00f6;"/>
  <method class="crl.player.Player" name="void bounceBack(sz.util.Position, int)" map="A"/>
  <method class="crl.player.Player" name="void setFOV(sz.fov.FOV)" map="A"/>
  <method class="crl.player.Player" name="int getWalkCost()" map="&#x00f8;"/>
  <method class="crl.player.Player" name="void setSoulPower(int)" map="p"/>
  <method class="crl.player.Player" name="boolean isPoisoned()" map="&#x00f9;"/>
  <method class="crl.player.Player" name="void increaseJumping(int)" map="q"/>
  <method class="crl.player.Player" name="void increaseAttack(int)" map="r"/>
  <method class="crl.player.Player" name="void moveRandomly()" map="&#x00fa;"/>
  <method class="crl.player.Player" name="int getAttackCost()" map="&#x00fb;"/>
  <method class="crl.player.Player" name="int getSightRange()" map="&#x00fc;"/>
  <method class="crl.player.Player" name="int getEvadePoints()" map="&#x00fd;"/>
  <method class="crl.player.Player" name="void setFainted(int)" map="s"/>
  <method class="crl.player.Player" name="void setCarryMax(int)" map="t"/>
  <method class="crl.player.Player" name="void reduceAttackCost(int)" map="u"/>
  <method class="crl.player.Player" name="java.lang.String getStatusString()" map="&#x00fe;"/>
  <method class="crl.player.Player" name="void setFlag(java.lang.String, boolean)" map="A"/>
  <method class="crl.player.Player" name="void setGame(crl.game.Game)" map="A"/>
  <method class="crl.player.Player" name="int getLastAttackDirection()" map="&#x00ff;"/>
  <method class="crl.player.Player" name="int getBaseEvadeBreak()" map="&#x0100;"/>
  <method class="crl.player.Player" name="boolean isProtected()" map="&#x0101;"/>
  <method class="crl.player.Player" name="boolean isDoNotRecordScore()" map="&#x0102;"/>
  <method class="crl.player.Player" name="boolean tryHit(crl.monster.Monster, int)" map="B"/>
  <method class="crl.player.Player" name="void setWeapon(crl.item.Item)" map="F"/>
  <method class="crl.player.Player" name="java.util.Vector getAvailableAdvancements()" map="&#x0103;"/>
  <method class="crl.player.Player" name="boolean tryHit(crl.monster.Monster)" map="E"/>
  <method class="crl.player.Player" name="void setLastAttackDirection(int)" map="v"/>
  <method class="crl.player.Player" name="void setArmor(crl.item.Item)" map="G"/>
  <method class="crl.player.Player" name="int getIntegrityMax()" map="&#x0104;"/>
  <method class="crl.player.Player" name="int getEvadePointsMax()" map="&#x0105;"/>
  <method class="crl.player.Player" name="int getItemCount()" map="&#x0106;"/>
  <method class="crl.player.Player" name="void setEnergyField(int)" map="w"/>
  <method class="crl.player.Player" name="boolean hasIncreasedJumping()" map="&#x0107;"/>
  <method class="crl.player.Player" name="void damageIntegrity(crl.monster.Monster, int)" map="C"/>
  <method class="crl.player.Player" name="void decreasePiety(int)" map="x"/>
  <method class="crl.player.Player" name="boolean isPetrified()" map="&#x0108;"/>
  <method class="crl.player.Player" name="void doHit(boolean)" map="E"/>
  <method class="crl.player.Player" name="java.lang.String getAccDescription()" map="&#x0109;"/>
  <method class="crl.player.Player" name="crl.item.Item getArmor()" map="&#x010a;"/>
  <method class="crl.player.Player" name="void recoverIntegrityP(int)" map="y"/>
  <method class="crl.player.Player" name="void checkDeath(crl.monster.Monster)" map="F"/>
  <method class="crl.player.Player" name="void checkDeath()" map="&#x010b;"/>
  <method class="crl.player.Player" name="void addGem()" map="&#x010c;"/>
  <class name="crl.player.HiScore" map="E"/>
  <field class="crl.player.HiScore" name="date" map="A"/>
  <field class="crl.player.HiScore" name="name" map="B"/>
  <field class="crl.player.HiScore" name="turns" map="C"/>
  <field class="crl.player.HiScore" name="deathString" map="D"/>
  <field class="crl.player.HiScore" name="deathLevel" map="E"/>
  <field class="crl.player.HiScore" name="score" map="F"/>
  <method class="crl.player.HiScore" name="void setTurns(java.lang.String)" map="A"/>
  <method class="crl.player.HiScore" name="void setDate(java.lang.String)" map="B"/>
  <method class="crl.player.HiScore" name="int getDeathLevel()" map="A"/>
  <method class="crl.player.HiScore" name="void setName(java.lang.String)" map="C"/>
  <method class="crl.player.HiScore" name="java.lang.String getDate()" map="B"/>
  <method class="crl.player.HiScore" name="int getScore()" map="C"/>
  <method class="crl.player.HiScore" name="java.lang.String getName()" map="D"/>
  <method class="crl.player.HiScore" name="java.lang.String getTurns()" map="E"/>
  <method class="crl.player.HiScore" name="void setDeathString(java.lang.String)" map="D"/>
  <method class="crl.player.HiScore" name="java.lang.String getDeathString()" map="F"/>
  <method class="crl.player.HiScore" name="void setScore(int)" map="A"/>
  <method class="crl.player.HiScore" name="void setDeathLevel(int)" map="B"/>
  <class name="crl.player.Equipment" map="F"/>
  <field class="crl.player.Equipment" name="eqMode" map="O"/>
  <field class="crl.player.Equipment" name="item" map="P"/>
  <field class="crl.player.Equipment" name="quantity" map="Q"/>
  <method class="crl.player.Equipment" name="char getMenuChar()" map="D"/>
  <method class="crl.player.Equipment" name="java.lang.String getMenuDetail()" map="B"/>
  <method class="crl.player.Equipment" name="void reduceQuantity()" map="n"/>
  <method class="crl.player.Equipment" name="java.awt.Image getMenuImage()" map="C"/>
  <method class="crl.player.Equipment" name="void setQuantity(int)" map="D"/>
  <method class="crl.player.Equipment" name="int getQuantity()" map="o"/>
  <method class="crl.player.Equipment" name="int getMenuColor()" map="E"/>
  <method class="crl.player.Equipment" name="crl.item.Item getItem()" map="p"/>
  <method class="crl.player.Equipment" name="void increaseQuantity()" map="q"/>
  <method class="crl.player.Equipment" name="java.lang.String getMenuDescription()" map="A"/>
  <method class="crl.player.Equipment" name="boolean isEmpty()" map="r"/>
  <class name="crl.player.Skill" map="G"/>
  <field class="crl.player.Skill" name="symbolic" map="A"/>
  <field class="crl.player.Skill" name="action" map="B"/>
  <field class="crl.player.Skill" name="actionDescription" map="C"/>
  <field class="crl.player.Skill" name="heartCost" map="D"/>
  <method class="crl.player.Skill" name="java.lang.String getMenuDescription()" map="A"/>
  <method class="crl.player.Skill" name="boolean isSymbolic()" map="F"/>
  <method class="crl.player.Skill" name="java.lang.String getMenuDetail()" map="B"/>
  <method class="crl.player.Skill" name="java.awt.Image getMenuImage()" map="C"/>
  <method class="crl.player.Skill" name="char getMenuChar()" map="D"/>
  <method class="crl.player.Skill" name="int getMenuColor()" map="E"/>
  <method class="crl.player.Skill" name="crl.action.Action getAction()" map="G"/>
  <package name="crl.game" map="M"/>
  <class name="crl.game.SFXManager" map="A"/>
  <field class="crl.game.SFXManager" name="currentThread" map="A"/>
  <field class="crl.game.SFXManager" name="enabled" map="B"/>
  <method class="crl.game.SFXManager" name="void setEnabled(boolean)" map="A"/>
  <method class="crl.game.SFXManager" name="void play(java.lang.String)" map="A"/>
  <class name="crl.game.CRLException" map="B"/>
  <field class="crl.game.CRLException" name="message" map="A"/>
  <method class="crl.game.CRLException" name="java.lang.String toString()" map="toString"/>
  <class name="crl.game.STMusicManagerOld" map="C"/>
  <field class="crl.game.STMusicManagerOld" name="musics" map="A"/>
  <field class="crl.game.STMusicManagerOld" name="thus" map="B"/>
  <field class="crl.game.STMusicManagerOld" name="enabled" map="C"/>
  <field class="crl.game.STMusicManagerOld" name="midiPlayer" map="D"/>
  <field class="crl.game.STMusicManagerOld" name="playing" map="E"/>
  <field class="crl.game.STMusicManagerOld" name="currentMP3Thread" map="F"/>
  <method class="crl.game.STMusicManagerOld" name="void setEnabled(boolean)" map="A"/>
  <method class="crl.game.STMusicManagerOld" name="void playKey(java.lang.String)" map="A"/>
  <method class="crl.game.STMusicManagerOld" name="void playForLevel(int, java.lang.String)" map="A"/>
  <method class="crl.game.STMusicManagerOld" name="void addMusic(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.game.STMusicManagerOld" name="void play(java.lang.String)" map="B"/>
  <method class="crl.game.STMusicManagerOld" name="void die()" map="A"/>
  <method class="crl.game.STMusicManagerOld" name="void stopMusic()" map="B"/>
  <method class="crl.game.STMusicManagerOld" name="void initManager()" map="C"/>
  <class name="crl.game.GameFiles" map="D"/>
  <method class="crl.game.GameFiles" name="void saveHiScore(crl.player.Player)" map="A"/>
  <method class="crl.game.GameFiles" name="void permadeath(crl.player.Player)" map="B"/>
  <method class="crl.game.GameFiles" name="void saveGame(crl.game.Game, crl.player.Player, boolean)" map="A"/>
  <method class="crl.game.GameFiles" name="void saveMemorialFile(crl.player.Player)" map="C"/>
  <method class="crl.game.GameFiles" name="void saveChardump(crl.player.Player)" map="D"/>
  <method class="crl.game.GameFiles" name="void saveGame(crl.game.Game, crl.player.Player)" map="A"/>
  <method class="crl.game.GameFiles" name="crl.player.HiScore[] loadScores()" map="A"/>
  <class name="crl.game.PlayerGenerator" map="E"/>
  <field class="crl.game.PlayerGenerator" name="MALE_NAMES" map="A"/>
  <field class="crl.game.PlayerGenerator" name="VKILLER_ITEMS" map="B"/>
  <field class="crl.game.PlayerGenerator" name="FEMALE_NAMES" map="C"/>
  <field class="crl.game.PlayerGenerator" name="VKILLER_WEAPONS" map="D"/>
  <field class="crl.game.PlayerGenerator" name="thus" map="E"/>
  <field class="crl.game.PlayerGenerator" name="VKILLER_ARMORS" map="F"/>
  <field class="crl.game.PlayerGenerator" name="SPECIAL_PLAYERS" map="G"/>
  <method class="crl.game.PlayerGenerator" name="crl.player.Player generatePlayer()" map="A"/>
  <method class="crl.game.PlayerGenerator" name="crl.player.Player createSpecialPlayer(java.lang.String)" map="A"/>
  <method class="crl.game.PlayerGenerator" name="crl.player.Player getPlayer(java.lang.String, int)" map="A"/>
  <method class="crl.game.PlayerGenerator" name="void initSpecialPlayers()" map="B"/>
  <class name="crl.game.STMusicManagerNew" map="F"/>
  <field class="crl.game.STMusicManagerNew" name="musics" map="A"/>
  <field class="crl.game.STMusicManagerNew" name="currentMidiThread" map="B"/>
  <field class="crl.game.STMusicManagerNew" name="thus" map="C"/>
  <field class="crl.game.STMusicManagerNew" name="enabled" map="D"/>
  <field class="crl.game.STMusicManagerNew" name="playing" map="E"/>
  <field class="crl.game.STMusicManagerNew" name="currentMP3Thread" map="F"/>
  <method class="crl.game.STMusicManagerNew" name="void playForLevel(java.lang.String)" map="A"/>
  <method class="crl.game.STMusicManagerNew" name="void stopMusic()" map="A"/>
  <method class="crl.game.STMusicManagerNew" name="void initManager()" map="B"/>
  <method class="crl.game.STMusicManagerNew" name="boolean isEnabled()" map="C"/>
  <method class="crl.game.STMusicManagerNew" name="void playKey(java.lang.String)" map="B"/>
  <method class="crl.game.STMusicManagerNew" name="void play(java.lang.String)" map="C"/>
  <method class="crl.game.STMusicManagerNew" name="void addMusic(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.game.STMusicManagerNew" name="void die()" map="D"/>
  <method class="crl.game.STMusicManagerNew" name="void setEnabled(boolean)" map="A"/>
  <class name="crl.game.Game" map="G"/>
  <field class="crl.game.Game" name="currentLevel" map="&#x00e1;"/>
  <field class="crl.game.Game" name="endGame" map="&#x00e2;"/>
  <field class="crl.game.Game" name="timeSwitch" map="&#x00e3;"/>
  <field class="crl.game.Game" name="reports" map="&#x00e4;"/>
  <field class="crl.game.Game" name="DEATHMESSAGES" map="&#x00e5;"/>
  <field class="crl.game.Game" name="levelPath" map="&#x00e6;"/>
  <field class="crl.game.Game" name="lastGeneratedItemIndex" map="&#x00e7;"/>
  <field class="crl.game.Game" name="isDay" map="&#x00e8;"/>
  <field class="crl.game.Game" name="storedLevels" map="&#x00e9;"/>
  <field class="crl.game.Game" name="ui" map="&#x00ea;"/>
  <field class="crl.game.Game" name="currentGame" map="&#x00eb;"/>
  <field class="crl.game.Game" name="player" map="&#x00ec;"/>
  <field class="crl.game.Game" name="turns" map="&#x00ed;"/>
  <field class="crl.game.Game" name="uniqueRegister" map="&#x00ee;"/>
  <field class="crl.game.Game" name="canSave" map="&#x00ef;"/>
  <field class="crl.game.Game" name="dispatcher" map="&#x00f0;"/>
  <method class="crl.game.Game" name="void informEvent(int)" map="E"/>
  <method class="crl.game.Game" name="void generateLevelPath()" map="_"/>
  <method class="crl.game.Game" name="java.lang.String getVersion()" map="a"/>
  <method class="crl.game.Game" name="void commandSelected(int)" map="A"/>
  <method class="crl.game.Game" name="java.util.Vector getReports()" map="b"/>
  <method class="crl.game.Game" name="void addReport(java.lang.String)" map="L"/>
  <method class="crl.game.Game" name="void finishGame()" map="c"/>
  <method class="crl.game.Game" name="void resume()" map="d"/>
  <method class="crl.game.Game" name="boolean wasUniqueGenerated(java.lang.String)" map="M"/>
  <method class="crl.game.Game" name="void crash(java.lang.String, java.lang.Throwable)" map="A"/>
  <method class="crl.game.Game" name="void newGame()" map="e"/>
  <method class="crl.game.Game" name="void setPlayer(crl.player.Player)" map="B"/>
  <method class="crl.game.Game" name="crl.game.Game getCurrentGame()" map="f"/>
  <method class="crl.game.Game" name="void wonGame()" map="g"/>
  <method class="crl.game.Game" name="void exitGame()" map="h"/>
  <method class="crl.game.Game" name="void resetUniqueRegister()" map="i"/>
  <method class="crl.game.Game" name="void arena()" map="j"/>
  <method class="crl.game.Game" name="void informEvent(int, java.lang.Object)" map="A"/>
  <method class="crl.game.Game" name="boolean canSave()" map="k"/>
  <method class="crl.game.Game" name="void setInterfaces(crl.ui.UserInterface)" map="B"/>
  <method class="crl.game.Game" name="void loadLevel(java.lang.String)" map="N"/>
  <method class="crl.game.Game" name="void training()" map="l"/>
  <method class="crl.game.Game" name="crl.player.Player getPlayer()" map="m"/>
  <method class="crl.game.Game" name="void setCanSave(boolean)" map="B"/>
  <method class="crl.game.Game" name="int getLastGeneratedItemIndex()" map="n"/>
  <method class="crl.game.Game" name="void loadBackLevel()" map="o"/>
  <method class="crl.game.Game" name="void setLevel(crl.level.Level)" map="A"/>
  <method class="crl.game.Game" name="void run()" map="p"/>
  <method class="crl.game.Game" name="void resumeScreen()" map="q"/>
  <method class="crl.game.Game" name="void prologue()" map="r"/>
  <method class="crl.game.Game" name="void setCurrentGame(crl.game.Game)" map="A"/>
  <method class="crl.game.Game" name="void registerUniqueGenerated(java.lang.String)" map="O"/>
  <method class="crl.game.Game" name="void loadNextLevel()" map="s"/>
  <method class="crl.game.Game" name="void loadLevel(java.lang.String, int)" map="A"/>
  <package name="crl.item" map="N"/>
  <class name="crl.item.Modifier" map="A"/>
  <field class="crl.item.Modifier" name="harmsUndead" map="A"/>
  <field class="crl.item.Modifier" name="id" map="B"/>
  <field class="crl.item.Modifier" name="rangeBonus" map="C"/>
  <field class="crl.item.Modifier" name="vrangeBonus" map="D"/>
  <field class="crl.item.Modifier" name="defenseBonus" map="E"/>
  <field class="crl.item.Modifier" name="slicesThru" map="F"/>
  <field class="crl.item.Modifier" name="description" map="G"/>
  <field class="crl.item.Modifier" name="atkBonus" map="H"/>
  <field class="crl.item.Modifier" name="atkCostBonus" map="I"/>
  <method class="crl.item.Modifier" name="void setDescription(java.lang.String)" map="A"/>
  <method class="crl.item.Modifier" name="boolean isHarmsUndead()" map="A"/>
  <method class="crl.item.Modifier" name="void setAtkCostBonus(int)" map="A"/>
  <method class="crl.item.Modifier" name="java.lang.String getID()" map="B"/>
  <method class="crl.item.Modifier" name="void setDefenseBonus(int)" map="B"/>
  <method class="crl.item.Modifier" name="int getDefenseBonus()" map="C"/>
  <method class="crl.item.Modifier" name="int getAtkCostBonus()" map="D"/>
  <method class="crl.item.Modifier" name="void setSlicesThru(boolean)" map="A"/>
  <method class="crl.item.Modifier" name="void setHarmsUndead(boolean)" map="B"/>
  <method class="crl.item.Modifier" name="int getRangeBonus()" map="E"/>
  <method class="crl.item.Modifier" name="int getVrangeBonus()" map="F"/>
  <method class="crl.item.Modifier" name="void setVrangeBonus(int)" map="C"/>
  <method class="crl.item.Modifier" name="boolean isSlicesThru()" map="G"/>
  <method class="crl.item.Modifier" name="java.lang.String getDescription()" map="H"/>
  <method class="crl.item.Modifier" name="int getAtkBonus()" map="I"/>
  <method class="crl.item.Modifier" name="void setRangeBonus(int)" map="D"/>
  <method class="crl.item.Modifier" name="void setAtkBonus(int)" map="E"/>
  <class name="crl.item.Item" map="B"/>
  <field class="crl.item.Item" name="WEAPON_MODIFIERS" map="E"/>
  <field class="crl.item.Item" name="modifier" map="F"/>
  <field class="crl.item.Item" name="definition" map="G"/>
  <field class="crl.item.Item" name="integrity" map="H"/>
  <field class="crl.item.Item" name="ARMOR_MODIFIERS" map="I"/>
  <field class="crl.item.Item" name="remainingTurnsToReload" map="J"/>
  <field class="crl.item.Item" name="uniqueID" map="K"/>
  <field class="crl.item.Item" name="defID" map="L"/>
  <method class="crl.item.Item" name="int getHitChance()" map="H"/>
  <method class="crl.item.Item" name="int getFeatureTurns()" map="I"/>
  <method class="crl.item.Item" name="java.lang.String getEffectOnWear()" map="J"/>
  <method class="crl.item.Item" name="java.lang.String getDescription()" map="K"/>
  <method class="crl.item.Item" name="void damage(int)" map="A"/>
  <method class="crl.item.Item" name="int getRemainingTurnsToReload()" map="L"/>
  <method class="crl.item.Item" name="int getMenuColor()" map="E"/>
  <method class="crl.item.Item" name="int getIntegrity()" map="M"/>
  <method class="crl.item.Item" name="boolean isVisible()" map="N"/>
  <method class="crl.item.Item" name="java.lang.String getModifierID()" map="O"/>
  <method class="crl.item.Item" name="int getReloadTurns()" map="P"/>
  <method class="crl.item.Item" name="void fix(int)" map="B"/>
  <method class="crl.item.Item" name="java.lang.String getFullID()" map="Q"/>
  <method class="crl.item.Item" name="java.lang.String getPlacedSmartFeature()" map="R"/>
  <method class="crl.item.Item" name="int getRange()" map="S"/>
  <method class="crl.item.Item" name="crl.ui.Appearance getAppearance()" map="T"/>
  <method class="crl.item.Item" name="java.lang.String getMenuDetail()" map="B"/>
  <method class="crl.item.Item" name="boolean isHarmsUndead()" map="U"/>
  <method class="crl.item.Item" name="java.lang.String getThrowMessage()" map="V"/>
  <method class="crl.item.Item" name="char getMenuChar()" map="D"/>
  <method class="crl.item.Item" name="int getAttackCost()" map="W"/>
  <method class="crl.item.Item" name="java.lang.String getUniqueID()" map="X"/>
  <method class="crl.item.Item" name="void reload()" map="Y"/>
  <method class="crl.item.Item" name="int getDefense()" map="Z"/>
  <method class="crl.item.Item" name="int getEvadeBreak()" map="_"/>
  <method class="crl.item.Item" name="void setRemainingTurnsToReload(int)" map="C"/>
  <method class="crl.item.Item" name="java.awt.Image getMenuImage()" map="C"/>
  <method class="crl.item.Item" name="int getThrowRange()" map="a"/>
  <method class="crl.item.Item" name="int getCoverage()" map="b"/>
  <method class="crl.item.Item" name="java.lang.String getMenuDescription()" map="A"/>
  <method class="crl.item.Item" name="java.lang.String getEffectOnUse()" map="c"/>
  <method class="crl.item.Item" name="java.lang.String getEffectOnAcquire()" map="d"/>
  <method class="crl.item.Item" name="int getAttack()" map="e"/>
  <method class="crl.item.Item" name="int getVerticalRange()" map="f"/>
  <method class="crl.item.Item" name="java.lang.String getUseMessage()" map="g"/>
  <method class="crl.item.Item" name="crl.item.ItemDefinition getDefinition()" map="h"/>
  <method class="crl.item.Item" name="boolean isModified()" map="i"/>
  <method class="crl.item.Item" name="boolean isSlicesThrough()" map="j"/>
  <method class="crl.item.Item" name="java.lang.String getAttributesDescription()" map="k"/>
  <class name="crl.item.ShopMenuItem" map="C"/>
  <field class="crl.item.ShopMenuItem" name="defId" map="M"/>
  <field class="crl.item.ShopMenuItem" name="x" map="N"/>
  <method class="crl.item.ShopMenuItem" name="java.lang.String getMenuDescription()" map="A"/>
  <method class="crl.item.ShopMenuItem" name="crl.item.ItemDefinition getItem()" map="l"/>
  <method class="crl.item.ShopMenuItem" name="char getMenuChar()" map="D"/>
  <method class="crl.item.ShopMenuItem" name="int getMenuColor()" map="E"/>
  <method class="crl.item.ShopMenuItem" name="crl.item.ItemDefinition getItemDefinition()" map="m"/>
  <class name="crl.item.ItemDefinition" map="D"/>
  <field class="crl.item.ItemDefinition" name="isUnique" map="A"/>
  <field class="crl.item.ItemDefinition" name="effectOnWear" map="B"/>
  <field class="crl.item.ItemDefinition" name="reloadTurns" map="C"/>
  <field class="crl.item.ItemDefinition" name="singleUse" map="D"/>
  <field class="crl.item.ItemDefinition" name="CAT_UNARMED" map="E"/>
  <field class="crl.item.ItemDefinition" name="CAT_WHIPS" map="F"/>
  <field class="crl.item.ItemDefinition" name="CAT_ARMOR" map="G"/>
  <field class="crl.item.ItemDefinition" name="attackSFX" map="H"/>
  <field class="crl.item.ItemDefinition" name="range" map="I"/>
  <field class="crl.item.ItemDefinition" name="slicesThrough" map="J"/>
  <field class="crl.item.ItemDefinition" name="CAT_WEAPON" map="K"/>
  <field class="crl.item.ItemDefinition" name="attack" map="L"/>
  <field class="crl.item.ItemDefinition" name="stackable" map="M"/>
  <field class="crl.item.ItemDefinition" name="lv1prob" map="N"/>
  <field class="crl.item.ItemDefinition" name="description" map="O"/>
  <field class="crl.item.ItemDefinition" name="CAT_SWORDS" map="P"/>
  <field class="crl.item.ItemDefinition" name="throwMessage" map="Q"/>
  <field class="crl.item.ItemDefinition" name="CAT_RINGS" map="R"/>
  <field class="crl.item.ItemDefinition" name="useMessage" map="S"/>
  <field class="crl.item.ItemDefinition" name="harmsUndead" map="T"/>
  <field class="crl.item.ItemDefinition" name="effectOnStep" map="U"/>
  <field class="crl.item.ItemDefinition" name="placedSmartFeature" map="V"/>
  <field class="crl.item.ItemDefinition" name="CAT_PROJECTILES" map="W"/>
  <field class="crl.item.ItemDefinition" name="verticalRange" map="X"/>
  <field class="crl.item.ItemDefinition" name="appearance" map="Y"/>
  <field class="crl.item.ItemDefinition" name="evadeBreak" map="Z"/>
  <field class="crl.item.ItemDefinition" name="ID" map="_"/>
  <field class="crl.item.ItemDefinition" name="reloadCostGold" map="a"/>
  <field class="crl.item.ItemDefinition" name="minLevel" map="b"/>
  <field class="crl.item.ItemDefinition" name="CAT_SPEARS" map="c"/>
  <field class="crl.item.ItemDefinition" name="CAT_ACCESORY" map="d"/>
  <field class="crl.item.ItemDefinition" name="defense" map="e"/>
  <field class="crl.item.ItemDefinition" name="CAT_STAVES" map="f"/>
  <field class="crl.item.ItemDefinition" name="baseIntegrity" map="g"/>
  <field class="crl.item.ItemDefinition" name="attackCost" map="h"/>
  <field class="crl.item.ItemDefinition" name="shopMenuItem" map="i"/>
  <field class="crl.item.ItemDefinition" name="effectOnAcquire" map="j"/>
  <field class="crl.item.ItemDefinition" name="hitChance" map="k"/>
  <field class="crl.item.ItemDefinition" name="menuDescription" map="l"/>
  <field class="crl.item.ItemDefinition" name="CAT_DAGGERS" map="m"/>
  <field class="crl.item.ItemDefinition" name="rarity" map="n"/>
  <field class="crl.item.ItemDefinition" name="CAT_PISTOLS" map="o"/>
  <field class="crl.item.ItemDefinition" name="goldPrice" map="p"/>
  <field class="crl.item.ItemDefinition" name="effectOnUse" map="q"/>
  <field class="crl.item.ItemDefinition" name="featureTurns" map="r"/>
  <field class="crl.item.ItemDefinition" name="CAT_DESCRIPTIONS" map="s"/>
  <field class="crl.item.ItemDefinition" name="equipCategory" map="t"/>
  <field class="crl.item.ItemDefinition" name="throwRange" map="u"/>
  <field class="crl.item.ItemDefinition" name="CAT_SHIELD" map="v"/>
  <method class="crl.item.ItemDefinition" name="int getHitChance()" map="A"/>
  <method class="crl.item.ItemDefinition" name="int getFeatureTurns()" map="B"/>
  <method class="crl.item.ItemDefinition" name="boolean isStackable()" map="C"/>
  <method class="crl.item.ItemDefinition" name="int getGoldPrice()" map="D"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getEffectOnWear()" map="E"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getDescription()" map="F"/>
  <method class="crl.item.ItemDefinition" name="boolean isSingleUse()" map="G"/>
  <method class="crl.item.ItemDefinition" name="void setBaseIntegrity(int)" map="A"/>
  <method class="crl.item.ItemDefinition" name="int getReloadTurns()" map="H"/>
  <method class="crl.item.ItemDefinition" name="int getLv1Prob()" map="I"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getPlacedSmartFeature()" map="J"/>
  <method class="crl.item.ItemDefinition" name="int getRange()" map="K"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getAttackSFX()" map="L"/>
  <method class="crl.item.ItemDefinition" name="crl.ui.Appearance getAppearance()" map="M"/>
  <method class="crl.item.ItemDefinition" name="void setEvadeBreak(int)" map="B"/>
  <method class="crl.item.ItemDefinition" name="boolean isHarmsUndead()" map="N"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getID()" map="O"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getThrowMessage()" map="P"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getEquipCategory()" map="Q"/>
  <method class="crl.item.ItemDefinition" name="int getAttackCost()" map="R"/>
  <method class="crl.item.ItemDefinition" name="boolean isUnique()" map="S"/>
  <method class="crl.item.ItemDefinition" name="int getDefense()" map="T"/>
  <method class="crl.item.ItemDefinition" name="sz.csi.textcomponents.MenuItem getShopMenuItem()" map="U"/>
  <method class="crl.item.ItemDefinition" name="int getEvadeBreak()" map="V"/>
  <method class="crl.item.ItemDefinition" name="int getBaseIntegrity()" map="W"/>
  <method class="crl.item.ItemDefinition" name="int getMinLevel()" map="X"/>
  <method class="crl.item.ItemDefinition" name="int getThrowRange()" map="Y"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getMenuDescription()" map="Z"/>
  <method class="crl.item.ItemDefinition" name="int getReloadCostGold()" map="_"/>
  <method class="crl.item.ItemDefinition" name="void setMenuDescription(java.lang.String)" map="A"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getEffectOnUse()" map="a"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getEffectOnAcquire()" map="b"/>
  <method class="crl.item.ItemDefinition" name="void setReloadCostGold(int)" map="C"/>
  <method class="crl.item.ItemDefinition" name="int getRarity()" map="c"/>
  <method class="crl.item.ItemDefinition" name="int getAttack()" map="d"/>
  <method class="crl.item.ItemDefinition" name="int getVerticalRange()" map="e"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getUseMessage()" map="f"/>
  <method class="crl.item.ItemDefinition" name="boolean isSlicesThrough()" map="g"/>
  <method class="crl.item.ItemDefinition" name="java.lang.String getAttributesDescription()" map="h"/>
  <class name="crl.item.ItemFactory" map="E"/>
  <field class="crl.item.ItemFactory" name="vDefinitions" map="A"/>
  <field class="crl.item.ItemFactory" name="definitions" map="B"/>
  <field class="crl.item.ItemFactory" name="singleton" map="C"/>
  <method class="crl.item.ItemFactory" name="crl.item.ItemFactory getItemFactory()" map="A"/>
  <method class="crl.item.ItemFactory" name="crl.item.Item createItem(java.lang.String)" map="A"/>
  <method class="crl.item.ItemFactory" name="crl.item.Item createItemForLevel(int)" map="A"/>
  <method class="crl.item.ItemFactory" name="crl.item.ItemDefinition getDefinition(java.lang.String)" map="B"/>
  <method class="crl.item.ItemFactory" name="void init(crl.item.ItemDefinition[])" map="A"/>
  <package name="crl.feature" map="O"/>
  <package name="crl.feature.ai" map="A"/>
  <class name="crl.feature.ai.NullSelector" map="A"/>
  <method class="crl.feature.ai.NullSelector" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.feature.ai.NullSelector" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.feature.ai.NullSelector" name="java.lang.String getID()" map="B"/>
  <class name="crl.feature.ai.KegSelector" map="B"/>
  <field class="crl.feature.ai.KegSelector" name="KEGRANGE" map="K"/>
  <field class="crl.feature.ai.KegSelector" name="turns" map="L"/>
  <method class="crl.feature.ai.KegSelector" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.feature.ai.KegSelector" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.feature.ai.KegSelector" name="java.lang.String getID()" map="B"/>
  <package name="crl.feature.action" map="B"/>
  <class name="crl.feature.action.Shine" map="A"/>
  <field class="crl.feature.action.Shine" name="singleton" map="&#x00b5;"/>
  <method class="crl.feature.action.Shine" name="crl.feature.action.Shine getAction()" map="h"/>
  <method class="crl.feature.action.Shine" name="void execute()" map="F"/>
  <method class="crl.feature.action.Shine" name="java.lang.String getID()" map="D"/>
  <class name="crl.feature.SmartFeatureFactory" map="A"/>
  <field class="crl.feature.SmartFeatureFactory" name="definitions" map="A"/>
  <field class="crl.feature.SmartFeatureFactory" name="singleton" map="B"/>
  <method class="crl.feature.SmartFeatureFactory" name="void addDefinition(crl.feature.SmartFeature)" map="A"/>
  <method class="crl.feature.SmartFeatureFactory" name="crl.feature.SmartFeatureFactory getFactory()" map="A"/>
  <method class="crl.feature.SmartFeatureFactory" name="void init(crl.feature.SmartFeature[])" map="A"/>
  <method class="crl.feature.SmartFeatureFactory" name="crl.feature.SmartFeature buildFeature(java.lang.String)" map="A"/>
  <class name="crl.feature.Feature" map="B"/>
  <field class="crl.feature.Feature" name="goldPrize" map="A"/>
  <field class="crl.feature.Feature" name="keyCost" map="B"/>
  <field class="crl.feature.Feature" name="relevant" map="C"/>
  <field class="crl.feature.Feature" name="appearanceID" map="D"/>
  <field class="crl.feature.Feature" name="mysticWeaponPrize" map="E"/>
  <field class="crl.feature.Feature" name="scorePrize" map="F"/>
  <field class="crl.feature.Feature" name="ID" map="G"/>
  <field class="crl.feature.Feature" name="manaPrize" map="H"/>
  <field class="crl.feature.Feature" name="heightMod" map="I"/>
  <field class="crl.feature.Feature" name="destroyable" map="J"/>
  <field class="crl.feature.Feature" name="appearance" map="K"/>
  <field class="crl.feature.Feature" name="prize" map="L"/>
  <field class="crl.feature.Feature" name="effect" map="M"/>
  <field class="crl.feature.Feature" name="trigger" map="N"/>
  <field class="crl.feature.Feature" name="keyPrize" map="O"/>
  <field class="crl.feature.Feature" name="upgradePrize" map="P"/>
  <field class="crl.feature.Feature" name="description" map="Q"/>
  <field class="crl.feature.Feature" name="healPrize" map="R"/>
  <field class="crl.feature.Feature" name="heartPrize" map="S"/>
  <field class="crl.feature.Feature" name="resistance" map="T"/>
  <field class="crl.feature.Feature" name="isSolid" map="U"/>
  <field class="crl.feature.Feature" name="position" map="V"/>
  <field class="crl.feature.Feature" name="currentResistance" map="W"/>
  <method class="crl.feature.Feature" name="int getManaPrize()" map="A"/>
  <method class="crl.feature.Feature" name="void setSolid(boolean)" map="A"/>
  <method class="crl.feature.Feature" name="java.lang.String getDescription()" map="B"/>
  <method class="crl.feature.Feature" name="int getMysticWeaponPrize()" map="C"/>
  <method class="crl.feature.Feature" name="int getScorePrize()" map="D"/>
  <method class="crl.feature.Feature" name="int getHealPrize()" map="E"/>
  <method class="crl.feature.Feature" name="java.lang.String getEffect()" map="F"/>
  <method class="crl.feature.Feature" name="void setTrigger(java.lang.String)" map="A"/>
  <method class="crl.feature.Feature" name="boolean isVisible()" map="G"/>
  <method class="crl.feature.Feature" name="boolean isRelevant()" map="H"/>
  <method class="crl.feature.Feature" name="crl.feature.Feature getPrizeFor(crl.player.Player)" map="A"/>
  <method class="crl.feature.Feature" name="int getKeyCost()" map="I"/>
  <method class="crl.feature.Feature" name="void setHeightMod(int)" map="A"/>
  <method class="crl.feature.Feature" name="void setKeyPrize(int)" map="B"/>
  <method class="crl.feature.Feature" name="void setRelevant(boolean)" map="B"/>
  <method class="crl.feature.Feature" name="void setKeyCost(int)" map="C"/>
  <method class="crl.feature.Feature" name="void setPrize(crl.feature.Feature)" map="A"/>
  <method class="crl.feature.Feature" name="void setPosition(int, int, int)" map="A"/>
  <method class="crl.feature.Feature" name="void setPrizesFor(crl.player.Player)" map="B"/>
  <method class="crl.feature.Feature" name="crl.ui.Appearance getAppearance()" map="J"/>
  <method class="crl.feature.Feature" name="crl.feature.Feature damage(crl.player.Player, int)" map="A"/>
  <method class="crl.feature.Feature" name="void setHeartPrize(int)" map="D"/>
  <method class="crl.feature.Feature" name="sz.util.Position getPosition()" map="K"/>
  <method class="crl.feature.Feature" name="java.lang.String getID()" map="L"/>
  <method class="crl.feature.Feature" name="void damage(crl.monster.Monster)" map="A"/>
  <method class="crl.feature.Feature" name="void setUpgradePrize(int)" map="E"/>
  <method class="crl.feature.Feature" name="void setScorePrize(int)" map="F"/>
  <method class="crl.feature.Feature" name="boolean isDestroyable()" map="M"/>
  <method class="crl.feature.Feature" name="void setManaPrize(int)" map="G"/>
  <method class="crl.feature.Feature" name="int getHeightMod()" map="N"/>
  <method class="crl.feature.Feature" name="void setGoldPrize(int)" map="H"/>
  <method class="crl.feature.Feature" name="boolean isSolid()" map="O"/>
  <method class="crl.feature.Feature" name="int getUpgradePrize()" map="P"/>
  <method class="crl.feature.Feature" name="int getHeartPrize()" map="Q"/>
  <method class="crl.feature.Feature" name="int getKeyPrize()" map="R"/>
  <method class="crl.feature.Feature" name="int getGoldPrize()" map="S"/>
  <method class="crl.feature.Feature" name="void setEffect(java.lang.String)" map="B"/>
  <method class="crl.feature.Feature" name="void setHealPrize(int)" map="I"/>
  <method class="crl.feature.Feature" name="java.lang.String getTrigger()" map="T"/>
  <method class="crl.feature.Feature" name="void setMysticWeaponPrize(int)" map="J"/>
  <method class="crl.feature.Feature" name="void setDestroyable(boolean)" map="C"/>
  <method class="crl.feature.Feature" name="java.lang.Object clone()" map="clone"/>
  <class name="crl.feature.CountDown" map="C"/>
  <field class="crl.feature.CountDown" name="turnsToDie" map="M"/>
  <method class="crl.feature.CountDown" name="crl.action.Action selectAction(crl.actor.Actor)" map="A"/>
  <method class="crl.feature.CountDown" name="crl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.feature.CountDown" name="void setTurns(int)" map="E"/>
  <method class="crl.feature.CountDown" name="java.lang.String getID()" map="B"/>
  <class name="crl.feature.VFeatures" map="D"/>
  <field class="crl.feature.VFeatures" name="features" map="A"/>
  <field class="crl.feature.VFeatures" name="mLocs" map="B"/>
  <method class="crl.feature.VFeatures" name="crl.feature.Feature getFeatureAt(sz.util.Position)" map="A"/>
  <method class="crl.feature.VFeatures" name="void addFeature(crl.feature.Feature)" map="A"/>
  <method class="crl.feature.VFeatures" name="void removeAllOf(java.lang.String)" map="A"/>
  <method class="crl.feature.VFeatures" name="void removeFeature(crl.feature.Feature)" map="B"/>
  <class name="crl.feature.SmartFeature" map="E"/>
  <field class="crl.feature.SmartFeature" name="height" map="&#x0100;"/>
  <field class="crl.feature.SmartFeature" name="ID" map="&#x0101;"/>
  <field class="crl.feature.SmartFeature" name="appearance" map="&#x0102;"/>
  <field class="crl.feature.SmartFeature" name="destroyable" map="&#x0103;"/>
  <field class="crl.feature.SmartFeature" name="damageOnStep" map="&#x0104;"/>
  <field class="crl.feature.SmartFeature" name="effectOnStep" map="&#x0105;"/>
  <field class="crl.feature.SmartFeature" name="description" map="&#x0106;"/>
  <field class="crl.feature.SmartFeature" name="appearanceID" map="&#x0107;"/>
  <method class="crl.feature.SmartFeature" name="void setDescription(java.lang.String)" map="H"/>
  <method class="crl.feature.SmartFeature" name="java.lang.String getEffectOnStep()" map="&#x010d;"/>
  <method class="crl.feature.SmartFeature" name="java.lang.String getID()" map="&#x010e;"/>
  <method class="crl.feature.SmartFeature" name="void setDamageOnStep(int)" map="z"/>
  <method class="crl.feature.SmartFeature" name="void setID(java.lang.String)" map="I"/>
  <method class="crl.feature.SmartFeature" name="void setAppearance(crl.ui.Appearance)" map="A"/>
  <method class="crl.feature.SmartFeature" name="void setDestroyable(boolean)" map="F"/>
  <method class="crl.feature.SmartFeature" name="void setHeight(int)" map="&#x00a2;"/>
  <method class="crl.feature.SmartFeature" name="int getDamageOnStep()" map="&#x010f;"/>
  <method class="crl.feature.SmartFeature" name="boolean isVisible()" map="&#x0110;"/>
  <method class="crl.feature.SmartFeature" name="java.lang.String getDescription()" map="I"/>
  <method class="crl.feature.SmartFeature" name="void setEffectOnStep(java.lang.String)" map="J"/>
  <method class="crl.feature.SmartFeature" name="java.lang.Object clone()" map="clone"/>
  <method class="crl.feature.SmartFeature" name="crl.ui.Appearance getAppearance()" map="G"/>
  <method class="crl.feature.SmartFeature" name="int getHeight()" map="&#x0111;"/>
  <method class="crl.feature.SmartFeature" name="boolean isDestroyable()" map="&#x0112;"/>
  <class name="crl.feature.FeatureFactory" map="F"/>
  <field class="crl.feature.FeatureFactory" name="definitions" map="A"/>
  <field class="crl.feature.FeatureFactory" name="singleton" map="B"/>
  <method class="crl.feature.FeatureFactory" name="void init(crl.feature.Feature[])" map="A"/>
  <method class="crl.feature.FeatureFactory" name="crl.feature.Feature buildFeature(java.lang.String)" map="A"/>
  <method class="crl.feature.FeatureFactory" name="crl.feature.FeatureFactory getFactory()" map="A"/>
  <method class="crl.feature.FeatureFactory" name="java.lang.String getDescriptionForID(java.lang.String)" map="B"/>
  <method class="crl.feature.FeatureFactory" name="void addDefinition(crl.feature.Feature)" map="A"/>
  <class name="crl.SaveGameFilenameFilter" map="A"/>
  <method class="crl.SaveGameFilenameFilter" name="boolean accept(java.io.File, java.lang.String)" map="accept"/>
  <field class="crl.Main" name="createNew" map="A"/>
  <field class="crl.Main" name="configuration" map="B"/>
  <field class="crl.Main" name="JCURSES_CONSOLE" map="C"/>
  <field class="crl.Main" name="UIconfiguration" map="D"/>
  <field class="crl.Main" name="uiFile" map="E"/>
  <field class="crl.Main" name="mode" map="F"/>
  <field class="crl.Main" name="ui" map="G"/>
  <field class="crl.Main" name="currentGame" map="H"/>
  <field class="crl.Main" name="SWING_GFX" map="I"/>
  <method class="crl.Main" name="void initializeFeatures()" map="A"/>
  <method class="crl.Main" name="void loadGame()" map="B"/>
  <method class="crl.Main" name="void crash(java.lang.String, java.lang.Throwable)" map="A"/>
  <method class="crl.Main" name="void newGame()" map="C"/>
  <method class="crl.Main" name="void title()" map="D"/>
  <method class="crl.Main" name="void initializeGAppearances()" map="E"/>
  <method class="crl.Main" name="void initializeCells()" map="F"/>
  <method class="crl.Main" name="void initializeUI(java.lang.Object)" map="A"/>
  <method class="crl.Main" name="void arena()" map="G"/>
  <method class="crl.Main" name="void init()" map="H"/>
  <method class="crl.Main" name="void initializeMonsters()" map="I"/>
  <method class="crl.Main" name="void initializeCAppearances()" map="J"/>
  <method class="crl.Main" name="void initializeItems()" map="K"/>
  <method class="crl.Main" name="void readConfiguration()" map="L"/>
  <method class="crl.Main" name="void training()" map="M"/>
  <method class="crl.Main" name="void initializeActions()" map="N"/>
  <method class="crl.Main" name="void prologue()" map="O"/>
  <method class="crl.Main" name="void initializeSelectors()" map="P"/>
  <method class="crl.Main" name="crl.ai.ActionSelector[] getSelectorDefinitions()" map="Q"/>
</map>
</yguard>
